{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport default function useNormalFlightSearch() {\n  _s();\n  const [searchResults, setSearchResults] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [pagination, setPagination] = useState({\n    current: 1,\n    pageSize: 25,\n    total: 0\n  });\n  const [errors, setErrors] = useState({\n    departure: false,\n    arrival: false,\n    maxSegments: false\n  });\n  const handleSearch = async searchParams => {\n    const {\n      departure,\n      arrival,\n      maxSegments,\n      selectedAirlines\n    } = searchParams;\n\n    // Reset errors\n    setErrors({\n      departure: !departure,\n      arrival: !arrival,\n      maxSegments: !maxSegments\n    });\n\n    // Validate mandatory fields\n    if (!departure || !arrival || !maxSegments) {\n      return;\n    }\n    setIsLoading(true);\n    try {\n      // This endpoint is for Normal Route Builder (not AC-specific)\n      const response = await fetch('https://backend-284998006367.us-central1.run.app/api/find-normal-routes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          departureAirport: departure,\n          arrivalAirport: arrival,\n          excludedAirline: selectedAirlines.length ? selectedAirlines : [],\n          maxSegments: maxSegments\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Search failed');\n      }\n\n      // Create mock results if needed - normally would come from the API\n      const mockResults = {\n        routes: createMockRoutes(departure, arrival, maxSegments),\n        status: \"success\"\n      };\n\n      // Use mock results for now - in production, use 'await response.json()'\n      setSearchResults(mockResults);\n      setPagination(prev => ({\n        ...prev,\n        total: mockResults.routes.length\n      }));\n    } catch (error) {\n      console.error('Search failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleTableChange = newPagination => {\n    setPagination(newPagination);\n  };\n\n  // Helper to create mock routes since we don't have a real API for this yet\n  const createMockRoutes = (departure, arrival, maxSegments) => {\n    const airlines = [\"UA\", \"LH\", \"SQ\", \"BA\", \"DL\", \"AA\", \"EK\", \"QR\"];\n    const routes = [];\n    for (let i = 0; i < 15; i++) {\n      const segments = Math.min(Math.floor(Math.random() * maxSegments) + 1, maxSegments);\n      const route = {\n        id: `normal-${i}`,\n        departure: departure,\n        arrival: arrival,\n        segments: segments,\n        airlines: [],\n        duration: Math.floor(Math.random() * 1200) + 300,\n        // 5-25 hours in minutes\n        distance: Math.floor(Math.random() * 8000) + 2000,\n        flightSegments: []\n      };\n\n      // Generate segments\n      let currentAirport = departure;\n      for (let j = 0; j < segments; j++) {\n        const airline = airlines[Math.floor(Math.random() * airlines.length)];\n        if (!route.airlines.includes(airline)) {\n          route.airlines.push(airline);\n        }\n        const nextAirport = j === segments - 1 ? arrival : `Airport${j + 1}`;\n        route.flightSegments.push({\n          id: `segment-${i}-${j}`,\n          airline: airline,\n          flightNumber: `${airline}${Math.floor(Math.random() * 1000) + 100}`,\n          departure: currentAirport,\n          arrival: nextAirport,\n          departureTime: \"10:00\",\n          arrivalTime: \"14:30\",\n          duration: Math.floor(Math.random() * 600) + 120 // 2-12 hours in minutes\n        });\n        currentAirport = nextAirport;\n      }\n    }\n    return routes;\n  };\n  return {\n    searchResults,\n    isLoading,\n    handleSearch,\n    pagination,\n    handleTableChange,\n    errors\n  };\n}\n_s(useNormalFlightSearch, \"gs9mUgZeyqaZ6QwoReRuPoG+YoI=\");","map":{"version":3,"names":["useState","useNormalFlightSearch","_s","searchResults","setSearchResults","isLoading","setIsLoading","pagination","setPagination","current","pageSize","total","errors","setErrors","departure","arrival","maxSegments","handleSearch","searchParams","selectedAirlines","response","fetch","method","headers","body","JSON","stringify","departureAirport","arrivalAirport","excludedAirline","length","ok","Error","mockResults","routes","createMockRoutes","status","prev","error","console","handleTableChange","newPagination","airlines","i","segments","Math","min","floor","random","route","id","duration","distance","flightSegments","currentAirport","j","airline","includes","push","nextAirport","flightNumber","departureTime","arrivalTime"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useNormalFlightSearch.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nexport default function useNormalFlightSearch() {\r\n  const [searchResults, setSearchResults] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [pagination, setPagination] = useState({\r\n    current: 1,\r\n    pageSize: 25,\r\n    total: 0,\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    departure: false,\r\n    arrival: false,\r\n    maxSegments: false\r\n  });\r\n\r\n  const handleSearch = async (searchParams) => {\r\n    const { departure, arrival, maxSegments, selectedAirlines } = searchParams;\r\n    \r\n    // Reset errors\r\n    setErrors({\r\n      departure: !departure,\r\n      arrival: !arrival,\r\n      maxSegments: !maxSegments\r\n    });\r\n\r\n    // Validate mandatory fields\r\n    if (!departure || !arrival || !maxSegments) {\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      // This endpoint is for Normal Route Builder (not AC-specific)\r\n      const response = await fetch('https://backend-284998006367.us-central1.run.app/api/find-normal-routes', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          departureAirport: departure,\r\n          arrivalAirport: arrival,\r\n          excludedAirline: selectedAirlines.length ? selectedAirlines : [],\r\n          maxSegments: maxSegments\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Search failed');\r\n      }\r\n\r\n      // Create mock results if needed - normally would come from the API\r\n      const mockResults = {\r\n        routes: createMockRoutes(departure, arrival, maxSegments),\r\n        status: \"success\"\r\n      };\r\n      \r\n      // Use mock results for now - in production, use 'await response.json()'\r\n      setSearchResults(mockResults);\r\n      setPagination(prev => ({\r\n        ...prev,\r\n        total: mockResults.routes.length\r\n      }));\r\n    } catch (error) {\r\n      console.error('Search failed:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTableChange = (newPagination) => {\r\n    setPagination(newPagination);\r\n  };\r\n  \r\n  // Helper to create mock routes since we don't have a real API for this yet\r\n  const createMockRoutes = (departure, arrival, maxSegments) => {\r\n    const airlines = [\"UA\", \"LH\", \"SQ\", \"BA\", \"DL\", \"AA\", \"EK\", \"QR\"];\r\n    const routes = [];\r\n    \r\n    for (let i = 0; i < 15; i++) {\r\n      const segments = Math.min(Math.floor(Math.random() * maxSegments) + 1, maxSegments);\r\n      \r\n      const route = {\r\n        id: `normal-${i}`,\r\n        departure: departure,\r\n        arrival: arrival,\r\n        segments: segments,\r\n        airlines: [],\r\n        duration: Math.floor(Math.random() * 1200) + 300, // 5-25 hours in minutes\r\n        distance: Math.floor(Math.random() * 8000) + 2000,\r\n        flightSegments: []\r\n      };\r\n      \r\n      // Generate segments\r\n      let currentAirport = departure;\r\n      for (let j = 0; j < segments; j++) {\r\n        const airline = airlines[Math.floor(Math.random() * airlines.length)];\r\n        \r\n        if (!route.airlines.includes(airline)) {\r\n          route.airlines.push(airline);\r\n        }\r\n        \r\n        const nextAirport = j === segments - 1 ? arrival : `Airport${j + 1}`;\r\n        \r\n        route.flightSegments.push({\r\n          id: `segment-${i}-${j}`,\r\n          airline: airline,\r\n          flightNumber: `${airline}${Math.floor(Math.random() * 1000) + 100}`,\r\n          departure: currentAirport,\r\n          arrival: nextAirport,\r\n          departureTime: \"10:00\",\r\n          arrivalTime: \"14:30\",\r\n          duration: Math.floor(Math.random() * 600) + 120 // 2-12 hours in minutes\r\n        });\r\n        \r\n        currentAirport = nextAirport;\r\n      }\r\n    }\r\n    \r\n    return routes;\r\n  };\r\n\r\n  return {\r\n    searchResults,\r\n    isLoading,\r\n    handleSearch,\r\n    pagination,\r\n    handleTableChange,\r\n    errors,\r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}