{"ast":null,"code":"var _jsxFileName = \"/Users/hanguyen/Downloads/route-builder-ac1-test/src/pages/FlightSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Select, InputNumber, Button, Table, Card, Tag, Spin, Input, Modal, DatePicker } from 'antd';\nimport { SearchOutlined, DownOutlined, CheckOutlined } from '@ant-design/icons';\nimport { airports } from '../data/airports';\nimport airlines from '../data/airlines';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport routeDetails from '../data/route_details.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndayjs.extend(utc);\nconst FlightSearch = () => {\n  _s();\n  const [departure, setDeparture] = useState(null);\n  const [arrival, setArrival] = useState(null);\n  const [selectedAirlines, setSelectedAirlines] = useState([]);\n  const [maxSegments, setMaxSegments] = useState(4);\n  const [searchResults, setSearchResults] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [pagination, setPagination] = useState({\n    current: 1,\n    pageSize: 25,\n    total: 0\n  });\n  const [errors, setErrors] = useState({\n    departure: false,\n    arrival: false,\n    maxSegments: false\n  });\n  const [tableSearchText, setTableSearchText] = useState('');\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [currentRoute, setCurrentRoute] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n\n  // Sort airlines alphabetically\n  const sortedAirlines = [...airlines].map(airline => ({\n    ...airline,\n    searchStr: `${airline.value} ${airline.label}`.toLowerCase()\n  })).sort((a, b) => a.label.localeCompare(b.label));\n  const airportSelectProps = {\n    showSearch: true,\n    allowClear: true,\n    suffixIcon: null,\n    options: airports.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`,\n      searchStr: `${airport.IATA} ${airport.Name}`.toLowerCase()\n    })),\n    filterOption: (input, option) => {\n      if (!input) return true;\n      input = input.toString().toLowerCase();\n\n      // IATA match\n      if (option.value.toLowerCase().includes(input)) {\n        option.priority = 2;\n        return true;\n      }\n\n      // Name/label match\n      if (option.label.toLowerCase().includes(input)) {\n        option.priority = 1;\n        return true;\n      }\n      return false;\n    },\n    filterSort: (optionA, optionB) => {\n      // Sort by priority (IATA matches first)\n      if (optionA.priority !== optionB.priority) {\n        return optionB.priority - optionA.priority;\n      }\n      // Then alphabetically\n      return optionA.label.localeCompare(optionB.label);\n    },\n    listHeight: 256,\n    virtual: true,\n    dropdownStyle: {\n      maxHeight: 400\n    }\n  };\n  const airlineSelectProps = {\n    showSearch: true,\n    allowClear: true,\n    filterSort: (optionA, optionB, input) => {\n      if (!input) return optionA.label.localeCompare(optionB.label);\n      const searchInput = input.toString().toLowerCase();\n      const aMatch = optionA.searchStr.includes(searchInput);\n      const bMatch = optionB.searchStr.includes(searchInput);\n      if (aMatch && !bMatch) return -1;\n      if (!aMatch && bMatch) return 1;\n      return optionA.label.localeCompare(optionB.label);\n    },\n    filterOption: (input, option) => {\n      if (!input) return true;\n      const searchInput = input.toString().toLowerCase();\n      return option.searchStr.includes(searchInput);\n    },\n    listHeight: 400,\n    virtual: false,\n    menuItemSelectedIcon: null,\n    dropdownStyle: {\n      maxHeight: 400\n    }\n  };\n  const columns = [{\n    title: 'Origin',\n    dataIndex: 'departure',\n    sorter: (a, b) => a.departure.localeCompare(b.departure),\n    width: 80\n  }, {\n    title: 'Connections',\n    key: 'connections',\n    render: (_, record) => /*#__PURE__*/_jsxDEV(\"span\", {\n      children: record.connections.length > 0 ? record.connections.join(' â†’ ') : '-'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this),\n    width: 200,\n    sorter: (a, b) => {\n      if (a.connections.length !== b.connections.length) {\n        return a.connections.length - b.connections.length;\n      }\n      return a.connections.join('').localeCompare(b.connections.join(''));\n    },\n    sortDirections: ['ascend', 'descend']\n  }, {\n    title: 'Destination',\n    dataIndex: 'arrival',\n    sorter: (a, b) => a.arrival.localeCompare(b.arrival),\n    width: 80\n  }, {\n    title: 'Stops',\n    dataIndex: 'numConnections',\n    sorter: (a, b) => a.numConnections - b.numConnections,\n    render: num => {\n      let color;\n      switch (num) {\n        case 0:\n          color = 'green';\n          break;\n        case 1:\n          color = 'blue';\n          break;\n        case 2:\n          color = 'orange';\n          break;\n        case 3:\n          color = 'gold';\n          break;\n        default:\n          color = 'red';\n      }\n      return /*#__PURE__*/_jsxDEV(Tag, {\n        color: color,\n        children: num === 0 ? 'Direct' : `${num} Stop${num > 1 ? 's' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this);\n    },\n    width: 80\n  }, {\n    title: 'Distance',\n    dataIndex: 'totalDistance',\n    sorter: (a, b) => a.totalDistance - b.totalDistance,\n    render: distance => distance.toLocaleString(),\n    width: 60,\n    align: 'right'\n  }, {\n    title: 'Economy',\n    dataIndex: 'YPrice',\n    sorter: (a, b) => a.YPrice - b.YPrice,\n    render: price => price.toLocaleString(),\n    width: 80,\n    align: 'right'\n  }, {\n    title: 'Business',\n    dataIndex: 'JPrice',\n    sorter: (a, b) => a.JPrice - b.JPrice,\n    render: price => price.toLocaleString(),\n    width: 80,\n    align: 'right'\n  }, {\n    title: 'First',\n    dataIndex: 'FPrice',\n    sorter: (a, b) => a.FPrice - b.FPrice,\n    render: price => price.toLocaleString(),\n    width: 80,\n    align: 'right'\n  }, {\n    title: 'Y %',\n    dataIndex: 'Ynet',\n    width: 160,\n    render: text => text || '-',\n    sorter: (a, b) => {\n      const getPercent = str => {\n        if (!str) return 0;\n        const match = str.match(/^(-?\\d+)/);\n        return match ? parseInt(match[0]) : 0;\n      };\n      return getPercent(a.Ynet) - getPercent(b.Ynet);\n    }\n  }, {\n    title: 'J %',\n    dataIndex: 'Jnet',\n    width: 160,\n    render: text => text || '-',\n    sorter: (a, b) => {\n      const getPercent = str => {\n        if (!str) return 0;\n        const match = str.match(/^(-?\\d+)/);\n        return match ? parseInt(match[0]) : 0;\n      };\n      return getPercent(a.Jnet) - getPercent(b.Jnet);\n    }\n  }, {\n    title: 'F %',\n    dataIndex: 'Fnet',\n    width: 160,\n    render: text => text || '-',\n    sorter: (a, b) => {\n      const getPercent = str => {\n        if (!str) return 0;\n        const match = str.match(/^(-?\\d+)/);\n        return match ? parseInt(match[0]) : 0;\n      };\n      return getPercent(a.Fnet) - getPercent(b.Fnet);\n    }\n  }, {\n    title: '',\n    key: 'actions',\n    width: 20,\n    render: (_, record) => /*#__PURE__*/_jsxDEV(Button, {\n      type: \"link\",\n      icon: /*#__PURE__*/_jsxDEV(DownOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this),\n      onClick: () => {\n        const fullRoute = [record.departure, ...record.connections, record.arrival];\n        setCurrentRoute(fullRoute);\n        setIsModalVisible(true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this)\n  }];\n  const handleSearch = async () => {\n    // Reset errors\n    setErrors({\n      departure: !departure,\n      arrival: !arrival,\n      maxSegments: !maxSegments\n    });\n\n    // Validate mandatory fields\n    if (!departure || !arrival || !maxSegments) {\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const response = await fetch('https://backend-284998006367.us-central1.run.app/api/find-routes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          departureAirport: departure,\n          arrivalAirport: arrival,\n          excludedAirline: selectedAirlines.length ? selectedAirlines[0] : \"null\",\n          maxSegments: maxSegments\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Search failed');\n      }\n      const data = await response.json();\n      setSearchResults(data);\n      setPagination(prev => ({\n        ...prev,\n        total: data.routes.length\n      }));\n    } catch (error) {\n      console.error('Search failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleTableChange = (newPagination, filters, sorter) => {\n    setPagination(newPagination);\n  };\n\n  // Filter function for the table data\n  const getFilteredData = () => {\n    if (!(searchResults !== null && searchResults !== void 0 && searchResults.routes) || !tableSearchText) {\n      return (searchResults === null || searchResults === void 0 ? void 0 : searchResults.routes) || [];\n    }\n    const searchLower = tableSearchText.toLowerCase();\n    return searchResults.routes.filter(route => {\n      // Convert all relevant fields to strings and check if they include the search text\n      return route.departure.toLowerCase().includes(searchLower) || route.arrival.toLowerCase().includes(searchLower) || route.connections.join(' ').toLowerCase().includes(searchLower) || route.YPrice.toString().includes(searchLower) || route.JPrice.toString().includes(searchLower) || route.FPrice.toString().includes(searchLower) || (route.Ynet || '').toLowerCase().includes(searchLower) || (route.Jnet || '').toLowerCase().includes(searchLower) || (route.Fnet || '').toLowerCase().includes(searchLower);\n    });\n  };\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const handleDateSearch = async () => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    const processedSegments = [];\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    try {\n      console.log(`Starting search for route: ${currentRoute.join('-')}`);\n      console.log(`Base date: ${baseDate}`);\n\n      // Process first segment\n      console.log(`Processing first segment: ${currentRoute[0]}-${currentRoute[1]}`);\n      const firstSegment = await processSegment(currentRoute[0], currentRoute[1], baseDate);\n      processedSegments.push(firstSegment);\n\n      // Process subsequent segments\n      for (let i = 1; i < currentRoute.length - 1; i++) {\n        var _prevSegment$earliest, _prevSegment$latestAr;\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        const prevSegment = processedSegments[i - 1];\n        console.log(`\\nProcessing segment ${i + 1}: ${from}-${to}`);\n        console.log(`Previous segment status:`, {\n          route: prevSegment.route,\n          flights: prevSegment.flights.length,\n          earliestArrival: (_prevSegment$earliest = prevSegment.earliestArrival) === null || _prevSegment$earliest === void 0 ? void 0 : _prevSegment$earliest.format('YYYY-MM-DD HH:mm'),\n          latestArrival: (_prevSegment$latestAr = prevSegment.latestArrival) === null || _prevSegment$latestAr === void 0 ? void 0 : _prevSegment$latestAr.format('YYYY-MM-DD HH:mm')\n        });\n\n        // Skip if previous segment has no arrival times\n        if (!prevSegment.earliestArrival || !prevSegment.latestArrival) {\n          console.log(`No arrival times from previous segment, skipping ${from}-${to}`);\n          processedSegments.push({\n            route: `${from}-${to}`,\n            flights: [],\n            earliestArrival: null,\n            latestArrival: null\n          });\n          continue;\n        }\n\n        // Calculate time window based on previous segment\n        let timeWindow;\n        if (prevSegment.flights.length === 0) {\n          console.log(`Previous segment ${prevSegment.route} has no flights, using distance-based calculation`);\n          const distance = getSegmentDistance(currentRoute[i - 1], currentRoute[i]);\n          const minConnectionHours = Math.ceil(distance / 575); // Round up to nearest hour\n          console.log(`Distance calculation:\n  - Route: ${currentRoute[i - 1]}-${currentRoute[i]}\n  - Distance: ${distance.toLocaleString()} miles\n  - Speed: 575 miles/h\n  - Minimum flight time: ${minConnectionHours} hours`);\n          timeWindow = {\n            earliestDeparture: dayjs(prevSegment.earliestArrival).add(minConnectionHours, 'hour'),\n            latestDeparture: dayjs(prevSegment.latestArrival).add(24 + minConnectionHours, 'hour')\n          };\n        } else {\n          timeWindow = {\n            earliestDeparture: dayjs(prevSegment.earliestArrival),\n            latestDeparture: dayjs(prevSegment.latestArrival).add(24, 'hour')\n          };\n        }\n        console.log(`Time window for ${from}-${to}:\n  - Earliest departure: ${timeWindow.earliestDeparture.format('YYYY-MM-DD HH:mm')}\n  - Latest departure: ${timeWindow.latestDeparture.format('YYYY-MM-DD HH:mm')}\n  - Window duration: ${timeWindow.latestDeparture.diff(timeWindow.earliestDeparture, 'hours')} hours`);\n        const nextSegment = await processSegment(from, to, baseDate, timeWindow);\n        processedSegments.push(nextSegment);\n      }\n      console.log('\\nSearch completed. Summary:');\n      processedSegments.forEach((segment, index) => {\n        var _segment$earliestArri, _segment$latestArriva;\n        let timeWindowInfo = '';\n        let flightDetails = '';\n        if (segment.flights.length > 0) {\n          flightDetails = `\\n  Flights:${segment.flights.map(f => `\\n    - ${f.flightNumber}: ${f.departs} -> ${f.arrives}`).join('')}`;\n        }\n        if (index > 0) {\n          const prevSegment = processedSegments[index - 1];\n          if (prevSegment.flights.length === 0) {\n            const from = currentRoute[index];\n            const to = currentRoute[index + 1];\n            const distance = getSegmentDistance(from, to);\n            const minConnectionHours = Math.ceil(distance / 575);\n\n            // Calculate base time from previous segment or cascade from earlier segments\n            let baseTime;\n            let endTime;\n\n            // Walk back through segments to find the last valid arrival time\n            for (let i = index - 1; i >= 0; i--) {\n              const earlierSegment = processedSegments[i];\n              if (earlierSegment.earliestArrival) {\n                baseTime = earlierSegment.earliestArrival;\n                endTime = earlierSegment.latestArrival;\n                break;\n              }\n            }\n\n            // If no valid times found, use base date\n            if (!baseTime) {\n              baseTime = dayjs(baseDate);\n              endTime = baseTime;\n            }\n\n            // For next-day flights, add a day to the base time\n            if (baseTime.hour() >= 21) {\n              baseTime = baseTime.add(1, 'day').startOf('day');\n              endTime = endTime.add(1, 'day').startOf('day');\n            }\n            timeWindowInfo = `\n  Time window (distance-based):\n  - Distance: ${distance.toLocaleString()} km\n  - Minimum connection time: ${minConnectionHours} hours\n  - Base time from: ${baseTime.format('YYYY-MM-DD HH:mm')}\n  - Eligible departure window: ${baseTime.add(minConnectionHours, 'hour').format('YYYY-MM-DD HH:mm')} to ${endTime.add(48, 'hour').format('YYYY-MM-DD HH:mm')}`;\n          } else {\n            const earliestDeparture = prevSegment.earliestArrival;\n            const latestDeparture = prevSegment.latestArrival;\n\n            // For late arrivals, extend the window to next day\n            const windowEnd = latestDeparture.hour() >= 21 ? latestDeparture.add(48, 'hour') : latestDeparture.add(24, 'hour');\n            timeWindowInfo = `\n  Time window (standard):\n  - Eligible departure window: ${earliestDeparture === null || earliestDeparture === void 0 ? void 0 : earliestDeparture.format('YYYY-MM-DD HH:mm')} to ${windowEnd.format('YYYY-MM-DD HH:mm')}`;\n          }\n        }\n        console.log(`${segment.route}:\n  - Flights found: ${segment.flights.length}\n  - Earliest arrival: ${((_segment$earliestArri = segment.earliestArrival) === null || _segment$earliestArri === void 0 ? void 0 : _segment$earliestArri.format('YYYY-MM-DD HH:mm')) || 'N/A'}\n  - Latest arrival: ${((_segment$latestArriva = segment.latestArrival) === null || _segment$latestArriva === void 0 ? void 0 : _segment$latestArriva.format('YYYY-MM-DD HH:mm')) || 'N/A'}${flightDetails}${timeWindowInfo}`);\n      });\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\n    } catch (error) {\n      console.error('Error fetching segment details:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const processSegment = async (from, to, baseDate, timeWindow = null) => {\n    const API_URL = 'https://backend-284998006367.us-central1.run.app';\n    const dates = new Set();\n\n    // Add base date\n    dates.add(baseDate);\n\n    // Add next day if time window extends to it\n    if (timeWindow !== null && timeWindow !== void 0 && timeWindow.latestDeparture) {\n      const nextDay = dayjs(baseDate).add(1, 'day').format('YYYY-MM-DD');\n      if (timeWindow.latestDeparture.isAfter(dayjs(nextDay))) {\n        dates.add(nextDay);\n      }\n    }\n    const flights = [];\n    let earliestArrival = null;\n    let latestArrival = null;\n    console.log(`Processing route ${from}-${to}:`);\n    console.log(`  Base date: ${baseDate}`);\n    console.log(`  Checking dates:`, Array.from(dates));\n\n    // Process each date\n    for (const date of dates) {\n      const route = routeDetails.find(r => r.origin === from && r.destination === to && r.date === date);\n      if (route) {\n        console.log(`  Found segment ID ${route.ID} for date ${date}`);\n        try {\n          var _data$results, _data$results$, _data$results$$data;\n          const response = await fetch(`${API_URL}/api/seats/${route.ID}`, {\n            method: 'GET',\n            headers: {\n              'accept': 'application/json',\n              'Partner-Authorization': apiKey,\n              'Segment-ID': route.ID\n            }\n          });\n          if (!response.ok) {\n            console.log(`  Failed to fetch segment ${route.ID}: ${response.status}`);\n            continue;\n          }\n          const data = await response.json();\n          console.log(`  Raw flight data for segment ${route.ID}:`, (_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : _data$results$$data.data);\n          const validFlights = processFlightData(data, timeWindow);\n          console.log(`  Segment ${route.ID}: Found ${validFlights.length} valid flights`);\n          if (timeWindow) {\n            console.log(`  Time window: ${timeWindow.earliestDeparture.format('YYYY-MM-DD HH:mm')} to ${timeWindow.latestDeparture.format('YYYY-MM-DD HH:mm')}`);\n          }\n          flights.push(...validFlights);\n\n          // Update arrival time bounds\n          validFlights.forEach(flight => {\n            const arrivalTime = dayjs(flight.ArrivesAt); // Use original timestamp\n            console.log(`  Processing flight arrival: ${flight.ArrivesAt} -> ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\n            if (!earliestArrival || arrivalTime.isBefore(earliestArrival)) {\n              earliestArrival = arrivalTime;\n            }\n            if (!latestArrival || arrivalTime.isAfter(latestArrival)) {\n              latestArrival = arrivalTime;\n            }\n          });\n        } catch (error) {\n          console.error(`  Error fetching segment ${route.ID}:`, error);\n        }\n      } else {\n        console.log(`  No segment found for ${from}-${to} on ${date}`);\n        console.log(`  Available routes:`, routeDetails.filter(r => r.date === date).map(r => `${r.origin}-${r.destination}`));\n      }\n    }\n    if (flights.length > 0) {\n      var _earliestArrival, _latestArrival;\n      console.log(`  Route ${from}-${to} summary:`);\n      console.log(`    Earliest arrival: ${(_earliestArrival = earliestArrival) === null || _earliestArrival === void 0 ? void 0 : _earliestArrival.format('YYYY-MM-DD HH:mm')}`);\n      console.log(`    Latest arrival: ${(_latestArrival = latestArrival) === null || _latestArrival === void 0 ? void 0 : _latestArrival.format('YYYY-MM-DD HH:mm')}`);\n      console.log(`    Total flights: ${flights.length}`);\n    } else {\n      console.log(`  No flights found for route ${from}-${to}`);\n    }\n    return {\n      route: `${from}-${to}`,\n      flights,\n      earliestArrival,\n      latestArrival\n    };\n  };\n  const processFlightData = (data, timeWindow) => {\n    var _data$results2, _data$results2$, _data$results2$$data;\n    const flights = {};\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    const rawFlights = ((_data$results2 = data.results) === null || _data$results2 === void 0 ? void 0 : (_data$results2$ = _data$results2[0]) === null || _data$results2$ === void 0 ? void 0 : (_data$results2$$data = _data$results2$.data) === null || _data$results2$$data === void 0 ? void 0 : _data$results2$$data.data) || [];\n    console.log(`  Processing ${rawFlights.length} raw flights`);\n    rawFlights.filter(trip => {\n      if (trip.Stops !== 0) {\n        console.log(`  Skipping flight with ${trip.Stops} stops`);\n        return false;\n      }\n      if (timeWindow) {\n        const departureTime = dayjs(trip.DepartsAt);\n        const isValid = departureTime.isAfter(timeWindow.earliestDeparture) && departureTime.isBefore(timeWindow.latestDeparture);\n        if (!isValid) {\n          console.log(`  Skipping flight outside time window: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n        }\n        return isValid;\n      }\n      return true;\n    }).forEach(trip => {\n      const flightNumber = trip.FlightNumbers;\n      const departureTime = dayjs(trip.DepartsAt);\n      const existingFlight = flights[flightNumber];\n\n      // If this is a duplicate flight, only keep the later one\n      if (existingFlight) {\n        const existingDeparture = dayjs(existingFlight.DepartsAt);\n        if (departureTime.isBefore(existingDeparture)) {\n          return; // Skip this one, keep the existing later flight\n        }\n      }\n      const arrivalTime = dayjs(trip.ArrivesAt);\n      const baseDayjs = dayjs(baseDate);\n\n      // Calculate day difference from base date\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(trip.Carriers),\n        aircraft: trip.Aircraft[0],\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: trip.DepartsAt,\n        ArrivesAt: trip.ArrivesAt,\n        economy: false,\n        business: false,\n        first: false\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const segmentColumns = [{\n    title: 'From',\n    dataIndex: 'from',\n    key: 'from'\n  }, {\n    title: 'To',\n    dataIndex: 'to',\n    key: 'to'\n  }, {\n    title: 'Flight',\n    dataIndex: 'flightNumber',\n    key: 'flightNumber'\n  }, {\n    title: 'Airlines',\n    dataIndex: 'airlines',\n    key: 'airlines'\n  }, {\n    title: 'Aircraft',\n    dataIndex: 'aircraft',\n    key: 'aircraft'\n  }, {\n    title: 'Departs',\n    dataIndex: 'departs',\n    key: 'departs',\n    sorter: (a, b) => {\n      // Use the original timestamp for sorting\n      return dayjs(a.DepartsAt).unix() - dayjs(b.DepartsAt).unix();\n    }\n  }, {\n    title: 'Arrives',\n    dataIndex: 'arrives',\n    key: 'arrives',\n    sorter: (a, b) => {\n      // Use the original timestamp for sorting\n      return dayjs(a.ArrivesAt).unix() - dayjs(b.ArrivesAt).unix();\n    }\n  }, {\n    title: 'Economy',\n    dataIndex: 'economy',\n    key: 'economy',\n    render: value => value ? 'âœ“' : ''\n  }, {\n    title: 'Business',\n    dataIndex: 'business',\n    key: 'business',\n    render: value => value ? 'âœ“' : ''\n  }, {\n    title: 'First',\n    dataIndex: 'first',\n    key: 'first',\n    render: value => value ? 'âœ“' : ''\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flight-search-container\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      className: \"search-form\",\n      style: {\n        boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flight-search-element\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"element-label\",\n          children: \"Departure Airport: *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          ...airportSelectProps,\n          value: departure,\n          onChange: setDeparture,\n          placeholder: \"Select departure airport...\",\n          className: \"airport-select\",\n          status: errors.departure ? 'error' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flight-search-element\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"element-label\",\n          children: \"Arrival Airport: *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          ...airportSelectProps,\n          value: arrival,\n          onChange: setArrival,\n          placeholder: \"Select arrival airport...\",\n          className: \"airport-select\",\n          status: errors.arrival ? 'error' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flight-search-element\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"element-label\",\n          children: \"Airlines Excluded:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          ...airlineSelectProps,\n          mode: \"multiple\",\n          value: selectedAirlines,\n          onChange: setSelectedAirlines,\n          options: sortedAirlines,\n          placeholder: \"Select airlines...\",\n          className: \"airline-select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"segments-element\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"element-label\",\n          children: \"Maximum Segments *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 804,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputNumber, {\n          min: 1,\n          max: 5,\n          value: maxSegments,\n          onChange: setMaxSegments,\n          status: errors.maxSegments ? 'error' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 803,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        icon: /*#__PURE__*/_jsxDEV(SearchOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 17\n        }, this),\n        onClick: handleSearch,\n        loading: isLoading,\n        className: \"search-button\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 814,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 7\n    }, this), searchResults && /*#__PURE__*/_jsxDEV(Card, {\n      className: \"results-card\",\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Search Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 830,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Search routes...\",\n          value: tableSearchText,\n          onChange: e => setTableSearchText(e.target.value),\n          style: {\n            width: 200\n          },\n          allowClear: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 13\n      }, this),\n      style: {\n        boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)'\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        dataSource: getFilteredData(),\n        columns: columns,\n        rowKey: (record, index) => index,\n        pagination: {\n          ...pagination,\n          showSizeChanger: true,\n          showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} routes`,\n          pageSizeOptions: ['10', '25', '50', '100'],\n          defaultPageSize: 25\n        },\n        loading: isLoading,\n        onChange: handleTableChange,\n        scroll: {\n          x: 1600\n        },\n        showSorterTooltip: true,\n        sortDirections: ['ascend', 'descend']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 826,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Flight Details\",\n      open: isModalVisible,\n      onOk: handleDateSearch,\n      onCancel: () => {\n        setIsModalVisible(false);\n        setSelectedDates(null);\n        setApiKey('');\n        setSegmentDetails([]);\n      },\n      okText: \"Search Flights\",\n      okButtonProps: {\n        disabled: !selectedDates || !apiKey,\n        loading: isLoadingSegments\n      },\n      width: 1500,\n      styles: {\n        body: {\n          padding: '12px',\n          maxWidth: '100%'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 16\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 8\n          },\n          children: \"Select Travel Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          style: {\n            width: '100%'\n          },\n          onChange: date => setSelectedDates(date),\n          disabledDate: current => current && current < dayjs().startOf('day')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 885,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 16\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 8\n          },\n          children: \"API Key:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 894,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Enter API key\",\n          value: apiKey,\n          onChange: e => setApiKey(e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 893,\n        columnNumber: 9\n      }, this), isLoadingSegments ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          padding: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 903,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          overflowX: 'auto'\n        },\n        children: currentRoute && currentRoute.slice(0, -1).map((from, index) => {\n          const to = currentRoute[index + 1];\n          const routeKey = `${from}-${to}`;\n          const flights = segmentDetails.filter(flight => flight.from === from && flight.to === to);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '24px',\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                marginBottom: '16px'\n              },\n              children: routeKey\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 923,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Table, {\n              dataSource: flights,\n              columns: segmentColumns,\n              size: \"small\",\n              rowKey: (record, index) => `${routeKey}-${index}`,\n              sortDirections: ['ascend', 'descend'],\n              style: {\n                width: '100%',\n                tableLayout: 'fixed'\n              },\n              pagination: {\n                defaultPageSize: 10,\n                showSizeChanger: true,\n                showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} flights`,\n                pageSizeOptions: ['10', '20', '50', 'all'],\n                position: ['bottomRight']\n              },\n              locale: {\n                emptyText: 'No flights available'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 924,\n              columnNumber: 19\n            }, this)]\n          }, routeKey, true, {\n            fileName: _jsxFileName,\n            lineNumber: 919,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 862,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .flight-search-container {\n          max-width: 1200px;\n          margin: 20px auto;\n          padding: 0 20px;\n        }\n        .search-form {\n          margin-bottom: 20px;\n        }\n        .flight-search-element {\n          margin-bottom: 16px;\n        }\n        .element-label {\n          margin-bottom: 8px;\n          font-weight: 500;\n        }\n        .element-label::after {\n          content: \" *\";\n          color: #ff4d4f;\n          display: none;\n        }\n        .element-label:has(+ [data-required=\"true\"])::after {\n          display: inline;\n        }\n        .airport-select,\n        .airline-select {\n          width: 100%;\n        }\n        .segments-element {\n          margin-bottom: 16px;\n        }\n        .search-button {\n          margin-top: 24px;\n          width: 100%;\n        }\n        .results-card {\n          margin-top: 24px;\n        }\n        :global(.ant-table) {\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 952,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 761,\n    columnNumber: 5\n  }, this);\n};\n_s(FlightSearch, \"1u9lGVFrmrOqoEwG7dluSDT7TdA=\");\n_c = FlightSearch;\nexport default FlightSearch;\nvar _c;\n$RefreshReg$(_c, \"FlightSearch\");","map":{"version":3,"names":["React","useState","useEffect","Select","InputNumber","Button","Table","Card","Tag","Spin","Input","Modal","DatePicker","SearchOutlined","DownOutlined","CheckOutlined","airports","airlines","dayjs","utc","routeDetails","jsxDEV","_jsxDEV","extend","FlightSearch","_s","departure","setDeparture","arrival","setArrival","selectedAirlines","setSelectedAirlines","maxSegments","setMaxSegments","searchResults","setSearchResults","isLoading","setIsLoading","pagination","setPagination","current","pageSize","total","errors","setErrors","tableSearchText","setTableSearchText","isModalVisible","setIsModalVisible","selectedDates","setSelectedDates","currentRoute","setCurrentRoute","apiKey","setApiKey","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","sortedAirlines","map","airline","searchStr","value","label","toLowerCase","sort","a","b","localeCompare","airportSelectProps","showSearch","allowClear","suffixIcon","options","airport","IATA","Name","Country","filterOption","input","option","toString","includes","priority","filterSort","optionA","optionB","listHeight","virtual","dropdownStyle","maxHeight","airlineSelectProps","searchInput","aMatch","bMatch","menuItemSelectedIcon","columns","title","dataIndex","sorter","width","key","render","_","record","children","connections","length","join","fileName","_jsxFileName","lineNumber","columnNumber","sortDirections","numConnections","num","color","totalDistance","distance","toLocaleString","align","YPrice","price","JPrice","FPrice","text","getPercent","str","match","parseInt","Ynet","Jnet","Fnet","type","icon","onClick","fullRoute","handleSearch","response","fetch","method","headers","body","JSON","stringify","departureAirport","arrivalAirport","excludedAirline","ok","Error","data","json","prev","routes","error","console","handleTableChange","newPagination","filters","getFilteredData","searchLower","filter","route","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","find","replace","handleDateSearch","processedSegments","log","firstSegment","processSegment","push","i","_prevSegment$earliest","_prevSegment$latestAr","from","to","prevSegment","flights","earliestArrival","latestArrival","timeWindow","getSegmentDistance","minConnectionHours","Math","ceil","earliestDeparture","add","latestDeparture","diff","nextSegment","forEach","segment","index","_segment$earliestArri","_segment$latestArriva","timeWindowInfo","flightDetails","f","flightNumber","departs","arrives","baseTime","endTime","earlierSegment","startOf","windowEnd","flatMap","API_URL","dates","Set","nextDay","isAfter","Array","r","origin","destination","ID","_data$results","_data$results$","_data$results$$data","status","results","validFlights","processFlightData","flight","arrivalTime","ArrivesAt","isBefore","_earliestArrival","_latestArrival","_data$results2","_data$results2$","_data$results2$$data","rawFlights","trip","Stops","departureTime","DepartsAt","isValid","FlightNumbers","existingFlight","existingDeparture","baseDayjs","departDayDiff","arrivalDayDiff","OriginAirport","DestinationAirport","Carriers","aircraft","Aircraft","economy","business","first","Cabin","Object","values","segmentColumns","unix","className","style","boxShadow","onChange","placeholder","mode","min","max","loading","display","justifyContent","alignItems","e","target","dataSource","rowKey","showSizeChanger","showTotal","range","pageSizeOptions","defaultPageSize","scroll","x","showSorterTooltip","open","onOk","onCancel","okText","okButtonProps","disabled","styles","padding","maxWidth","marginBottom","disabledDate","textAlign","overflowX","slice","routeKey","size","tableLayout","position","locale","emptyText","jsx","_c","$RefreshReg$"],"sources":["/Users/hanguyen/Downloads/route-builder-ac1-test/src/pages/FlightSearch.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Select, InputNumber, Button, Table, Card, Tag, Spin, Input, Modal, DatePicker } from 'antd';\nimport { SearchOutlined, DownOutlined, CheckOutlined } from '@ant-design/icons';\nimport { airports } from '../data/airports';\nimport airlines from '../data/airlines';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport routeDetails from '../data/route_details.json';\ndayjs.extend(utc);\n\nconst FlightSearch = () => {\n  const [departure, setDeparture] = useState(null);\n  const [arrival, setArrival] = useState(null);\n  const [selectedAirlines, setSelectedAirlines] = useState([]);\n  const [maxSegments, setMaxSegments] = useState(4);\n  const [searchResults, setSearchResults] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [pagination, setPagination] = useState({\n    current: 1,\n    pageSize: 25,\n    total: 0,\n  });\n  const [errors, setErrors] = useState({\n    departure: false,\n    arrival: false,\n    maxSegments: false\n  });\n  const [tableSearchText, setTableSearchText] = useState('');\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [currentRoute, setCurrentRoute] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n\n  // Sort airlines alphabetically\n  const sortedAirlines = [...airlines]\n    .map(airline => ({\n      ...airline,\n      searchStr: `${airline.value} ${airline.label}`.toLowerCase()\n    }))\n    .sort((a, b) => a.label.localeCompare(b.label));\n\n  const airportSelectProps = {\n    showSearch: true,\n    allowClear: true,\n    suffixIcon: null,\n    options: airports.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`,\n      searchStr: `${airport.IATA} ${airport.Name}`.toLowerCase()\n    })),\n    filterOption: (input, option) => {\n      if (!input) return true;\n      input = input.toString().toLowerCase();\n      \n      // IATA match\n      if (option.value.toLowerCase().includes(input)) {\n        option.priority = 2;\n        return true;\n      }\n      \n      // Name/label match\n      if (option.label.toLowerCase().includes(input)) {\n        option.priority = 1;\n        return true;\n      }\n      \n      return false;\n    },\n    filterSort: (optionA, optionB) => {\n      // Sort by priority (IATA matches first)\n      if (optionA.priority !== optionB.priority) {\n        return optionB.priority - optionA.priority;\n      }\n      // Then alphabetically\n      return optionA.label.localeCompare(optionB.label);\n    },\n    listHeight: 256,\n    virtual: true,\n    dropdownStyle: { maxHeight: 400 }\n  };\n\n  const airlineSelectProps = {\n    showSearch: true,\n    allowClear: true,\n    filterSort: (optionA, optionB, input) => {\n      if (!input) return optionA.label.localeCompare(optionB.label);\n      \n      const searchInput = input.toString().toLowerCase();\n      const aMatch = optionA.searchStr.includes(searchInput);\n      const bMatch = optionB.searchStr.includes(searchInput);\n      \n      if (aMatch && !bMatch) return -1;\n      if (!aMatch && bMatch) return 1;\n\n      return optionA.label.localeCompare(optionB.label);\n    },\n    filterOption: (input, option) => {\n      if (!input) return true;\n      const searchInput = input.toString().toLowerCase();\n      return option.searchStr.includes(searchInput);\n    },\n    listHeight: 400,\n    virtual: false,\n    menuItemSelectedIcon: null,\n    dropdownStyle: { maxHeight: 400 }\n  };\n\n  const columns = [\n    {\n      title: 'Origin',\n      dataIndex: 'departure',\n      sorter: (a, b) => a.departure.localeCompare(b.departure),\n      width: 80,\n    },\n    {\n      title: 'Connections',\n      key: 'connections',\n      render: (_, record) => (\n        <span>\n          {record.connections.length > 0 \n            ? record.connections.join(' â†’ ')\n            : '-'}\n        </span>\n      ),\n      width: 200,\n      sorter: (a, b) => {\n        if (a.connections.length !== b.connections.length) {\n          return a.connections.length - b.connections.length;\n        }\n        return a.connections.join('').localeCompare(b.connections.join(''));\n      },\n      sortDirections: ['ascend', 'descend'],\n    },\n    {\n      title: 'Destination',\n      dataIndex: 'arrival',\n      sorter: (a, b) => a.arrival.localeCompare(b.arrival),\n      width: 80,\n    },\n    {\n      title: 'Stops',\n      dataIndex: 'numConnections',\n      sorter: (a, b) => a.numConnections - b.numConnections,\n      render: (num) => {\n        let color;\n        switch (num) {\n          case 0: color = 'green'; break;\n          case 1: color = 'blue'; break;\n          case 2: color = 'orange'; break;\n          case 3: color = 'gold'; break;\n          default: color = 'red';\n        }\n        return (\n          <Tag color={color}>\n            {num === 0 ? 'Direct' : `${num} Stop${num > 1 ? 's' : ''}`}\n          </Tag>\n        );\n      },\n      width: 80,\n    },\n    {\n      title: 'Distance',\n      dataIndex: 'totalDistance',\n      sorter: (a, b) => a.totalDistance - b.totalDistance,\n      render: (distance) => distance.toLocaleString(),\n      width: 60,\n      align: 'right',\n    },\n    {\n      title: 'Economy',\n      dataIndex: 'YPrice',\n      sorter: (a, b) => a.YPrice - b.YPrice,\n      render: (price) => price.toLocaleString(),\n      width: 80,\n      align: 'right',\n    },\n    {\n      title: 'Business',\n      dataIndex: 'JPrice',\n      sorter: (a, b) => a.JPrice - b.JPrice,\n      render: (price) => price.toLocaleString(),\n      width: 80,\n      align: 'right',\n    },\n    {\n      title: 'First',\n      dataIndex: 'FPrice',\n      sorter: (a, b) => a.FPrice - b.FPrice,\n      render: (price) => price.toLocaleString(),\n      width: 80,\n      align: 'right',\n    },\n    {\n      title: 'Y %',\n      dataIndex: 'Ynet',\n      width: 160,\n      render: (text) => text || '-',\n      sorter: (a, b) => {\n        const getPercent = (str) => {\n          if (!str) return 0;\n          const match = str.match(/^(-?\\d+)/);\n          return match ? parseInt(match[0]) : 0;\n        };\n        return getPercent(a.Ynet) - getPercent(b.Ynet);\n      },\n    },\n    {\n      title: 'J %',\n      dataIndex: 'Jnet',\n      width: 160,\n      render: (text) => text || '-',\n      sorter: (a, b) => {\n        const getPercent = (str) => {\n          if (!str) return 0;\n          const match = str.match(/^(-?\\d+)/);\n          return match ? parseInt(match[0]) : 0;\n        };\n        return getPercent(a.Jnet) - getPercent(b.Jnet);\n      },\n    },\n    {\n      title: 'F %',\n      dataIndex: 'Fnet',\n      width: 160,\n      render: (text) => text || '-',\n      sorter: (a, b) => {\n        const getPercent = (str) => {\n          if (!str) return 0;\n          const match = str.match(/^(-?\\d+)/);\n          return match ? parseInt(match[0]) : 0;\n        };\n        return getPercent(a.Fnet) - getPercent(b.Fnet);\n      },\n    },\n    {\n      title: '',\n      key: 'actions',\n      width: 20,\n      render: (_, record) => (\n        <Button \n          type=\"link\" \n          icon={<DownOutlined />}\n          onClick={() => {\n            const fullRoute = [record.departure, ...record.connections, record.arrival];\n            setCurrentRoute(fullRoute);\n            setIsModalVisible(true);\n          }}\n        />\n      ),\n    }\n  ];\n\n  const handleSearch = async () => {\n    // Reset errors\n    setErrors({\n      departure: !departure,\n      arrival: !arrival,\n      maxSegments: !maxSegments\n    });\n\n    // Validate mandatory fields\n    if (!departure || !arrival || !maxSegments) {\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch('https://backend-284998006367.us-central1.run.app/api/find-routes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          departureAirport: departure,\n          arrivalAirport: arrival,\n          excludedAirline: selectedAirlines.length ? selectedAirlines[0] : \"null\",\n          maxSegments: maxSegments\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Search failed');\n      }\n\n      const data = await response.json();\n      setSearchResults(data);\n      setPagination(prev => ({\n        ...prev,\n        total: data.routes.length\n      }));\n    } catch (error) {\n      console.error('Search failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleTableChange = (newPagination, filters, sorter) => {\n    setPagination(newPagination);\n  };\n\n  // Filter function for the table data\n  const getFilteredData = () => {\n    if (!searchResults?.routes || !tableSearchText) {\n      return searchResults?.routes || [];\n    }\n\n    const searchLower = tableSearchText.toLowerCase();\n    return searchResults.routes.filter(route => {\n      // Convert all relevant fields to strings and check if they include the search text\n      return (\n        route.departure.toLowerCase().includes(searchLower) ||\n        route.arrival.toLowerCase().includes(searchLower) ||\n        route.connections.join(' ').toLowerCase().includes(searchLower) ||\n        route.YPrice.toString().includes(searchLower) ||\n        route.JPrice.toString().includes(searchLower) ||\n        route.FPrice.toString().includes(searchLower) ||\n        (route.Ynet || '').toLowerCase().includes(searchLower) ||\n        (route.Jnet || '').toLowerCase().includes(searchLower) ||\n        (route.Fnet || '').toLowerCase().includes(searchLower)\n      );\n    });\n  };\n\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n    \n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    \n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n\n  const getAirlineName = (code) => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n\n  const handleDateSearch = async () => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    \n    setIsLoadingSegments(true);\n    const processedSegments = [];\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    \n    try {\n      console.log(`Starting search for route: ${currentRoute.join('-')}`);\n      console.log(`Base date: ${baseDate}`);\n\n      // Process first segment\n      console.log(`Processing first segment: ${currentRoute[0]}-${currentRoute[1]}`);\n      const firstSegment = await processSegment(\n        currentRoute[0], \n        currentRoute[1], \n        baseDate\n      );\n      processedSegments.push(firstSegment);\n\n      // Process subsequent segments\n      for (let i = 1; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        const prevSegment = processedSegments[i - 1];\n        \n        console.log(`\\nProcessing segment ${i + 1}: ${from}-${to}`);\n        console.log(`Previous segment status:`, {\n          route: prevSegment.route,\n          flights: prevSegment.flights.length,\n          earliestArrival: prevSegment.earliestArrival?.format('YYYY-MM-DD HH:mm'),\n          latestArrival: prevSegment.latestArrival?.format('YYYY-MM-DD HH:mm')\n        });\n\n        // Skip if previous segment has no arrival times\n        if (!prevSegment.earliestArrival || !prevSegment.latestArrival) {\n          console.log(`No arrival times from previous segment, skipping ${from}-${to}`);\n          processedSegments.push({\n            route: `${from}-${to}`,\n            flights: [],\n            earliestArrival: null,\n            latestArrival: null\n          });\n          continue;\n        }\n\n        // Calculate time window based on previous segment\n        let timeWindow;\n        if (prevSegment.flights.length === 0) {\n          console.log(`Previous segment ${prevSegment.route} has no flights, using distance-based calculation`);\n          const distance = getSegmentDistance(currentRoute[i-1], currentRoute[i]);\n          const minConnectionHours = Math.ceil(distance / 575); // Round up to nearest hour\n          console.log(`Distance calculation:\n  - Route: ${currentRoute[i-1]}-${currentRoute[i]}\n  - Distance: ${distance.toLocaleString()} miles\n  - Speed: 575 miles/h\n  - Minimum flight time: ${minConnectionHours} hours`);\n          \n          timeWindow = {\n            earliestDeparture: dayjs(prevSegment.earliestArrival).add(minConnectionHours, 'hour'),\n            latestDeparture: dayjs(prevSegment.latestArrival).add(24 + minConnectionHours, 'hour')\n          };\n        } else {\n          timeWindow = {\n            earliestDeparture: dayjs(prevSegment.earliestArrival),\n            latestDeparture: dayjs(prevSegment.latestArrival).add(24, 'hour')\n          };\n        }\n\n        console.log(`Time window for ${from}-${to}:\n  - Earliest departure: ${timeWindow.earliestDeparture.format('YYYY-MM-DD HH:mm')}\n  - Latest departure: ${timeWindow.latestDeparture.format('YYYY-MM-DD HH:mm')}\n  - Window duration: ${timeWindow.latestDeparture.diff(timeWindow.earliestDeparture, 'hours')} hours`);\n\n        const nextSegment = await processSegment(from, to, baseDate, timeWindow);\n        processedSegments.push(nextSegment);\n      }\n\n      console.log('\\nSearch completed. Summary:');\n      processedSegments.forEach((segment, index) => {\n        let timeWindowInfo = '';\n        let flightDetails = '';\n        \n        if (segment.flights.length > 0) {\n          flightDetails = `\\n  Flights:${segment.flights.map(f => \n            `\\n    - ${f.flightNumber}: ${f.departs} -> ${f.arrives}`\n          ).join('')}`;\n        }\n        \n        if (index > 0) {\n          const prevSegment = processedSegments[index - 1];\n          if (prevSegment.flights.length === 0) {\n            const from = currentRoute[index];\n            const to = currentRoute[index + 1];\n            const distance = getSegmentDistance(from, to);\n            const minConnectionHours = Math.ceil(distance / 575);\n            \n            // Calculate base time from previous segment or cascade from earlier segments\n            let baseTime;\n            let endTime;\n            \n            // Walk back through segments to find the last valid arrival time\n            for (let i = index - 1; i >= 0; i--) {\n              const earlierSegment = processedSegments[i];\n              if (earlierSegment.earliestArrival) {\n                baseTime = earlierSegment.earliestArrival;\n                endTime = earlierSegment.latestArrival;\n                break;\n              }\n            }\n            \n            // If no valid times found, use base date\n            if (!baseTime) {\n              baseTime = dayjs(baseDate);\n              endTime = baseTime;\n            }\n            \n            // For next-day flights, add a day to the base time\n            if (baseTime.hour() >= 21) {\n              baseTime = baseTime.add(1, 'day').startOf('day');\n              endTime = endTime.add(1, 'day').startOf('day');\n            }\n            \n            timeWindowInfo = `\n  Time window (distance-based):\n  - Distance: ${distance.toLocaleString()} km\n  - Minimum connection time: ${minConnectionHours} hours\n  - Base time from: ${baseTime.format('YYYY-MM-DD HH:mm')}\n  - Eligible departure window: ${baseTime.add(minConnectionHours, 'hour').format('YYYY-MM-DD HH:mm')} to ${endTime.add(48, 'hour').format('YYYY-MM-DD HH:mm')}`;\n          } else {\n            const earliestDeparture = prevSegment.earliestArrival;\n            const latestDeparture = prevSegment.latestArrival;\n            \n            // For late arrivals, extend the window to next day\n            const windowEnd = latestDeparture.hour() >= 21 ? \n              latestDeparture.add(48, 'hour') : \n              latestDeparture.add(24, 'hour');\n            \n            timeWindowInfo = `\n  Time window (standard):\n  - Eligible departure window: ${earliestDeparture?.format('YYYY-MM-DD HH:mm')} to ${windowEnd.format('YYYY-MM-DD HH:mm')}`;\n          }\n        }\n\n        console.log(`${segment.route}:\n  - Flights found: ${segment.flights.length}\n  - Earliest arrival: ${segment.earliestArrival?.format('YYYY-MM-DD HH:mm') || 'N/A'}\n  - Latest arrival: ${segment.latestArrival?.format('YYYY-MM-DD HH:mm') || 'N/A'}${flightDetails}${timeWindowInfo}`);\n      });\n\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\n    } catch (error) {\n      console.error('Error fetching segment details:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n\n  const processSegment = async (from, to, baseDate, timeWindow = null) => {\n    const API_URL = 'https://backend-284998006367.us-central1.run.app';\n    const dates = new Set();\n    \n    // Add base date\n    dates.add(baseDate);\n    \n    // Add next day if time window extends to it\n    if (timeWindow?.latestDeparture) {\n      const nextDay = dayjs(baseDate).add(1, 'day').format('YYYY-MM-DD');\n      if (timeWindow.latestDeparture.isAfter(dayjs(nextDay))) {\n        dates.add(nextDay);\n      }\n    }\n\n    const flights = [];\n    let earliestArrival = null;\n    let latestArrival = null;\n\n    console.log(`Processing route ${from}-${to}:`);\n    console.log(`  Base date: ${baseDate}`);\n    console.log(`  Checking dates:`, Array.from(dates));\n    \n    // Process each date\n    for (const date of dates) {\n      const route = routeDetails.find(r => \n        r.origin === from && \n        r.destination === to && \n        r.date === date\n      );\n      \n      if (route) {\n        console.log(`  Found segment ID ${route.ID} for date ${date}`);\n        try {\n          const response = await fetch(`${API_URL}/api/seats/${route.ID}`, {\n            method: 'GET',\n            headers: {\n              'accept': 'application/json',\n              'Partner-Authorization': apiKey,\n              'Segment-ID': route.ID\n            }\n          });\n\n          if (!response.ok) {\n            console.log(`  Failed to fetch segment ${route.ID}: ${response.status}`);\n            continue;\n          }\n\n          const data = await response.json();\n          console.log(`  Raw flight data for segment ${route.ID}:`, data.results?.[0]?.data?.data);\n          \n          const validFlights = processFlightData(data, timeWindow);\n          console.log(`  Segment ${route.ID}: Found ${validFlights.length} valid flights`);\n          \n          if (timeWindow) {\n            console.log(`  Time window: ${timeWindow.earliestDeparture.format('YYYY-MM-DD HH:mm')} to ${timeWindow.latestDeparture.format('YYYY-MM-DD HH:mm')}`);\n          }\n          \n          flights.push(...validFlights);\n\n          // Update arrival time bounds\n          validFlights.forEach(flight => {\n            const arrivalTime = dayjs(flight.ArrivesAt);  // Use original timestamp\n            console.log(`  Processing flight arrival: ${flight.ArrivesAt} -> ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\n            \n            if (!earliestArrival || arrivalTime.isBefore(earliestArrival)) {\n              earliestArrival = arrivalTime;\n            }\n            if (!latestArrival || arrivalTime.isAfter(latestArrival)) {\n              latestArrival = arrivalTime;\n            }\n          });\n        } catch (error) {\n          console.error(`  Error fetching segment ${route.ID}:`, error);\n        }\n      } else {\n        console.log(`  No segment found for ${from}-${to} on ${date}`);\n        console.log(`  Available routes:`, routeDetails.filter(r => r.date === date).map(r => `${r.origin}-${r.destination}`));\n      }\n    }\n\n    if (flights.length > 0) {\n      console.log(`  Route ${from}-${to} summary:`);\n      console.log(`    Earliest arrival: ${earliestArrival?.format('YYYY-MM-DD HH:mm')}`);\n      console.log(`    Latest arrival: ${latestArrival?.format('YYYY-MM-DD HH:mm')}`);\n      console.log(`    Total flights: ${flights.length}`);\n    } else {\n      console.log(`  No flights found for route ${from}-${to}`);\n    }\n\n    return {\n      route: `${from}-${to}`,\n      flights,\n      earliestArrival,\n      latestArrival\n    };\n  };\n\n  const processFlightData = (data, timeWindow) => {\n    const flights = {};\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    \n    const rawFlights = data.results?.[0]?.data?.data || [];\n    console.log(`  Processing ${rawFlights.length} raw flights`);\n    \n    rawFlights\n      .filter(trip => {\n        if (trip.Stops !== 0) {\n          console.log(`  Skipping flight with ${trip.Stops} stops`);\n          return false;\n        }\n        \n        if (timeWindow) {\n          const departureTime = dayjs(trip.DepartsAt);\n          const isValid = departureTime.isAfter(timeWindow.earliestDeparture) && \n                         departureTime.isBefore(timeWindow.latestDeparture);\n          \n          if (!isValid) {\n            console.log(`  Skipping flight outside time window: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n          }\n          return isValid;\n        }\n        \n        return true;\n      })\n      .forEach(trip => {\n        const flightNumber = trip.FlightNumbers;\n        const departureTime = dayjs(trip.DepartsAt);\n        const existingFlight = flights[flightNumber];\n\n        // If this is a duplicate flight, only keep the later one\n        if (existingFlight) {\n          const existingDeparture = dayjs(existingFlight.DepartsAt);\n          if (departureTime.isBefore(existingDeparture)) {\n            return; // Skip this one, keep the existing later flight\n          }\n        }\n\n        const arrivalTime = dayjs(trip.ArrivesAt);\n        const baseDayjs = dayjs(baseDate);\n        \n        // Calculate day difference from base date\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n        flights[flightNumber] = {\n          from: trip.OriginAirport,\n          to: trip.DestinationAirport,\n          flightNumber: flightNumber,\n          airlines: getAirlineName(trip.Carriers),\n          aircraft: trip.Aircraft[0],\n          departs: departDayDiff > 0 ? \n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \n            departureTime.format('HH:mm'),\n          arrives: arrivalDayDiff > 0 ? \n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \n            arrivalTime.format('HH:mm'),\n          DepartsAt: trip.DepartsAt,\n          ArrivesAt: trip.ArrivesAt,\n          economy: false,\n          business: false,\n          first: false\n        };\n        \n        switch(trip.Cabin.toLowerCase()) {\n          case 'economy':\n            flights[flightNumber].economy = true;\n            break;\n          case 'business':\n            flights[flightNumber].business = true;\n            break;\n          case 'first':\n            flights[flightNumber].first = true;\n            break;\n        }\n      });\n    \n    return Object.values(flights);\n  };\n\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => \n      r.origin === from && \n      r.destination === to\n    );\n\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n\n  const segmentColumns = [\n    {\n      title: 'From',\n      dataIndex: 'from',\n      key: 'from',\n    },\n    {\n      title: 'To',\n      dataIndex: 'to',\n      key: 'to',\n    },\n    {\n      title: 'Flight',\n      dataIndex: 'flightNumber',\n      key: 'flightNumber',\n    },\n    {\n      title: 'Airlines',\n      dataIndex: 'airlines',\n      key: 'airlines',\n    },\n    {\n      title: 'Aircraft',\n      dataIndex: 'aircraft',\n      key: 'aircraft',\n    },\n    {\n      title: 'Departs',\n      dataIndex: 'departs',\n      key: 'departs',\n      sorter: (a, b) => {\n        // Use the original timestamp for sorting\n        return dayjs(a.DepartsAt).unix() - dayjs(b.DepartsAt).unix();\n      },\n    },\n    {\n      title: 'Arrives',\n      dataIndex: 'arrives',\n      key: 'arrives',\n      sorter: (a, b) => {\n        // Use the original timestamp for sorting\n        return dayjs(a.ArrivesAt).unix() - dayjs(b.ArrivesAt).unix();\n      },\n    },\n    {\n      title: 'Economy',\n      dataIndex: 'economy',\n      key: 'economy',\n      render: (value) => value ? 'âœ“' : '',\n    },\n    {\n      title: 'Business',\n      dataIndex: 'business',\n      key: 'business',\n      render: (value) => value ? 'âœ“' : '',\n    },\n    {\n      title: 'First',\n      dataIndex: 'first',\n      key: 'first',\n      render: (value) => value ? 'âœ“' : '',\n    },\n  ];\n\n  return (\n    <div className=\"flight-search-container\">\n      <Card \n        className=\"search-form\" \n        style={{ boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)' }}\n      >\n        <div className=\"flight-search-element\">\n          <div className=\"element-label\">Departure Airport: *</div>\n          <Select\n            {...airportSelectProps}\n            value={departure}\n            onChange={setDeparture}\n            placeholder=\"Select departure airport...\"\n            className=\"airport-select\"\n            status={errors.departure ? 'error' : ''}\n          />\n        </div>\n\n        <div className=\"flight-search-element\">\n          <div className=\"element-label\">Arrival Airport: *</div>\n          <Select\n            {...airportSelectProps}\n            value={arrival}\n            onChange={setArrival}\n            placeholder=\"Select arrival airport...\"\n            className=\"airport-select\"\n            status={errors.arrival ? 'error' : ''}\n          />\n        </div>\n\n        <div className=\"flight-search-element\">\n          <div className=\"element-label\">Airlines Excluded:</div>\n          <Select\n            {...airlineSelectProps}\n            mode=\"multiple\"\n            value={selectedAirlines}\n            onChange={setSelectedAirlines}\n            options={sortedAirlines}\n            placeholder=\"Select airlines...\"\n            className=\"airline-select\"\n          />\n        </div>\n\n        <div className=\"segments-element\">\n          <div className=\"element-label\">Maximum Segments *</div>\n          <InputNumber\n            min={1}\n            max={5}\n            value={maxSegments}\n            onChange={setMaxSegments}\n            status={errors.maxSegments ? 'error' : ''}\n          />\n        </div>\n\n        <Button \n          type=\"primary\"\n          icon={<SearchOutlined />}\n          onClick={handleSearch}\n          loading={isLoading}\n          className=\"search-button\"\n        >\n          Search\n        </Button>\n      </Card>\n\n      {searchResults && (\n        <Card \n          className=\"results-card\" \n          title={\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n              <span>Search Results</span>\n              <Input\n                placeholder=\"Search routes...\"\n                value={tableSearchText}\n                onChange={e => setTableSearchText(e.target.value)}\n                style={{ width: 200 }}\n                allowClear\n              />\n            </div>\n          }\n          style={{ boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)' }}\n        >\n          <Table\n            dataSource={getFilteredData()}\n            columns={columns}\n            rowKey={(record, index) => index}\n            pagination={{\n              ...pagination,\n              showSizeChanger: true,\n              showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} routes`,\n              pageSizeOptions: ['10', '25', '50', '100'],\n              defaultPageSize: 25,\n            }}\n            loading={isLoading}\n            onChange={handleTableChange}\n            scroll={{ x: 1600 }}\n            showSorterTooltip={true}\n            sortDirections={['ascend', 'descend']}\n          />\n        </Card>\n      )}\n\n      <Modal\n        title=\"Flight Details\"\n        open={isModalVisible}\n        onOk={handleDateSearch}\n        onCancel={() => {\n          setIsModalVisible(false);\n          setSelectedDates(null);\n          setApiKey('');\n          setSegmentDetails([]);\n        }}\n        okText=\"Search Flights\"\n        okButtonProps={{ \n          disabled: !selectedDates || !apiKey,\n          loading: isLoadingSegments \n        }}\n        width={1500}\n        styles={{\n          body: { \n            padding: '12px',\n            maxWidth: '100%'\n          }\n        }}\n      >\n        <div style={{ marginBottom: 16 }}>\n          <div style={{ marginBottom: 8 }}>Select Travel Date:</div>\n          <DatePicker\n            style={{ width: '100%' }}\n            onChange={(date) => setSelectedDates(date)}\n            disabledDate={(current) => current && current < dayjs().startOf('day')}\n          />\n        </div>\n        <div style={{ marginBottom: 16 }}>\n          <div style={{ marginBottom: 8 }}>API Key:</div>\n          <Input\n            placeholder=\"Enter API key\"\n            value={apiKey}\n            onChange={(e) => setApiKey(e.target.value)}\n            style={{ width: '100%' }}\n          />\n        </div>\n        {isLoadingSegments ? (\n          <div style={{ textAlign: 'center', padding: '20px' }}>\n            <Spin />\n          </div>\n        ) : (\n          <div style={{ \n            width: '100%',\n            overflowX: 'auto'\n          }}>\n            {currentRoute && currentRoute.slice(0, -1).map((from, index) => {\n              const to = currentRoute[index + 1];\n              const routeKey = `${from}-${to}`;\n              const flights = segmentDetails.filter(flight => \n                flight.from === from && flight.to === to\n              );\n\n              return (\n                <div key={routeKey} style={{ \n                  marginBottom: '24px',\n                  width: '100%'\n                }}>\n                  <h3 style={{ marginBottom: '16px' }}>{routeKey}</h3>\n                  <Table\n                    dataSource={flights}\n                    columns={segmentColumns}\n                    size=\"small\"\n                    rowKey={(record, index) => `${routeKey}-${index}`}\n                    sortDirections={['ascend', 'descend']}\n                    style={{ \n                      width: '100%',\n                      tableLayout: 'fixed'\n                    }}\n                    pagination={{\n                      defaultPageSize: 10,\n                      showSizeChanger: true,\n                      showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} flights`,\n                      pageSizeOptions: ['10', '20', '50', 'all'],\n                      position: ['bottomRight']\n                    }}\n                    locale={{\n                      emptyText: 'No flights available'\n                    }}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </Modal>\n\n      <style jsx>{`\n        .flight-search-container {\n          max-width: 1200px;\n          margin: 20px auto;\n          padding: 0 20px;\n        }\n        .search-form {\n          margin-bottom: 20px;\n        }\n        .flight-search-element {\n          margin-bottom: 16px;\n        }\n        .element-label {\n          margin-bottom: 8px;\n          font-weight: 500;\n        }\n        .element-label::after {\n          content: \" *\";\n          color: #ff4d4f;\n          display: none;\n        }\n        .element-label:has(+ [data-required=\"true\"])::after {\n          display: inline;\n        }\n        .airport-select,\n        .airline-select {\n          width: 100%;\n        }\n        .segments-element {\n          margin-bottom: 16px;\n        }\n        .search-button {\n          margin-top: 24px;\n          width: 100%;\n        }\n        .results-card {\n          margin-top: 24px;\n        }\n        :global(.ant-table) {\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default FlightSearch;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}