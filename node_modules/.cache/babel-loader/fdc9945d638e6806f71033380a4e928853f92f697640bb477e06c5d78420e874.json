{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nimport { getSegmentColumns } from '../segmentColumns';\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const combinationsRef = useRef([]);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    var _data$results, _data$results$, _data$results$$data, _data$results$$data$d, _data$results$$data$d2, _data$results2, _data$results2$, _data$results2$$data;\n    const flights = {};\n    const baseDate = dayjs(((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : (_data$results$$data$d = _data$results$$data.data) === null || _data$results$$data$d === void 0 ? void 0 : (_data$results$$data$d2 = _data$results$$data$d[0]) === null || _data$results$$data$d2 === void 0 ? void 0 : _data$results$$data$d2.DepartsAt) || new Date()).format('YYYY-MM-DD');\n    const rawFlights = ((_data$results2 = data.results) === null || _data$results2 === void 0 ? void 0 : (_data$results2$ = _data$results2[0]) === null || _data$results2$ === void 0 ? void 0 : (_data$results2$$data = _data$results2$.data) === null || _data$results2$$data === void 0 ? void 0 : _data$results2$$data.data) || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    rawFlights.filter(trip => {\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n      console.log(`  Carrier: ${trip.Carriers}`);\n      console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n      console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\n\n      // Filter out non-direct flights\n      if (trip.Stops !== 0) {\n        console.log('  ❌ Skipped: Not a direct flight');\n        return false;\n      }\n\n      // Filter out EK and FZ carriers\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log('  ❌ Skipped: Excluded carrier');\n        return false;\n      }\n      if (timeWindow) {\n        const departureTime = dayjs(trip.DepartsAt);\n        const isValid = departureTime.isAfter(timeWindow.start) && departureTime.isBefore(timeWindow.end);\n        if (!isValid) {\n          console.log('  ❌ Skipped: Outside time window');\n          console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n        } else {\n          console.log('  ✓ Accepted: Within time window');\n        }\n        return isValid;\n      }\n      console.log('  ✓ Accepted: No time window restrictions');\n      return true;\n    }).forEach(trip => {\n      // Convert CL carrier and flight numbers to LH\n      const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n      const flightNumber = trip.FlightNumbers.startsWith('CL') ? `LH${trip.FlightNumbers.slice(2)}` : trip.FlightNumbers;\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const existingFlight = flights[flightNumber];\n\n      // If this is a duplicate flight, only keep the later one\n      if (existingFlight) {\n        const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n        if (departureTime.isBefore(existingDeparture)) {\n          return; // Skip this one, keep the existing later flight\n        }\n      }\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n      // Process aircraft name\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName && aircraftName === '787  All') {\n        aircraftName = 'Boeing 787-10';\n      }\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(carrier),\n        aircraft: aircraftName,\n        duration: trip.TotalDuration,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false,\n        isSelected: false,\n        segmentIndex: segmentIndex\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && date.isBefore(end.add(1, 'day'));\n  };\n  const handleDateSearch = async currentRoute => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    setIsLoadingAvailability(true);\n    try {\n      // Get the selected segments from availability data\n      const selectedSegments = [];\n      for (const date of Object.keys(availabilityData)) {\n        if (isDateInRange(date, selectedDates)) {\n          selectedSegments.push(...availabilityData[date]);\n        }\n      }\n\n      // Log selected segments before filtering\n      console.log('=== Flights Before Combination Filtering ===');\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\n        if (!acc[segment.route]) {\n          acc[segment.route] = [];\n        }\n        acc[segment.route].push(segment);\n        return acc;\n      }, {});\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\n        console.log(`\\nRoute ${route}:`);\n        segments.forEach(segment => {\n          console.log(`  ID: ${segment.ID}`);\n          console.log(`  Date: ${segment.date}`);\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\n        });\n      });\n\n      // Continue with existing logic\n      const segmentPromises = selectedSegments.map(segment => fetch(`https://backend-284998006367.us-central1.run.app/api/route_details/${segment.ID}`, {\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      }));\n\n      // First fetch availability data\n      const routeString = currentRoute.join('-');\n      const availabilityResponse = await fetch(`https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      });\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n\n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance\n          });\n        });\n        setAvailabilityData(processedAvailability);\n      }\n\n      // Continue with existing segment search logic\n      const newProcessedSegments = [];\n      const [startDate, endDate] = selectedDates;\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\n      console.log('\\n=== Processing Segments ===');\n      console.log('Date Range:', {\n        start: dayjs(startDate).format('YYYY-MM-DD'),\n        end: dayjs(endDate).format('YYYY-MM-DD')\n      });\n      try {\n        // Process all segments\n        for (let i = 0; i < currentRoute.length - 1; i++) {\n          const from = currentRoute[i];\n          const to = currentRoute[i + 1];\n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n          let timeWindow = null;\n          const dates = new Set();\n          if (i === 0) {\n            // First segment - use full date range\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            console.log('\\n=== First Segment Details ===');\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n\n            // Get all dates in range\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n          } else {\n            // Handle subsequent segments\n            const prevSegment = newProcessedSegments[i - 1];\n\n            // If no previous flights found, use full date range for all segments\n            if (!prevSegment || prevSegment.flights.length === 0) {\n              const startDay = dayjs(startDate).startOf('day');\n              const endDay = dayjs(endDate).endOf('day');\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('No previous flights found. Using full date range for this segment');\n            } else {\n              // Calculate time window from previous segment's flights\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n              timeWindow = {\n                start: arrivals[0],\n                end: arrivals[arrivals.length - 1].add(24, 'hours')\n              };\n\n              // Get dates for time window\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('Time Window based on previous segment arrivals:');\n              console.log('  Start:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\n              console.log('  End:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\n            }\n          }\n\n          // Process each date\n          const allFlights = [];\n          for (const date of dates) {\n            const route = routeDetails.find(r => r.origin === from && r.destination === to && r.date === date);\n            if (!route) {\n              console.log(`No route found for ${from}-${to} on ${date}`);\n              continue;\n            }\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\n            console.log(`Segment ID: ${route.ID}`);\n            try {\n              const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n                method: 'GET',\n                headers: {\n                  'accept': 'application/json',\n                  'Partner-Authorization': apiKey,\n                  'Segment-ID': route.ID\n                }\n              });\n              if (!response.ok) {\n                console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n                continue;\n              }\n              const data = await response.json();\n              const processedFlights = processFlightData(data, timeWindow, i);\n              console.log(`✓ Found ${processedFlights.length} valid flights`);\n              allFlights.push(...processedFlights);\n            } catch (error) {\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\n            }\n          }\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n          // Store searched dates in segment data\n          newProcessedSegments[i] = {\n            route: `${from}-${to}`,\n            flights: allFlights,\n            searchDates: dates,\n            // Add this field\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n          };\n\n          // Only break if previous segment had flights but current segment found none\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i - 1].flights.length > 0) {\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n            console.log('Skipping remaining segments');\n            break;\n          }\n        }\n\n        // After processing all segments\n        if (newProcessedSegments.length >= 1) {\n          console.log('\\n=== Flight Combinations ===');\n\n          // Find the first and last segments with flights\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n          // Find all valid combinations recursively\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n            // If we've reached beyond the last valid segment, this is a valid combination\n            if (segmentIndex > lastSegmentIndex) {\n              return [currentPath];\n            }\n            const validCombos = [];\n            const currentSegment = newProcessedSegments[segmentIndex];\n\n            // If no flights in current segment, try next segment\n            if (!currentSegment.flights || currentSegment.flights.length === 0) {\n              return findValidCombinations(currentPath, segmentIndex + 1);\n            }\n\n            // For the first flight in the path, accept any flight\n            if (currentPath.length === 0) {\n              currentSegment.flights.forEach(flight => {\n                const combos = findValidCombinations([flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              });\n            }\n            // For subsequent segments, check connection times\n            else {\n              const previousFlight = currentPath[currentPath.length - 1];\n              const previousArrival = dayjs(previousFlight.ArrivesAt);\n              currentSegment.flights.forEach(flight => {\n                const departure = dayjs(flight.DepartsAt);\n                const connectionTime = departure.diff(previousArrival, 'minutes');\n\n                // Check if departure is within 24 hours of previous arrival\n                if (connectionTime >= 60 && connectionTime <= 24 * 60) {\n                  const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                  validCombos.push(...combos);\n                }\n              });\n            }\n            return validCombos;\n          };\n\n          // Get all valid combinations\n          const allCombinations = findValidCombinations();\n\n          // Log the combinations\n          console.log('\\n=== Valid Combinations ===');\n          allCombinations.forEach(combo => {\n            const flightInfo = combo.map((flight, idx) => {\n              if (idx === 0) return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n              const prevFlight = combo[idx - 1];\n              const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n              const hours = Math.floor(connectionTime / 60);\n              const minutes = connectionTime % 60;\n              return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n            });\n            console.log(flightInfo.join(' → '));\n          });\n\n          // Create a map of valid flights by segment\n          const validFlightsBySegment = new Map();\n          allCombinations.forEach(combo => {\n            combo.forEach(flight => {\n              const segmentKey = flight.segmentIndex;\n              if (!validFlightsBySegment.has(segmentKey)) {\n                validFlightsBySegment.set(segmentKey, new Set());\n              }\n              validFlightsBySegment.get(segmentKey).add(`${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n            });\n          });\n\n          // Filter and process flights\n          const filteredFlights = [];\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segment = newProcessedSegments[i];\n            if (!segment || !segment.flights) continue;\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n\n            // Add valid flights from this segment\n            segment.flights.forEach(flight => {\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n              if (validFlightsForSegment.has(flightKey)) {\n                filteredFlights.push({\n                  ...flight,\n                  isSelected: false,\n                  segmentIndex: i\n                });\n              }\n            });\n          }\n          setSegmentDetails(filteredFlights);\n          setValidCombinations(allCombinations);\n\n          // Log flights by segment\n          console.log('\\n=== Flights By Segment ===');\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n            if (segmentFlights.length > 0) {\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n              segmentFlights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n              });\n            }\n          }\n          console.log('\\n======================');\n        } else {\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => segment.flights.map(flight => ({\n            ...flight,\n            isSelected: false,\n            segmentIndex: index\n          }))));\n          setValidCombinations([]);\n        }\n      } catch (error) {\n        console.error('Error fetching segment details:', error);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoadingSegments(false);\n      setIsLoadingAvailability(false);\n    }\n  };\n  const handleCalendarSearch = async currentRoute => {\n    if (!currentRoute || !apiKey) return;\n    setIsLoadingAvailability(true);\n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n      const availabilityResponse = await fetch(`https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      });\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n\n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance,\n            date: item.date\n          });\n        });\n        setAvailabilityData(processedAvailability);\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n  const resetDetails = () => {\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n  };\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    setSelectedFlights(prevSelected => {\n      var _newSelected$segmentI, _newSelected$segmentI2;\n      const newSelected = {\n        ...prevSelected\n      };\n\n      // Check if this exact flight is already selected\n      const isCurrentlySelected = (_newSelected$segmentI = newSelected[segmentIndex]) === null || _newSelected$segmentI === void 0 ? void 0 : (_newSelected$segmentI2 = _newSelected$segmentI.some) === null || _newSelected$segmentI2 === void 0 ? void 0 : _newSelected$segmentI2.call(_newSelected$segmentI, f => {\n        const matches = f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Log all current selections\n      console.log('\\nALL CURRENT SELECTIONS:');\n      Object.entries(newSelected).forEach(([idx, flights]) => {\n        if (Array.isArray(flights)) {\n          flights.forEach(f => {\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          });\n        }\n      });\n\n      // Find valid combinations that include ANY of the selected flights per segment\n      const validCombos = validCombinations.filter(combo => {\n        return Object.entries(newSelected).every(([selectedSegmentIndex, selectedFlights]) => {\n          const comboFlight = combo[selectedSegmentIndex];\n          return selectedFlights.some(selectedFlight => comboFlight && comboFlight.flightNumber === selectedFlight.flightNumber && dayjs(comboFlight.DepartsAt).isSame(dayjs(selectedFlight.DepartsAt)));\n        });\n      });\n      console.log(`\\nFound ${validCombos.length} valid combinations with selected flights`);\n\n      // Filter and process flights\n      const filteredFlights = validCombos.flatMap(combo => combo.map((f, idx) => {\n        var _newSelected$idx;\n        return {\n          ...f,\n          isSelected: ((_newSelected$idx = newSelected[idx]) === null || _newSelected$idx === void 0 ? void 0 : _newSelected$idx.some(sf => sf.flightNumber === f.flightNumber && dayjs(sf.DepartsAt).isSame(dayjs(f.DepartsAt)))) || false,\n          segmentIndex: idx\n        };\n      }));\n\n      // Remove duplicates while preserving selections\n      const seenFlights = new Map();\n      const uniqueFlights = filteredFlights.filter(f => {\n        const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${f.segmentIndex}`;\n        if (!seenFlights.has(key)) {\n          seenFlights.set(key, f.isSelected);\n          return true;\n        }\n        f.isSelected = f.isSelected || seenFlights.get(key);\n        return false;\n      });\n      setSegmentDetails(uniqueFlights);\n      return newSelected;\n    });\n  };\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize with all flights from all combinations\n  useEffect(() => {\n    console.log('Updating combinations ref:', initialCombinations);\n    combinationsRef.current = initialCombinations;\n  }, [initialCombinations]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => combo.map((f, idx) => ({\n        ...f,\n        isSelected: false,\n        segmentIndex: idx\n      })));\n      const uniqueFlights = Array.from(new Map(allFlights.map(f => [`${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`, f])).values());\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability\n  };\n}\n_s(useFlightDetails, \"g+xyjG2CUdMgjQDbLkMgvESPbE8=\");","map":{"version":3,"names":["useState","useEffect","useRef","useMemo","dayjs","routeDetails","airlines","getSegmentColumns","useFlightDetails","getColumns","initialCombinations","_s","selectedDates","setSelectedDates","apiKey","setApiKey","localStorage","getItem","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","selectedFlights","setSelectedFlights","validCombinations","setValidCombinations","processedSegments","setProcessedSegments","originalFlights","setOriginalFlights","originalCombinations","processedFlights","setProcessedFlights","initialFlights","setInitialFlights","availabilityData","setAvailabilityData","isLoadingAvailability","setIsLoadingAvailability","combinationsRef","setItem","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","segmentIndex","_data$results","_data$results$","_data$results$$data","_data$results$$data$d","_data$results$$data$d2","_data$results2","_data$results2$","_data$results2$$data","flights","results","DepartsAt","Date","rawFlights","length","start","end","filter","trip","FlightNumbers","Carriers","ArrivesAt","Stops","departureTime","isValid","isAfter","isBefore","forEach","carrier","flightNumber","startsWith","slice","existingFlight","existingDeparture","arrivalTime","baseDayjs","departDayDiff","diff","arrivalDayDiff","aircraftName","Aircraft","OriginAirport","DestinationAirport","aircraft","duration","TotalDuration","departs","arrives","economy","business","first","isSelected","Cabin","toLowerCase","Object","values","isDateInRange","dateRange","subtract","add","handleDateSearch","currentRoute","selectedSegments","keys","push","segmentsByRoute","reduce","acc","segment","entries","segments","ID","classes","Y","J","F","segmentPromises","map","fetch","headers","routeString","join","availabilityResponse","method","ok","availabilityResult","json","processedAvailability","item","dateKey","originAirport","destinationAirport","YDirect","JDirect","FDirect","newProcessedSegments","startDate","endDate","i","dates","Set","startDay","startOf","endDay","endOf","d","valueOf","prevSegment","arrivals","f","sort","b","allFlights","response","error","searchDates","earliestArrival","latestArrival","firstSegmentWithFlights","findIndex","lastSegmentWithFlights","reverse","lastSegmentIndex","findValidCombinations","currentPath","validCombos","currentSegment","flight","combos","previousFlight","previousArrival","departure","connectionTime","allCombinations","combo","flightInfo","idx","prevFlight","hours","Math","floor","minutes","toString","padStart","validFlightsBySegment","Map","segmentKey","has","set","get","filteredFlights","validFlightsForSegment","flightKey","segmentFlights","flatMap","index","handleCalendarSearch","resetDetails","handleFlightSelect","prevSelected","_newSelected$segmentI","_newSelected$segmentI2","newSelected","isCurrentlySelected","some","call","matches","isSame","keep","Array","isArray","every","selectedSegmentIndex","comboFlight","selectedFlight","_newSelected$idx","sf","seenFlights","uniqueFlights","key","columns","current","comboIndex"],"sources":["/Users/hanguyen/Desktop/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nimport { getSegmentColumns } from '../segmentColumns';\n\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const combinationsRef = useRef([]);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n    \n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    \n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n\n  const getAirlineName = (code) => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => \n      r.origin === from && \n      r.destination === to\n    );\n\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    const flights = {};\n    const baseDate = dayjs(data.results?.[0]?.data?.data?.[0]?.DepartsAt || new Date()).format('YYYY-MM-DD');\n    \n    const rawFlights = data.results?.[0]?.data?.data || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    \n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    \n    rawFlights\n      .filter(trip => {\n        console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n        console.log(`  Carrier: ${trip.Carriers}`);\n        console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n        console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\n        \n        // Filter out non-direct flights\n        if (trip.Stops !== 0) {\n          console.log('  ❌ Skipped: Not a direct flight');\n          return false;\n        }\n        \n        // Filter out EK and FZ carriers\n        if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n          console.log('  ❌ Skipped: Excluded carrier');\n          return false;\n        }\n        \n        if (timeWindow) {\n          const departureTime = dayjs(trip.DepartsAt);\n          const isValid = departureTime.isAfter(timeWindow.start) && \n                         departureTime.isBefore(timeWindow.end);\n          \n          if (!isValid) {\n            console.log('  ❌ Skipped: Outside time window');\n            console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n          } else {\n            console.log('  ✓ Accepted: Within time window');\n          }\n          return isValid;\n        }\n        \n        console.log('  ✓ Accepted: No time window restrictions');\n        return true;\n      })\n      .forEach(trip => {\n        // Convert CL carrier and flight numbers to LH\n        const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n        const flightNumber = trip.FlightNumbers.startsWith('CL') \n          ? `LH${trip.FlightNumbers.slice(2)}` \n          : trip.FlightNumbers;\n\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n        const existingFlight = flights[flightNumber];\n\n        // If this is a duplicate flight, only keep the later one\n        if (existingFlight) {\n          const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n          if (departureTime.isBefore(existingDeparture)) {\n            return; // Skip this one, keep the existing later flight\n          }\n        }\n\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\n        const baseDayjs = dayjs(baseDate);\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n        // Process aircraft name\n        let aircraftName = trip.Aircraft[0];\n        if (aircraftName && aircraftName === '787  All') {\n          aircraftName = 'Boeing 787-10';\n        }\n\n        flights[flightNumber] = {\n          from: trip.OriginAirport,\n          to: trip.DestinationAirport,\n          flightNumber: flightNumber,\n          airlines: getAirlineName(carrier),\n          aircraft: aircraftName,\n          duration: trip.TotalDuration,\n          departs: departDayDiff > 0 ? \n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \n            departureTime.format('HH:mm'),\n          arrives: arrivalDayDiff > 0 ? \n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \n            arrivalTime.format('HH:mm'),\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n          economy: false,\n          business: false,\n          first: false,\n          isSelected: false,\n          segmentIndex: segmentIndex\n        };\n        \n        switch(trip.Cabin.toLowerCase()) {\n          case 'economy':\n            flights[flightNumber].economy = true;\n            break;\n          case 'business':\n            flights[flightNumber].business = true;\n            break;\n          case 'first':\n            flights[flightNumber].first = true;\n            break;\n        }\n      });\n    \n    return Object.values(flights);\n  };\n\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && \n           date.isBefore(end.add(1, 'day'));\n  };\n\n  const handleDateSearch = async (currentRoute) => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    \n    setIsLoadingSegments(true);\n    setIsLoadingAvailability(true);\n    \n    try {\n      // Get the selected segments from availability data\n      const selectedSegments = [];\n      for (const date of Object.keys(availabilityData)) {\n        if (isDateInRange(date, selectedDates)) {\n          selectedSegments.push(...availabilityData[date]);\n        }\n      }\n\n      // Log selected segments before filtering\n      console.log('=== Flights Before Combination Filtering ===');\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\n        if (!acc[segment.route]) {\n          acc[segment.route] = [];\n        }\n        acc[segment.route].push(segment);\n        return acc;\n      }, {});\n\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\n        console.log(`\\nRoute ${route}:`);\n        segments.forEach(segment => {\n          console.log(`  ID: ${segment.ID}`);\n          console.log(`  Date: ${segment.date}`);\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\n        });\n      });\n\n      // Continue with existing logic\n      const segmentPromises = selectedSegments.map(segment => \n        fetch(`https://backend-284998006367.us-central1.run.app/api/route_details/${segment.ID}`, {\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        })\n      );\n\n      // First fetch availability data\n      const routeString = currentRoute.join('-');\n      const availabilityResponse = await fetch(\n        `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`,\n        {\n          method: 'GET',\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        }\n      );\n\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n        \n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          \n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance\n          });\n        });\n        \n        setAvailabilityData(processedAvailability);\n      }\n\n      // Continue with existing segment search logic\n      const newProcessedSegments = [];\n      const [startDate, endDate] = selectedDates;\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\n      \n      console.log('\\n=== Processing Segments ===');\n      console.log('Date Range:', {\n        start: dayjs(startDate).format('YYYY-MM-DD'),\n        end: dayjs(endDate).format('YYYY-MM-DD')\n      });\n      \n      try {\n        // Process all segments\n        for (let i = 0; i < currentRoute.length - 1; i++) {\n          const from = currentRoute[i];\n          const to = currentRoute[i + 1];\n          \n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n          \n          let timeWindow = null;\n          const dates = new Set();\n\n          if (i === 0) {\n            // First segment - use full date range\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            \n            console.log('\\n=== First Segment Details ===');\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n            \n            // Get all dates in range\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n          } else {\n            // Handle subsequent segments\n            const prevSegment = newProcessedSegments[i - 1];\n            \n            // If no previous flights found, use full date range for all segments\n            if (!prevSegment || prevSegment.flights.length === 0) {\n              const startDay = dayjs(startDate).startOf('day');\n              const endDay = dayjs(endDate).endOf('day');\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('No previous flights found. Using full date range for this segment');\n            } else {\n              // Calculate time window from previous segment's flights\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n              \n              timeWindow = {\n                start: arrivals[0],\n                end: arrivals[arrivals.length - 1].add(24, 'hours')\n              };\n              \n              // Get dates for time window\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              \n              console.log('Time Window based on previous segment arrivals:');\n              console.log('  Start:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\n              console.log('  End:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\n            }\n          }\n\n          // Process each date\n          const allFlights = [];\n          for (const date of dates) {\n            const route = routeDetails.find(r => \n              r.origin === from && \n              r.destination === to &&\n              r.date === date\n            );\n\n            if (!route) {\n              console.log(`No route found for ${from}-${to} on ${date}`);\n              continue;\n            }\n\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\n            console.log(`Segment ID: ${route.ID}`);\n            \n            try {\n              const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n                method: 'GET',\n                headers: {\n                  'accept': 'application/json',\n                  'Partner-Authorization': apiKey,\n                  'Segment-ID': route.ID\n                }\n              });\n\n              if (!response.ok) {\n                console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n                continue;\n              }\n\n              const data = await response.json();\n              const processedFlights = processFlightData(data, timeWindow, i);\n              console.log(`✓ Found ${processedFlights.length} valid flights`);\n              allFlights.push(...processedFlights);\n            } catch (error) {\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\n            }\n          }\n\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n          // Store searched dates in segment data\n          newProcessedSegments[i] = {\n            route: `${from}-${to}`,\n            flights: allFlights,\n            searchDates: dates, // Add this field\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n          };\n\n          // Only break if previous segment had flights but current segment found none\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i-1].flights.length > 0) {\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n            console.log('Skipping remaining segments');\n            break;\n          }\n        }\n\n        // After processing all segments\n        if (newProcessedSegments.length >= 1) {\n          console.log('\\n=== Flight Combinations ===');\n          \n          // Find the first and last segments with flights\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(\n            segment => segment.flights && segment.flights.length > 0\n          );\n          \n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(\n            segment => segment.flights && segment.flights.length > 0\n          );\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n          // Find all valid combinations recursively\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n            // If we've reached beyond the last valid segment, this is a valid combination\n            if (segmentIndex > lastSegmentIndex) {\n              return [currentPath];\n            }\n\n            const validCombos = [];\n            const currentSegment = newProcessedSegments[segmentIndex];\n\n            // If no flights in current segment, try next segment\n            if (!currentSegment.flights || currentSegment.flights.length === 0) {\n              return findValidCombinations(currentPath, segmentIndex + 1);\n            }\n\n            // For the first flight in the path, accept any flight\n            if (currentPath.length === 0) {\n              currentSegment.flights.forEach(flight => {\n                const combos = findValidCombinations([flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              });\n            } \n            // For subsequent segments, check connection times\n            else {\n              const previousFlight = currentPath[currentPath.length - 1];\n              const previousArrival = dayjs(previousFlight.ArrivesAt);\n\n              currentSegment.flights.forEach(flight => {\n                const departure = dayjs(flight.DepartsAt);\n                const connectionTime = departure.diff(previousArrival, 'minutes');\n\n                // Check if departure is within 24 hours of previous arrival\n                if (connectionTime >= 60 && connectionTime <= 24 * 60) {\n                  const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                  validCombos.push(...combos);\n                }\n              });\n            }\n\n            return validCombos;\n          };\n\n          // Get all valid combinations\n          const allCombinations = findValidCombinations();\n\n          // Log the combinations\n          console.log('\\n=== Valid Combinations ===');\n          allCombinations.forEach(combo => {\n            const flightInfo = combo.map((flight, idx) => {\n              if (idx === 0) return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n              \n              const prevFlight = combo[idx - 1];\n              const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n              const hours = Math.floor(connectionTime / 60);\n              const minutes = connectionTime % 60;\n              return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n            });\n            \n            console.log(flightInfo.join(' → '));\n          });\n\n          // Create a map of valid flights by segment\n          const validFlightsBySegment = new Map();\n          allCombinations.forEach(combo => {\n            combo.forEach(flight => {\n              const segmentKey = flight.segmentIndex;\n              if (!validFlightsBySegment.has(segmentKey)) {\n                validFlightsBySegment.set(segmentKey, new Set());\n              }\n              validFlightsBySegment.get(segmentKey).add(\n                `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`\n              );\n            });\n          });\n\n          // Filter and process flights\n          const filteredFlights = [];\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segment = newProcessedSegments[i];\n            if (!segment || !segment.flights) continue;\n\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n            \n            // Add valid flights from this segment\n            segment.flights.forEach(flight => {\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n              if (validFlightsForSegment.has(flightKey)) {\n                filteredFlights.push({\n                  ...flight,\n                  isSelected: false,\n                  segmentIndex: i\n                });\n              }\n            });\n          }\n\n          setSegmentDetails(filteredFlights);\n          setValidCombinations(allCombinations);\n\n          // Log flights by segment\n          console.log('\\n=== Flights By Segment ===');\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n            if (segmentFlights.length > 0) {\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n              segmentFlights\n                .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\n                .forEach(flight => {\n                  console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n                });\n            }\n          }\n          \n          console.log('\\n======================');\n        } else {\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => \n            segment.flights.map(flight => ({\n              ...flight,\n              isSelected: false,\n              segmentIndex: index\n            }))\n          ));\n          setValidCombinations([]);\n        }\n      } catch (error) {\n        console.error('Error fetching segment details:', error);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoadingSegments(false);\n      setIsLoadingAvailability(false);\n    }\n  };\n\n  const handleCalendarSearch = async (currentRoute) => {\n    if (!currentRoute || !apiKey) return;\n    \n    setIsLoadingAvailability(true);\n    \n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n      const availabilityResponse = await fetch(\n        `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`,\n        {\n          method: 'GET',\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        }\n      );\n\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n        \n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          \n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance,\n            date: item.date\n          });\n        });\n        \n        setAvailabilityData(processedAvailability);\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n\n  const resetDetails = () => {\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n  };\n\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    \n    setSelectedFlights(prevSelected => {\n      const newSelected = { ...prevSelected };\n      \n      // Check if this exact flight is already selected\n      const isCurrentlySelected = newSelected[segmentIndex]?.some?.(f => {\n        const matches = f.flightNumber === flight.flightNumber && \n                       dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && \n                        dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Log all current selections\n      console.log('\\nALL CURRENT SELECTIONS:');\n      Object.entries(newSelected).forEach(([idx, flights]) => {\n        if (Array.isArray(flights)) {\n          flights.forEach(f => {\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          });\n        }\n      });\n\n      // Find valid combinations that include ANY of the selected flights per segment\n      const validCombos = validCombinations.filter(combo => {\n        return Object.entries(newSelected).every(([selectedSegmentIndex, selectedFlights]) => {\n          const comboFlight = combo[selectedSegmentIndex];\n          return selectedFlights.some(selectedFlight => \n            comboFlight && \n            comboFlight.flightNumber === selectedFlight.flightNumber && \n            dayjs(comboFlight.DepartsAt).isSame(dayjs(selectedFlight.DepartsAt))\n          );\n        });\n      });\n\n      console.log(`\\nFound ${validCombos.length} valid combinations with selected flights`);\n\n      // Filter and process flights\n      const filteredFlights = validCombos.flatMap(combo => \n        combo.map((f, idx) => ({\n          ...f,\n          isSelected: newSelected[idx]?.some(sf => \n            sf.flightNumber === f.flightNumber && \n            dayjs(sf.DepartsAt).isSame(dayjs(f.DepartsAt))\n          ) || false,\n          segmentIndex: idx\n        }))\n      );\n\n      // Remove duplicates while preserving selections\n      const seenFlights = new Map();\n      const uniqueFlights = filteredFlights.filter(f => {\n        const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${f.segmentIndex}`;\n        if (!seenFlights.has(key)) {\n          seenFlights.set(key, f.isSelected);\n          return true;\n        }\n        f.isSelected = f.isSelected || seenFlights.get(key);\n        return false;\n      });\n\n      setSegmentDetails(uniqueFlights);\n      return newSelected;\n    });\n  };\n\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize with all flights from all combinations\n  useEffect(() => {\n    console.log('Updating combinations ref:', initialCombinations);\n    combinationsRef.current = initialCombinations;\n  }, [initialCombinations]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => \n        combo.map((f, idx) => ({\n          ...f,\n          isSelected: false,\n          segmentIndex: idx\n        }))\n      );\n\n      const uniqueFlights = Array.from(\n        new Map(allFlights.map(f => [\n          `${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`,\n          f\n        ])).values()\n      );\n\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}