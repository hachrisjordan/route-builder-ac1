{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nimport { getSegmentColumns } from '../segmentColumns';\nexport default function useFlightDetails(getColumns, startDay = null) {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState([]);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const combinationsRef = useRef([]);\n  const [startDate, setStartDate] = useState(null);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    var _data$results, _data$results$, _data$results$$data, _data$results$$data$d, _data$results$$data$d2, _data$results2, _data$results2$, _data$results2$$data;\n    const flights = {};\n    const baseDate = dayjs(((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : (_data$results$$data$d = _data$results$$data.data) === null || _data$results$$data$d === void 0 ? void 0 : (_data$results$$data$d2 = _data$results$$data$d[0]) === null || _data$results$$data$d2 === void 0 ? void 0 : _data$results$$data$d2.DepartsAt) || new Date()).format('YYYY-MM-DD');\n    const rawFlights = ((_data$results2 = data.results) === null || _data$results2 === void 0 ? void 0 : (_data$results2$ = _data$results2[0]) === null || _data$results2$ === void 0 ? void 0 : (_data$results2$$data = _data$results2$.data) === null || _data$results2$$data === void 0 ? void 0 : _data$results2$$data.data) || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    rawFlights.filter(trip => {\n      // Remove the Z suffix when parsing times since they're actually local times\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n      console.log(`  Carrier: ${trip.Carriers}`);\n      console.log(`  Departs: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n      console.log(`  Arrives: ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\n\n      // Filter out non-direct flights\n      if (trip.Stops !== 0) {\n        console.log('  ❌ Skipped: Not a direct flight');\n        return false;\n      }\n\n      // Filter out EK and FZ carriers\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log('  ❌ Skipped: Excluded carrier');\n        return false;\n      }\n      if (timeWindow) {\n        const isValid = departureTime.isAfter(timeWindow.start) && departureTime.isBefore(timeWindow.end);\n        if (!isValid) {\n          console.log('  ❌ Skipped: Outside time window');\n          console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n        } else {\n          console.log('  ✓ Accepted: Within time window');\n        }\n        return isValid;\n      }\n      console.log('  ✓ Accepted: No time window restrictions');\n      return true;\n    }).forEach(trip => {\n      // Remove the Z suffix when parsing times since they're actually local times\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n\n      // Convert CL carrier and flight numbers to LH\n      const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n      const flightNumber = trip.FlightNumbers.startsWith('CL') ? `LH${trip.FlightNumbers.slice(2)}` : trip.FlightNumbers;\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n      // If flight already exists, merge cabin classes\n      if (flights[flightNumber]) {\n        switch (trip.Cabin.toLowerCase()) {\n          case 'economy':\n            flights[flightNumber].economy = true;\n            break;\n          case 'business':\n            flights[flightNumber].business = true;\n            break;\n          case 'first':\n            flights[flightNumber].first = true;\n            break;\n        }\n        return; // Skip creating new flight entry\n      }\n\n      // Process aircraft name and create new flight entry\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName && aircraftName === '787  All') {\n        aircraftName = 'Boeing 787-10';\n      }\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(carrier),\n        aircraft: aircraftName,\n        duration: trip.TotalDuration,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false,\n        isSelected: false,\n        distance: parseInt(trip.Distance) || getSegmentDistance(trip.OriginAirport, trip.DestinationAirport),\n        segmentIndex: segmentIndex\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && date.isBefore(end.add(1, 'day'));\n  };\n  const handleDateSearch = async (currentRoute, stopoverInfo) => {\n    console.log('\\n=== useFlightDetails handleDateSearch ===');\n    console.log('Current Route:', currentRoute);\n    console.log('Received Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n    if (!selectedDates || !currentRoute || !apiKey) {\n      console.log('Missing required data:', {\n        selectedDates: !!selectedDates,\n        currentRoute: !!currentRoute,\n        apiKey: !!apiKey\n      });\n      return;\n    }\n    setIsLoadingSegments(true);\n    setIsLoadingAvailability(true);\n    setSelectedFlights({});\n    try {\n      const selectedSegments = [];\n      for (const date of Object.keys(availabilityData)) {\n        if (isDateInRange(date, selectedDates)) {\n          // Preserve distance information when collecting segments\n          const segments = availabilityData[date].map(segment => ({\n            ...segment,\n            distance: parseInt(segment.distance) || getSegmentDistance(segment.route.split('-')[0], segment.route.split('-')[1])\n          }));\n          selectedSegments.push(...segments);\n        }\n      }\n\n      // Log selected segments before filtering\n      console.log('=== Flights Before Combination Filtering ===');\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\n        if (!acc[segment.route]) {\n          acc[segment.route] = [];\n        }\n        acc[segment.route].push(segment);\n        return acc;\n      }, {});\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\n        console.log(`\\nRoute ${route}:`);\n        segments.forEach(segment => {\n          console.log(`  ID: ${segment.ID}`);\n          console.log(`  Date: ${segment.date}`);\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\n        });\n      });\n\n      // Continue with existing logic\n      const segmentPromises = selectedSegments.map(segment => fetch(`https://backend-284998006367.us-central1.run.app/api/route_details/${segment.ID}`, {\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      }));\n\n      // First fetch availability data\n      const routeString = currentRoute.join('-');\n      const availabilityResponse = await fetch(`https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      });\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n\n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance\n          });\n        });\n        setAvailabilityData(processedAvailability);\n      }\n\n      // Continue with existing segment search logic\n      const newProcessedSegments = [];\n      const [startDate, endDate] = selectedDates;\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\n      console.log('\\n=== Processing Segments with Stopover ===');\n      if (stopoverInfo) {\n        console.log('Stopover Details:', {\n          airport: stopoverInfo.airport,\n          days: stopoverInfo.days\n        });\n      }\n      console.log('\\n=== Processing Segments ===');\n      console.log('Date Range:', {\n        start: dayjs(startDate).format('YYYY-MM-DD'),\n        end: dayjs(endDate).format('YYYY-MM-DD')\n      });\n      try {\n        // Process all segments\n        for (let i = 0; i < currentRoute.length - 1; i++) {\n          const from = currentRoute[i];\n          const to = currentRoute[i + 1];\n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n          let timeWindow = null;\n          const dates = new Set();\n          if (i === 0) {\n            // First segment - use full date range\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            console.log('\\n=== First Segment Details ===');\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n\n            // Get all dates in range\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n          } else {\n            // Handle subsequent segments with stopover consideration\n            const prevSegment = newProcessedSegments[i - 1];\n            if (!prevSegment || prevSegment.flights.length === 0) {\n              // Use full date range if no previous flights\n              const startDay = dayjs(startDate).startOf('day');\n              const endDay = dayjs(endDate).endOf('day');\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('No previous flights found. Using full date range for this segment');\n            } else {\n              // Calculate time window from previous segment's flights\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n              console.log('\\n=== Processing Subsequent Segment ===');\n              console.log('Segment:', `${currentRoute[i - 1]}-${currentRoute[i]}`);\n              console.log('Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n              console.log('Current Airport:', currentRoute[i]);\n              console.log('Previous Airport:', currentRoute[i - 1]);\n              console.log('Is Stopover Airport:', stopoverInfo && currentRoute[i] === stopoverInfo.airport);\n\n              // Adjust time window based on stopover\n              if (stopoverInfo && currentRoute[i] === stopoverInfo.airport) {\n                console.log(`\\nApplying stopover of ${stopoverInfo.days} days at ${stopoverInfo.airport}`);\n                timeWindow = {\n                  start: arrivals[0].add(stopoverInfo.days, 'days'),\n                  end: arrivals[arrivals.length - 1].add(stopoverInfo.days, 'days').add(24, 'hours'),\n                  isStopover: true,\n                  stopoverDays: stopoverInfo.days\n                };\n              } else {\n                timeWindow = {\n                  start: arrivals[0],\n                  end: arrivals[arrivals.length - 1].add(24, 'hours'),\n                  isStopover: false,\n                  stopoverDays: 0\n                };\n              }\n              console.log('\\nTime Window:', {\n                start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n                end: timeWindow.end.format('YYYY-MM-DD HH:mm'),\n                isStopover: timeWindow.isStopover,\n                stopoverDays: timeWindow.stopoverDays\n              });\n\n              // Get dates for time window\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n            }\n          }\n\n          // Process each date\n          const allFlights = [];\n          for (const date of dates) {\n            // Find route from availability data instead\n            const availableRoutes = availabilityData[date] || [];\n            const route = availableRoutes.find(r => r.route === `${from}-${to}`);\n            if (!route) {\n              console.log(`No route found for ${from}-${to} on ${date}`);\n              continue;\n            }\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\n            console.log(`Segment ID: ${route.ID}`);\n            try {\n              const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n                method: 'GET',\n                headers: {\n                  'accept': 'application/json',\n                  'Partner-Authorization': apiKey,\n                  'Segment-ID': route.ID\n                }\n              });\n              if (!response.ok) {\n                console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n                continue;\n              }\n              const data = await response.json();\n              const processedFlights = processFlightData(data, timeWindow, i);\n              console.log(`✓ Found ${processedFlights.length} valid flights`);\n              allFlights.push(...processedFlights);\n            } catch (error) {\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\n            }\n          }\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n          // Store searched dates in segment data\n          newProcessedSegments[i] = {\n            route: `${from}-${to}`,\n            flights: allFlights,\n            searchDates: dates,\n            // Add this field\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n          };\n\n          // Only break if previous segment had flights but current segment found none\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i - 1].flights.length > 0) {\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n            console.log('Skipping remaining segments');\n            break;\n          }\n        }\n\n        // After processing all segments\n        if (newProcessedSegments.length >= 1) {\n          // Log all flights found by segment\n          console.log('\\n=== All Flights Found ===');\n          newProcessedSegments.forEach((segment, index) => {\n            if (segment.flights && segment.flights.length > 0) {\n              console.log(`\\nSegment ${index} (${segment.route}):`);\n              segment.flights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft}`);\n              });\n            } else {\n              console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\n            }\n          });\n          console.log('\\n=== Flight Combinations ===');\n\n          // Find the first and last segments with flights\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n          // Find all valid combinations recursively\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n            // If we've reached beyond the last valid segment, this is a valid combination\n            if (segmentIndex > lastSegmentIndex) {\n              return [currentPath];\n            }\n            const validCombos = [];\n            const currentSegment = newProcessedSegments[segmentIndex];\n\n            // If no flights in current segment, try next segment\n            if (!(currentSegment !== null && currentSegment !== void 0 && currentSegment.flights) || currentSegment.flights.length === 0) {\n              return findValidCombinations(currentPath, segmentIndex + 1);\n            }\n\n            // For first segment, try all flights\n            if (currentPath.length === 0) {\n              currentSegment.flights.forEach(flight => {\n                const combos = findValidCombinations([flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              });\n            } else {\n              // For subsequent segments, check connection times\n              const prevFlight = currentPath[currentPath.length - 1];\n              const prevArrival = dayjs(prevFlight.ArrivesAt);\n              const isStopoverPoint = stopoverInfo && currentRoute[segmentIndex] === stopoverInfo.airport;\n              currentSegment.flights.forEach(flight => {\n                const departure = dayjs(flight.DepartsAt);\n                const connectionTime = departure.diff(prevArrival, 'minutes');\n                if (isStopoverPoint) {\n                  // For stopover points, connection must be within stopover day window\n                  const minStopoverTime = stopoverInfo.days * 24 * 60; // Convert days to minutes\n                  const maxStopoverTime = (stopoverInfo.days + 1) * 24 * 60; // Add one more day for flexibility\n\n                  if (connectionTime >= minStopoverTime && connectionTime <= maxStopoverTime) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                } else {\n                  // For normal connections, 30 minutes to 24 hours\n                  if (connectionTime >= 30 && connectionTime <= 24 * 60) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                }\n              });\n            }\n            return validCombos;\n          };\n\n          // Get all valid combinations using the new function\n          const allCombinations = findValidCombinations();\n\n          // Store combinations in ref immediately after finding them\n          combinationsRef.current = allCombinations;\n\n          // Log the combinations\n          console.log('\\n=== Valid Combinations ===');\n          if (allCombinations.length === 0) {\n            console.log('No valid combinations found for any segment range');\n          } else {\n            console.log(`Found ${allCombinations.length} valid combinations`);\n            allCombinations.forEach(combo => {\n              const flightInfo = combo.map((flight, idx) => {\n                if (idx === 0) {\n                  return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n                }\n                const prevFlight = combo[idx - 1];\n                const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n                const hours = Math.floor(connectionTime / 60);\n                const minutes = connectionTime % 60;\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n              });\n              console.log(flightInfo.join(' → '));\n            });\n          }\n\n          // Create a map of valid flights by segment\n          const validFlightsBySegment = new Map();\n          allCombinations.forEach(combo => {\n            combo.forEach(flight => {\n              const segmentKey = flight.segmentIndex;\n              if (!validFlightsBySegment.has(segmentKey)) {\n                validFlightsBySegment.set(segmentKey, new Set());\n              }\n              validFlightsBySegment.get(segmentKey).add(`${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n            });\n          });\n\n          // Filter and process flights\n          const filteredFlights = [];\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segment = newProcessedSegments[i];\n            if (!segment || !segment.flights) continue;\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n\n            // Add valid flights from this segment\n            segment.flights.forEach(flight => {\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n              if (validFlightsForSegment.has(flightKey)) {\n                filteredFlights.push({\n                  ...flight,\n                  isSelected: false,\n                  segmentIndex: i\n                });\n              }\n            });\n          }\n          setSegmentDetails(filteredFlights);\n          setValidCombinations(allCombinations);\n\n          // Log flights by segment\n          console.log('\\n=== Flights By Segment ===');\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n            if (segmentFlights.length > 0) {\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n              segmentFlights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n              });\n            }\n          }\n          console.log('\\n======================');\n        } else {\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => segment.flights.map(flight => ({\n            ...flight,\n            isSelected: false,\n            segmentIndex: index\n          }))));\n          setValidCombinations([]);\n        }\n      } catch (error) {\n        console.error('Error processing segments:', error);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoadingSegments(false);\n      setIsLoadingAvailability(false);\n    }\n  };\n  const handleCalendarSearch = async currentRoute => {\n    if (!currentRoute || !apiKey) return;\n    setIsLoadingAvailability(true);\n    // Don't reset selectedFlights here - this was causing your layover info and journey summary to disappear\n    // setSelectedFlights({});\n\n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n\n      // Add the startDate to the API request if it exists\n      let apiUrl = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n      if (startDate) {\n        const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n        apiUrl = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}?startDate=${formattedDate}`;\n      }\n      const availabilityResponse = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      });\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n\n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance,\n            date: item.date\n          });\n        });\n\n        // Merge with existing data instead of replacing\n        setAvailabilityData(prevData => ({\n          ...prevData,\n          ...processedAvailability\n        }));\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n  const resetDetails = () => {\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n  };\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    setSelectedFlights(prevSelected => {\n      var _newSelected$segmentI, _newSelected$segmentI2;\n      const newSelected = {\n        ...prevSelected\n      };\n\n      // Check if this exact flight is already selected\n      const isCurrentlySelected = (_newSelected$segmentI = newSelected[segmentIndex]) === null || _newSelected$segmentI === void 0 ? void 0 : (_newSelected$segmentI2 = _newSelected$segmentI.some) === null || _newSelected$segmentI2 === void 0 ? void 0 : _newSelected$segmentI2.call(_newSelected$segmentI, f => {\n        const matches = f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Log all current selections\n      console.log('\\nALL CURRENT SELECTIONS:');\n      Object.entries(newSelected).forEach(([idx, flights]) => {\n        if (Array.isArray(flights)) {\n          flights.forEach(f => {\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          });\n        }\n      });\n\n      // Use combinations from the ref\n      const currentCombos = combinationsRef.current;\n      const firstSegmentWithFlights = Math.min(...segmentDetails.filter(f => !f.hidden).map(f => f.segmentIndex));\n      console.log('\\nChecking combinations:', currentCombos.map(combo => combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')));\n\n      // Find combinations that contain the selected flight(s)\n      const validCombos = currentCombos.filter(combo => {\n        // If no selections, all combinations are valid\n        if (Object.keys(newSelected).length === 0) return true;\n\n        // Check if this combination contains all selected flights\n        const isValid = Object.entries(newSelected).every(([segIdx, flights]) => {\n          const selectedFlight = flights[0];\n          // Adjust index based on first segment with flights\n          const comboIndex = parseInt(segIdx, 10) - firstSegmentWithFlights;\n          const comboFlight = combo[comboIndex];\n          const matches = (comboFlight === null || comboFlight === void 0 ? void 0 : comboFlight.flightNumber) === selectedFlight.flightNumber && dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm') === dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm');\n          console.log(`Checking combo flight in segment ${segIdx}:`, {\n            selected: `${selectedFlight.flightNumber} (${dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm')})`,\n            combo: comboFlight ? `${comboFlight.flightNumber} (${dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm')})` : 'none',\n            comboIndex,\n            matches\n          });\n          return matches;\n        });\n        return isValid;\n      });\n      console.log('\\nValid combinations:', validCombos.map(combo => combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')));\n\n      // Create a set of all flights that appear in valid combinations\n      const validFlights = new Set();\n      validCombos.forEach(combo => {\n        combo.forEach(f => {\n          if (!f) return;\n          const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          validFlights.add(key);\n        });\n      });\n\n      // Update visibility\n      setSegmentDetails(prevDetails => prevDetails.map(f => {\n        var _newSelected$f$segmen;\n        const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n        const isSelected = ((_newSelected$f$segmen = newSelected[f.segmentIndex]) === null || _newSelected$f$segmen === void 0 ? void 0 : _newSelected$f$segmen.some(sf => sf.flightNumber === f.flightNumber && dayjs(sf.DepartsAt).format('MM-DD HH:mm') === dayjs(f.DepartsAt).format('MM-DD HH:mm'))) || false;\n        return {\n          ...f,\n          isSelected,\n          hidden: Object.keys(newSelected).length > 0 && !isSelected && !validFlights.has(flightKey)\n        };\n      }));\n      return newSelected;\n    });\n  };\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize segment details\n  useEffect(() => {\n    // Make sure initialCombinations is an array before using flatMap\n    if (Array.isArray(originalCombinations) && originalCombinations.length > 0) {\n      const allFlights = originalCombinations.flatMap((combo, comboIndex) => combo.map((f, idx) => ({\n        ...f,\n        isSelected: false,\n        segmentIndex: idx\n      })));\n      const uniqueFlights = Array.from(new Map(allFlights.map(f => [`${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`, f])).values());\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [originalCombinations]);\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n    startDate,\n    setStartDate\n  };\n}\n_s(useFlightDetails, \"TwoJ4Jcoyb2D4N+3ZWs1Q6d4TWw=\");","map":{"version":3,"names":["useState","useEffect","useRef","useMemo","dayjs","routeDetails","airlines","getSegmentColumns","useFlightDetails","getColumns","startDay","_s","selectedDates","setSelectedDates","apiKey","setApiKey","localStorage","getItem","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","selectedFlights","setSelectedFlights","validCombinations","setValidCombinations","processedSegments","setProcessedSegments","originalFlights","setOriginalFlights","originalCombinations","processedFlights","setProcessedFlights","initialFlights","setInitialFlights","availabilityData","setAvailabilityData","isLoadingAvailability","setIsLoadingAvailability","combinationsRef","startDate","setStartDate","setItem","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","segmentIndex","_data$results","_data$results$","_data$results$$data","_data$results$$data$d","_data$results$$data$d2","_data$results2","_data$results2$","_data$results2$$data","flights","results","DepartsAt","Date","rawFlights","length","start","end","filter","trip","departureTime","arrivalTime","ArrivesAt","FlightNumbers","Carriers","Stops","isValid","isAfter","isBefore","forEach","carrier","flightNumber","startsWith","slice","baseDayjs","departDayDiff","diff","arrivalDayDiff","Cabin","toLowerCase","economy","business","first","aircraftName","Aircraft","OriginAirport","DestinationAirport","aircraft","duration","TotalDuration","departs","arrives","isSelected","parseInt","Distance","Object","values","isDateInRange","dateRange","subtract","add","handleDateSearch","currentRoute","stopoverInfo","JSON","stringify","selectedSegments","keys","segments","map","segment","split","push","segmentsByRoute","reduce","acc","entries","ID","classes","Y","J","F","segmentPromises","fetch","headers","routeString","join","availabilityResponse","method","ok","availabilityResult","json","processedAvailability","item","dateKey","originAirport","destinationAirport","YDirect","JDirect","FDirect","newProcessedSegments","endDate","airport","days","i","dates","Set","startOf","endDay","endOf","d","valueOf","prevSegment","arrivals","f","sort","b","isStopover","stopoverDays","allFlights","availableRoutes","response","error","searchDates","earliestArrival","latestArrival","index","flight","firstSegmentWithFlights","findIndex","lastSegmentWithFlights","reverse","lastSegmentIndex","findValidCombinations","currentPath","validCombos","currentSegment","combos","prevFlight","prevArrival","isStopoverPoint","departure","connectionTime","minStopoverTime","maxStopoverTime","allCombinations","current","combo","flightInfo","idx","hours","Math","floor","minutes","toString","padStart","validFlightsBySegment","Map","segmentKey","has","set","get","filteredFlights","validFlightsForSegment","flightKey","segmentFlights","flatMap","handleCalendarSearch","apiUrl","formattedDate","prevData","resetDetails","handleFlightSelect","prevSelected","_newSelected$segmentI","_newSelected$segmentI2","newSelected","isCurrentlySelected","some","call","matches","isSame","keep","Array","isArray","currentCombos","min","hidden","every","segIdx","selectedFlight","comboIndex","comboFlight","selected","validFlights","key","prevDetails","_newSelected$f$segmen","sf","columns","uniqueFlights"],"sources":["/Users/hanguyen/Desktop/route-builder-ac/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nimport { getSegmentColumns } from '../segmentColumns';\n\nexport default function useFlightDetails(getColumns, startDay = null) {\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState([]);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const combinationsRef = useRef([]);\n  const [startDate, setStartDate] = useState(null);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n    \n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    \n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n\n  const getAirlineName = (code) => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => \n      r.origin === from && \n      r.destination === to\n    );\n\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    const flights = {};\n    const baseDate = dayjs(data.results?.[0]?.data?.data?.[0]?.DepartsAt || new Date()).format('YYYY-MM-DD');\n    \n    const rawFlights = data.results?.[0]?.data?.data || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    \n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    \n    rawFlights\n      .filter(trip => {\n        // Remove the Z suffix when parsing times since they're actually local times\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n        \n        console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n        console.log(`  Carrier: ${trip.Carriers}`);\n        console.log(`  Departs: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n        console.log(`  Arrives: ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\n        \n        // Filter out non-direct flights\n        if (trip.Stops !== 0) {\n          console.log('  ❌ Skipped: Not a direct flight');\n          return false;\n        }\n        \n        // Filter out EK and FZ carriers\n        if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n          console.log('  ❌ Skipped: Excluded carrier');\n          return false;\n        }\n        \n        if (timeWindow) {\n          const isValid = departureTime.isAfter(timeWindow.start) && \n                         departureTime.isBefore(timeWindow.end);\n          \n          if (!isValid) {\n            console.log('  ❌ Skipped: Outside time window');\n            console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n          } else {\n            console.log('  ✓ Accepted: Within time window');\n          }\n          return isValid;\n        }\n        \n        console.log('  ✓ Accepted: No time window restrictions');\n        return true;\n      })\n      .forEach(trip => {\n        // Remove the Z suffix when parsing times since they're actually local times\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); \n\n        // Convert CL carrier and flight numbers to LH\n        const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n        const flightNumber = trip.FlightNumbers.startsWith('CL') \n          ? `LH${trip.FlightNumbers.slice(2)}` \n          : trip.FlightNumbers;\n\n        const baseDayjs = dayjs(baseDate);\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n        // If flight already exists, merge cabin classes\n        if (flights[flightNumber]) {\n          switch(trip.Cabin.toLowerCase()) {\n            case 'economy':\n              flights[flightNumber].economy = true;\n              break;\n            case 'business':\n              flights[flightNumber].business = true;\n              break;\n            case 'first':\n              flights[flightNumber].first = true;\n              break;\n          }\n          return; // Skip creating new flight entry\n        }\n\n        // Process aircraft name and create new flight entry\n        let aircraftName = trip.Aircraft[0];\n        if (aircraftName && aircraftName === '787  All') {\n          aircraftName = 'Boeing 787-10';\n        }\n\n        flights[flightNumber] = {\n          from: trip.OriginAirport,\n          to: trip.DestinationAirport,\n          flightNumber: flightNumber,\n          airlines: getAirlineName(carrier),\n          aircraft: aircraftName,\n          duration: trip.TotalDuration,\n          departs: departDayDiff > 0 ? \n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \n            departureTime.format('HH:mm'),\n          arrives: arrivalDayDiff > 0 ? \n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \n            arrivalTime.format('HH:mm'),\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n          economy: false,\n          business: false,\n          first: false,\n          isSelected: false,\n          distance: parseInt(trip.Distance) || getSegmentDistance(trip.OriginAirport, trip.DestinationAirport),\n          segmentIndex: segmentIndex\n        };\n        \n        switch(trip.Cabin.toLowerCase()) {\n          case 'economy':\n            flights[flightNumber].economy = true;\n            break;\n          case 'business':\n            flights[flightNumber].business = true;\n            break;\n          case 'first':\n            flights[flightNumber].first = true;\n            break;\n        }\n      });\n    \n    return Object.values(flights);\n  };\n\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && \n           date.isBefore(end.add(1, 'day'));\n  };\n\n  const handleDateSearch = async (currentRoute, stopoverInfo) => {\n    console.log('\\n=== useFlightDetails handleDateSearch ===');\n    console.log('Current Route:', currentRoute);\n    console.log('Received Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n    \n    if (!selectedDates || !currentRoute || !apiKey) {\n      console.log('Missing required data:', {\n        selectedDates: !!selectedDates,\n        currentRoute: !!currentRoute,\n        apiKey: !!apiKey\n      });\n      return;\n    }\n    \n    setIsLoadingSegments(true);\n    setIsLoadingAvailability(true);\n    setSelectedFlights({});\n    \n    try {\n      const selectedSegments = [];\n      for (const date of Object.keys(availabilityData)) {\n        if (isDateInRange(date, selectedDates)) {\n          // Preserve distance information when collecting segments\n          const segments = availabilityData[date].map(segment => ({\n            ...segment,\n            distance: parseInt(segment.distance) || getSegmentDistance(segment.route.split('-')[0], segment.route.split('-')[1])\n          }));\n          selectedSegments.push(...segments);\n        }\n      }\n\n      // Log selected segments before filtering\n      console.log('=== Flights Before Combination Filtering ===');\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\n        if (!acc[segment.route]) {\n          acc[segment.route] = [];\n        }\n        acc[segment.route].push(segment);\n        return acc;\n      }, {});\n\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\n        console.log(`\\nRoute ${route}:`);\n        segments.forEach(segment => {\n          console.log(`  ID: ${segment.ID}`);\n          console.log(`  Date: ${segment.date}`);\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\n        });\n      });\n\n      // Continue with existing logic\n      const segmentPromises = selectedSegments.map(segment => \n        fetch(`https://backend-284998006367.us-central1.run.app/api/route_details/${segment.ID}`, {\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        })\n      );\n\n      // First fetch availability data\n      const routeString = currentRoute.join('-');\n      const availabilityResponse = await fetch(\n        `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`,\n        {\n          method: 'GET',\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        }\n      );\n\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n        \n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          \n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance\n          });\n        });\n        \n        setAvailabilityData(processedAvailability);\n      }\n\n      // Continue with existing segment search logic\n      const newProcessedSegments = [];\n      const [startDate, endDate] = selectedDates;\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\n      \n      console.log('\\n=== Processing Segments with Stopover ===');\n      if (stopoverInfo) {\n        console.log('Stopover Details:', {\n          airport: stopoverInfo.airport,\n          days: stopoverInfo.days\n        });\n      }\n\n      console.log('\\n=== Processing Segments ===');\n      console.log('Date Range:', {\n        start: dayjs(startDate).format('YYYY-MM-DD'),\n        end: dayjs(endDate).format('YYYY-MM-DD')\n      });\n      \n      try {\n        // Process all segments\n        for (let i = 0; i < currentRoute.length - 1; i++) {\n          const from = currentRoute[i];\n          const to = currentRoute[i + 1];\n          \n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n          \n          let timeWindow = null;\n          const dates = new Set();\n\n          if (i === 0) {\n            // First segment - use full date range\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            \n            console.log('\\n=== First Segment Details ===');\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n            \n            // Get all dates in range\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n          } else {\n            // Handle subsequent segments with stopover consideration\n            const prevSegment = newProcessedSegments[i - 1];\n            \n            if (!prevSegment || prevSegment.flights.length === 0) {\n              // Use full date range if no previous flights\n              const startDay = dayjs(startDate).startOf('day');\n              const endDay = dayjs(endDate).endOf('day');\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('No previous flights found. Using full date range for this segment');\n            } else {\n              // Calculate time window from previous segment's flights\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n              \n              console.log('\\n=== Processing Subsequent Segment ===');\n              console.log('Segment:', `${currentRoute[i-1]}-${currentRoute[i]}`);\n              console.log('Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n              console.log('Current Airport:', currentRoute[i]);\n              console.log('Previous Airport:', currentRoute[i-1]);\n              console.log('Is Stopover Airport:', stopoverInfo && currentRoute[i] === stopoverInfo.airport);\n              \n              // Adjust time window based on stopover\n              if (stopoverInfo && currentRoute[i] === stopoverInfo.airport) {\n                console.log(`\\nApplying stopover of ${stopoverInfo.days} days at ${stopoverInfo.airport}`);\n                timeWindow = {\n                  start: arrivals[0].add(stopoverInfo.days, 'days'),\n                  end: arrivals[arrivals.length - 1].add(stopoverInfo.days, 'days').add(24, 'hours'),\n                  isStopover: true,\n                  stopoverDays: stopoverInfo.days\n                };\n              } else {\n                timeWindow = {\n                  start: arrivals[0],\n                  end: arrivals[arrivals.length - 1].add(24, 'hours'),\n                  isStopover: false,\n                  stopoverDays: 0\n                };\n              }\n              \n              console.log('\\nTime Window:', {\n                start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n                end: timeWindow.end.format('YYYY-MM-DD HH:mm'),\n                isStopover: timeWindow.isStopover,\n                stopoverDays: timeWindow.stopoverDays\n              });\n\n              // Get dates for time window\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n            }\n          }\n\n          // Process each date\n          const allFlights = [];\n          for (const date of dates) {\n            // Find route from availability data instead\n            const availableRoutes = availabilityData[date] || [];\n            const route = availableRoutes.find(r => \n              r.route === `${from}-${to}`\n            );\n\n            if (!route) {\n              console.log(`No route found for ${from}-${to} on ${date}`);\n              continue;\n            }\n\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\n            console.log(`Segment ID: ${route.ID}`);\n            \n            try {\n              const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n                method: 'GET',\n                headers: {\n                  'accept': 'application/json',\n                  'Partner-Authorization': apiKey,\n                  'Segment-ID': route.ID\n                }\n              });\n\n              if (!response.ok) {\n                console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n                continue;\n              }\n\n              const data = await response.json();\n              const processedFlights = processFlightData(data, timeWindow, i);\n              console.log(`✓ Found ${processedFlights.length} valid flights`);\n              allFlights.push(...processedFlights);\n            } catch (error) {\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\n            }\n          }\n\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n          // Store searched dates in segment data\n          newProcessedSegments[i] = {\n            route: `${from}-${to}`,\n            flights: allFlights,\n            searchDates: dates, // Add this field\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n          };\n\n          // Only break if previous segment had flights but current segment found none\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i-1].flights.length > 0) {\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n            console.log('Skipping remaining segments');\n            break;\n          }\n        }\n\n        // After processing all segments\n        if (newProcessedSegments.length >= 1) {\n          // Log all flights found by segment\n          console.log('\\n=== All Flights Found ===');\n          newProcessedSegments.forEach((segment, index) => {\n            if (segment.flights && segment.flights.length > 0) {\n              console.log(`\\nSegment ${index} (${segment.route}):`);\n              segment.flights\n                .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\n                .forEach(flight => {\n                  console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft}`);\n                });\n            } else {\n              console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\n            }\n          });\n\n          console.log('\\n=== Flight Combinations ===');\n          \n          // Find the first and last segments with flights\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(\n            segment => segment.flights && segment.flights.length > 0\n          );\n          \n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(\n            segment => segment.flights && segment.flights.length > 0\n          );\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n          // Find all valid combinations recursively\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n            // If we've reached beyond the last valid segment, this is a valid combination\n            if (segmentIndex > lastSegmentIndex) {\n              return [currentPath];\n            }\n\n            const validCombos = [];\n            const currentSegment = newProcessedSegments[segmentIndex];\n\n            // If no flights in current segment, try next segment\n            if (!currentSegment?.flights || currentSegment.flights.length === 0) {\n              return findValidCombinations(currentPath, segmentIndex + 1);\n            }\n\n            // For first segment, try all flights\n            if (currentPath.length === 0) {\n              currentSegment.flights.forEach(flight => {\n                const combos = findValidCombinations([flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              });\n            } else {\n              // For subsequent segments, check connection times\n              const prevFlight = currentPath[currentPath.length - 1];\n              const prevArrival = dayjs(prevFlight.ArrivesAt);\n              const isStopoverPoint = stopoverInfo && \n                                     currentRoute[segmentIndex] === stopoverInfo.airport;\n\n              currentSegment.flights.forEach(flight => {\n                const departure = dayjs(flight.DepartsAt);\n                const connectionTime = departure.diff(prevArrival, 'minutes');\n\n                if (isStopoverPoint) {\n                  // For stopover points, connection must be within stopover day window\n                  const minStopoverTime = stopoverInfo.days * 24 * 60; // Convert days to minutes\n                  const maxStopoverTime = (stopoverInfo.days + 1) * 24 * 60; // Add one more day for flexibility\n                  \n                  if (connectionTime >= minStopoverTime && connectionTime <= maxStopoverTime) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                } else {\n                  // For normal connections, 30 minutes to 24 hours\n                  if (connectionTime >= 30 && connectionTime <= 24 * 60) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                }\n              });\n            }\n\n            return validCombos;\n          };\n\n          // Get all valid combinations using the new function\n          const allCombinations = findValidCombinations();\n\n          // Store combinations in ref immediately after finding them\n          combinationsRef.current = allCombinations;\n\n          // Log the combinations\n          console.log('\\n=== Valid Combinations ===');\n          if (allCombinations.length === 0) {\n            console.log('No valid combinations found for any segment range');\n          } else {\n            console.log(`Found ${allCombinations.length} valid combinations`);\n            allCombinations.forEach(combo => {\n              const flightInfo = combo.map((flight, idx) => {\n                if (idx === 0) {\n                  return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n                }\n                \n                const prevFlight = combo[idx - 1];\n                const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n                const hours = Math.floor(connectionTime / 60);\n                const minutes = connectionTime % 60;\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n              });\n              \n              console.log(flightInfo.join(' → '));\n            });\n          }\n\n          // Create a map of valid flights by segment\n          const validFlightsBySegment = new Map();\n          allCombinations.forEach(combo => {\n            combo.forEach(flight => {\n              const segmentKey = flight.segmentIndex;\n              if (!validFlightsBySegment.has(segmentKey)) {\n                validFlightsBySegment.set(segmentKey, new Set());\n              }\n              validFlightsBySegment.get(segmentKey).add(\n                `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`\n              );\n            });\n          });\n\n          // Filter and process flights\n          const filteredFlights = [];\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segment = newProcessedSegments[i];\n            if (!segment || !segment.flights) continue;\n\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n            \n            // Add valid flights from this segment\n            segment.flights.forEach(flight => {\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n              if (validFlightsForSegment.has(flightKey)) {\n                filteredFlights.push({\n                  ...flight,\n                  isSelected: false,\n                  segmentIndex: i\n                });\n              }\n            });\n          }\n\n          setSegmentDetails(filteredFlights);\n          setValidCombinations(allCombinations);\n\n          // Log flights by segment\n          console.log('\\n=== Flights By Segment ===');\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n            if (segmentFlights.length > 0) {\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n              segmentFlights\n                .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\n                .forEach(flight => {\n                  console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n                });\n            }\n          }\n          \n          console.log('\\n======================');\n        } else {\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => \n            segment.flights.map(flight => ({\n              ...flight,\n              isSelected: false,\n              segmentIndex: index\n            }))\n          ));\n          setValidCombinations([]);\n        }\n      } catch (error) {\n        console.error('Error processing segments:', error);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoadingSegments(false);\n      setIsLoadingAvailability(false);\n    }\n  };\n\n  const handleCalendarSearch = async (currentRoute) => {\n    if (!currentRoute || !apiKey) return;\n    \n    setIsLoadingAvailability(true);\n    // Don't reset selectedFlights here - this was causing your layover info and journey summary to disappear\n    // setSelectedFlights({});\n    \n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n      \n      // Add the startDate to the API request if it exists\n      let apiUrl = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n      if (startDate) {\n        const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n        apiUrl = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}?startDate=${formattedDate}`;\n      }\n      \n      const availabilityResponse = await fetch(\n        apiUrl,\n        {\n          method: 'GET',\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        }\n      );\n      \n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n        \n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          \n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance,\n            date: item.date\n          });\n        });\n        \n        // Merge with existing data instead of replacing\n        setAvailabilityData(prevData => ({\n          ...prevData,\n          ...processedAvailability\n        }));\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n\n  const resetDetails = () => {\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n  };\n\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    \n    setSelectedFlights(prevSelected => {\n      const newSelected = { ...prevSelected };\n      \n      // Check if this exact flight is already selected\n      const isCurrentlySelected = newSelected[segmentIndex]?.some?.(f => {\n        const matches = f.flightNumber === flight.flightNumber && \n                       dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && \n                        dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Log all current selections\n      console.log('\\nALL CURRENT SELECTIONS:');\n      Object.entries(newSelected).forEach(([idx, flights]) => {\n        if (Array.isArray(flights)) {\n          flights.forEach(f => {\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          });\n        }\n      });\n\n      // Use combinations from the ref\n      const currentCombos = combinationsRef.current;\n      const firstSegmentWithFlights = Math.min(...segmentDetails\n        .filter(f => !f.hidden)\n        .map(f => f.segmentIndex));\n      \n      console.log('\\nChecking combinations:', currentCombos.map(combo => \n        combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')\n      ));\n\n      // Find combinations that contain the selected flight(s)\n      const validCombos = currentCombos.filter(combo => {\n        // If no selections, all combinations are valid\n        if (Object.keys(newSelected).length === 0) return true;\n\n        // Check if this combination contains all selected flights\n        const isValid = Object.entries(newSelected).every(([segIdx, flights]) => {\n          const selectedFlight = flights[0];\n          // Adjust index based on first segment with flights\n          const comboIndex = parseInt(segIdx, 10) - firstSegmentWithFlights;\n          const comboFlight = combo[comboIndex];\n          \n          const matches = comboFlight?.flightNumber === selectedFlight.flightNumber &&\n                         dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm') === \n                         dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm');\n          \n          console.log(`Checking combo flight in segment ${segIdx}:`, {\n            selected: `${selectedFlight.flightNumber} (${dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm')})`,\n            combo: comboFlight ? `${comboFlight.flightNumber} (${dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm')})` : 'none',\n            comboIndex,\n            matches\n          });\n          \n          return matches;\n        });\n\n        return isValid;\n      });\n\n      console.log('\\nValid combinations:', validCombos.map(combo => \n        combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')\n      ));\n\n      // Create a set of all flights that appear in valid combinations\n      const validFlights = new Set();\n      validCombos.forEach(combo => {\n        combo.forEach(f => {\n          if (!f) return;\n          const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          validFlights.add(key);\n        });\n      });\n\n      // Update visibility\n      setSegmentDetails(prevDetails => \n        prevDetails.map(f => {\n          const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          const isSelected = newSelected[f.segmentIndex]?.some(sf => \n            sf.flightNumber === f.flightNumber && \n            dayjs(sf.DepartsAt).format('MM-DD HH:mm') === dayjs(f.DepartsAt).format('MM-DD HH:mm')\n          ) || false;\n\n          return {\n            ...f,\n            isSelected,\n            hidden: Object.keys(newSelected).length > 0 && !isSelected && !validFlights.has(flightKey)\n          };\n        })\n      );\n\n      return newSelected;\n    });\n  };\n\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize segment details\n  useEffect(() => {\n    // Make sure initialCombinations is an array before using flatMap\n    if (Array.isArray(originalCombinations) && originalCombinations.length > 0) {\n      const allFlights = originalCombinations.flatMap((combo, comboIndex) => \n        combo.map((f, idx) => ({\n          ...f,\n          isSelected: false,\n          segmentIndex: idx\n        }))\n      );\n\n      const uniqueFlights = Array.from(\n        new Map(allFlights.map(f => [\n          `${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`,\n          f\n        ])).values()\n      );\n\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [originalCombinations]);\n\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n    startDate,\n    setStartDate,\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}