{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nexport default function useFlightDetails() {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow) => {\n    var _data$results, _data$results$, _data$results$$data;\n    const flights = {};\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    const rawFlights = ((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : _data$results$$data.data) || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    rawFlights.filter(trip => {\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n      console.log(`  Carrier: ${trip.Carriers}`);\n      console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n      console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\n\n      // Filter out non-direct flights\n      if (trip.Stops !== 0) {\n        console.log('  ❌ Skipped: Not a direct flight');\n        return false;\n      }\n\n      // Filter out EK and FZ carriers\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log('  ❌ Skipped: Excluded carrier');\n        return false;\n      }\n      if (timeWindow) {\n        const departureTime = dayjs(trip.DepartsAt);\n        const isValid = departureTime.isAfter(timeWindow.start) && departureTime.isBefore(timeWindow.end);\n        if (!isValid) {\n          console.log('  ❌ Skipped: Outside time window');\n          console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n        } else {\n          console.log('  ✓ Accepted: Within time window');\n        }\n        return isValid;\n      }\n      console.log('  ✓ Accepted: No time window restrictions');\n      return true;\n    }).forEach(trip => {\n      const flightNumber = trip.FlightNumbers;\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const existingFlight = flights[flightNumber];\n\n      // If this is a duplicate flight, only keep the later one\n      if (existingFlight) {\n        const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n        if (departureTime.isBefore(existingDeparture)) {\n          return; // Skip this one, keep the existing later flight\n        }\n      }\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n      // Process aircraft name\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName && aircraftName.includes('787')) {\n        aircraftName = 'Boeing 787-10';\n      }\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(trip.Carriers),\n        aircraft: aircraftName,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const handleDateSearch = async currentRoute => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    const processedSegments = [];\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    try {\n      // Process all segments\n      for (let i = 0; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        const prevSegment = processedSegments[i - 1];\n        let timeWindow = null;\n        if (prevSegment && prevSegment.flights.length > 0) {\n          // Calculate time window from previous segment\n          const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n          arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n          const earliestArrival = arrivals[0];\n          const latestArrival = arrivals[arrivals.length - 1];\n          timeWindow = {\n            start: earliestArrival,\n            end: latestArrival.add(24, 'hours')\n          };\n          console.log('\\nTime Window for', `${from}-${to}:`);\n          console.log('From:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\n          console.log('To:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\n        }\n\n        // Get all required dates for this segment\n        const dates = new Set();\n        if (timeWindow) {\n          let currentDate = timeWindow.start;\n          while (currentDate.isBefore(timeWindow.end) || currentDate.isSame(timeWindow.end, 'day')) {\n            dates.add(currentDate.format('YYYY-MM-DD'));\n            currentDate = currentDate.add(1, 'day');\n          }\n        } else {\n          dates.add(baseDate);\n        }\n        console.log('\\nFetching dates for', `${from}-${to}:`, Array.from(dates));\n\n        // Process each date\n        const allFlights = [];\n        for (const date of dates) {\n          const route = routeDetails.find(r => r.origin === from && r.destination === to && r.date === date);\n          if (!route) {\n            console.log(`No route found for ${from}-${to} on ${date}`);\n            continue;\n          }\n          console.log(`Processing route ${from}-${to} for ${date}:`);\n          console.log(`Segment ID: ${route.ID}`);\n          try {\n            const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n              method: 'GET',\n              headers: {\n                'accept': 'application/json',\n                'Partner-Authorization': apiKey,\n                'Segment-ID': route.ID\n              }\n            });\n            if (!response.ok) {\n              throw new Error(`Failed to fetch flight details for ${from}-${to}`);\n            }\n            const data = await response.json();\n            const flights = processFlightData(data, timeWindow);\n            allFlights.push(...flights);\n          } catch (error) {\n            console.error(`Error processing segment ${from}-${to} for ${date}:`, error);\n          }\n        }\n\n        // Sort flights by departure time\n        allFlights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf());\n        let earliestArrival = null;\n        let latestArrival = null;\n        if (allFlights.length > 0) {\n          earliestArrival = dayjs(allFlights[0].ArrivesAt);\n          latestArrival = dayjs(allFlights[allFlights.length - 1].ArrivesAt);\n        }\n        processedSegments.push({\n          route: `${from}-${to}`,\n          flights: allFlights,\n          earliestArrival,\n          latestArrival\n        });\n      }\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\n    } catch (error) {\n      console.error('Error fetching segment details:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const resetDetails = () => {\n    setSelectedDates(null);\n    setApiKey('');\n    setSegmentDetails([]);\n  };\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    resetDetails\n  };\n}\n_s(useFlightDetails, \"eNL6x3p2kS9/dPwFDvdCZanJHcQ=\");","map":{"version":3,"names":["useState","dayjs","routeDetails","airlines","useFlightDetails","_s","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","_data$results","_data$results$","_data$results$$data","flights","rawFlights","results","length","start","end","filter","trip","FlightNumbers","Carriers","DepartsAt","ArrivesAt","Stops","departureTime","isValid","isAfter","isBefore","forEach","flightNumber","existingFlight","existingDeparture","arrivalTime","baseDayjs","departDayDiff","diff","arrivalDayDiff","aircraftName","Aircraft","includes","OriginAirport","DestinationAirport","aircraft","departs","arrives","economy","business","first","Cabin","toLowerCase","Object","values","handleDateSearch","currentRoute","processedSegments","i","prevSegment","arrivals","map","f","sort","b","valueOf","earliestArrival","latestArrival","add","dates","Set","currentDate","isSame","Array","allFlights","ID","response","fetch","method","headers","ok","Error","json","push","error","flatMap","segment","resetDetails"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport routeDetails from '../../../data/route_details.json';\r\nimport airlines from '../../../data/airlines';\r\n\r\nexport default function useFlightDetails() {\r\n  const [selectedDates, setSelectedDates] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [segmentDetails, setSegmentDetails] = useState([]);\r\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\r\n\r\n  const formatTime = (dateStr, baseDate) => {\r\n    const date = dayjs(dateStr);\r\n    const base = dayjs(baseDate);\r\n    \r\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\r\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\r\n    \r\n    const timeStr = date.format('HH:mm');\r\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\r\n  };\r\n\r\n  const getAirlineName = (code) => {\r\n    const airline = airlines.find(a => a.value === code);\r\n    return airline ? airline.label.replace(` (${code})`, '') : code;\r\n  };\r\n\r\n  const getSegmentDistance = (from, to) => {\r\n    const route = routeDetails.find(r => \r\n      r.origin === from && \r\n      r.destination === to\r\n    );\r\n\r\n    if (!route) {\r\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\r\n      return 1000;\r\n    }\r\n\r\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\r\n    return route.distance;\r\n  };\r\n\r\n  const processFlightData = (data, timeWindow) => {\r\n    const flights = {};\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    const rawFlights = data.results?.[0]?.data?.data || [];\r\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\r\n    \r\n    if (timeWindow) {\r\n      console.log('Time Window:', {\r\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\r\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\r\n      });\r\n    }\r\n    \r\n    rawFlights\r\n      .filter(trip => {\r\n        console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\r\n        console.log(`  Carrier: ${trip.Carriers}`);\r\n        console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\r\n        console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\r\n        \r\n        // Filter out non-direct flights\r\n        if (trip.Stops !== 0) {\r\n          console.log('  ❌ Skipped: Not a direct flight');\r\n          return false;\r\n        }\r\n        \r\n        // Filter out EK and FZ carriers\r\n        if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\r\n          console.log('  ❌ Skipped: Excluded carrier');\r\n          return false;\r\n        }\r\n        \r\n        if (timeWindow) {\r\n          const departureTime = dayjs(trip.DepartsAt);\r\n          const isValid = departureTime.isAfter(timeWindow.start) && \r\n                         departureTime.isBefore(timeWindow.end);\r\n          \r\n          if (!isValid) {\r\n            console.log('  ❌ Skipped: Outside time window');\r\n            console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\r\n          } else {\r\n            console.log('  ✓ Accepted: Within time window');\r\n          }\r\n          return isValid;\r\n        }\r\n        \r\n        console.log('  ✓ Accepted: No time window restrictions');\r\n        return true;\r\n      })\r\n      .forEach(trip => {\r\n        const flightNumber = trip.FlightNumbers;\r\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\r\n        const existingFlight = flights[flightNumber];\r\n\r\n        // If this is a duplicate flight, only keep the later one\r\n        if (existingFlight) {\r\n          const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\r\n          if (departureTime.isBefore(existingDeparture)) {\r\n            return; // Skip this one, keep the existing later flight\r\n          }\r\n        }\r\n\r\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\r\n        const baseDayjs = dayjs(baseDate);\r\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\r\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\r\n\r\n        // Process aircraft name\r\n        let aircraftName = trip.Aircraft[0];\r\n        if (aircraftName && aircraftName.includes('787')) {\r\n          aircraftName = 'Boeing 787-10';\r\n        }\r\n\r\n        flights[flightNumber] = {\r\n          from: trip.OriginAirport,\r\n          to: trip.DestinationAirport,\r\n          flightNumber: flightNumber,\r\n          airlines: getAirlineName(trip.Carriers),\r\n          aircraft: aircraftName,\r\n          departs: departDayDiff > 0 ? \r\n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \r\n            departureTime.format('HH:mm'),\r\n          arrives: arrivalDayDiff > 0 ? \r\n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \r\n            arrivalTime.format('HH:mm'),\r\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          economy: false,\r\n          business: false,\r\n          first: false\r\n        };\r\n        \r\n        switch(trip.Cabin.toLowerCase()) {\r\n          case 'economy':\r\n            flights[flightNumber].economy = true;\r\n            break;\r\n          case 'business':\r\n            flights[flightNumber].business = true;\r\n            break;\r\n          case 'first':\r\n            flights[flightNumber].first = true;\r\n            break;\r\n        }\r\n      });\r\n    \r\n    return Object.values(flights);\r\n  };\r\n\r\n  const handleDateSearch = async (currentRoute) => {\r\n    if (!selectedDates || !currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingSegments(true);\r\n    const processedSegments = [];\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    try {\r\n      // Process all segments\r\n      for (let i = 0; i < currentRoute.length - 1; i++) {\r\n        const from = currentRoute[i];\r\n        const to = currentRoute[i + 1];\r\n        const prevSegment = processedSegments[i - 1];\r\n        \r\n        let timeWindow = null;\r\n        if (prevSegment && prevSegment.flights.length > 0) {\r\n          // Calculate time window from previous segment\r\n          const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\r\n          arrivals.sort((a, b) => a.valueOf() - b.valueOf());\r\n          \r\n          const earliestArrival = arrivals[0];\r\n          const latestArrival = arrivals[arrivals.length - 1];\r\n          \r\n          timeWindow = {\r\n            start: earliestArrival,\r\n            end: latestArrival.add(24, 'hours')\r\n          };\r\n          \r\n          console.log('\\nTime Window for', `${from}-${to}:`);\r\n          console.log('From:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\r\n          console.log('To:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\r\n        }\r\n\r\n        // Get all required dates for this segment\r\n        const dates = new Set();\r\n        if (timeWindow) {\r\n          let currentDate = timeWindow.start;\r\n          while (currentDate.isBefore(timeWindow.end) || currentDate.isSame(timeWindow.end, 'day')) {\r\n            dates.add(currentDate.format('YYYY-MM-DD'));\r\n            currentDate = currentDate.add(1, 'day');\r\n          }\r\n        } else {\r\n          dates.add(baseDate);\r\n        }\r\n\r\n        console.log('\\nFetching dates for', `${from}-${to}:`, Array.from(dates));\r\n        \r\n        // Process each date\r\n        const allFlights = [];\r\n        for (const date of dates) {\r\n          const route = routeDetails.find(r => \r\n            r.origin === from && \r\n            r.destination === to &&\r\n            r.date === date\r\n          );\r\n\r\n          if (!route) {\r\n            console.log(`No route found for ${from}-${to} on ${date}`);\r\n            continue;\r\n          }\r\n\r\n          console.log(`Processing route ${from}-${to} for ${date}:`);\r\n          console.log(`Segment ID: ${route.ID}`);\r\n          \r\n          try {\r\n            const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\r\n              method: 'GET',\r\n              headers: {\r\n                'accept': 'application/json',\r\n                'Partner-Authorization': apiKey,\r\n                'Segment-ID': route.ID\r\n              }\r\n            });\r\n\r\n            if (!response.ok) {\r\n              throw new Error(`Failed to fetch flight details for ${from}-${to}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            const flights = processFlightData(data, timeWindow);\r\n            allFlights.push(...flights);\r\n          } catch (error) {\r\n            console.error(`Error processing segment ${from}-${to} for ${date}:`, error);\r\n          }\r\n        }\r\n\r\n        // Sort flights by departure time\r\n        allFlights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf());\r\n\r\n        let earliestArrival = null;\r\n        let latestArrival = null;\r\n\r\n        if (allFlights.length > 0) {\r\n          earliestArrival = dayjs(allFlights[0].ArrivesAt);\r\n          latestArrival = dayjs(allFlights[allFlights.length - 1].ArrivesAt);\r\n        }\r\n\r\n        processedSegments.push({\r\n          route: `${from}-${to}`,\r\n          flights: allFlights,\r\n          earliestArrival,\r\n          latestArrival\r\n        });\r\n      }\r\n\r\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\r\n    } catch (error) {\r\n      console.error('Error fetching segment details:', error);\r\n    } finally {\r\n      setIsLoadingSegments(false);\r\n    }\r\n  };\r\n\r\n  const resetDetails = () => {\r\n    setSelectedDates(null);\r\n    setApiKey('');\r\n    setSegmentDetails([]);\r\n  };\r\n\r\n  return {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    resetDetails\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}