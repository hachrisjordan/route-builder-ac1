{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nexport default function useFlightDetails() {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow) => {\n    var _data$results, _data$results$, _data$results$$data;\n    const flights = {};\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    const rawFlights = ((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : _data$results$$data.data) || [];\n    console.log(`  Processing ${rawFlights.length} raw flights`);\n    rawFlights.filter(trip => {\n      if (trip.Stops !== 0) {\n        console.log(`  Skipping flight with ${trip.Stops} stops`);\n        return false;\n      }\n\n      // Update departure time to use selected date\n      const originalDeparture = dayjs(trip.DepartsAt.replace('Z', ''));\n      const departureTime = dayjs(`${baseDate} ${originalDeparture.format('HH:mm')}`);\n      if (timeWindow) {\n        const isValid = departureTime.isAfter(timeWindow.earliestDeparture) && departureTime.isBefore(timeWindow.latestDeparture);\n        if (!isValid) {\n          console.log(`  Skipping flight outside time window: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n        }\n        return isValid;\n      }\n      return true;\n    }).forEach(trip => {\n      const flightNumber = trip.FlightNumbers;\n\n      // Update departure and arrival times to use selected date\n      const originalDeparture = dayjs(trip.DepartsAt.replace('Z', ''));\n      const originalArrival = dayjs(trip.ArrivesAt.replace('Z', ''));\n      const departureTime = dayjs(`${baseDate} ${originalDeparture.format('HH:mm')}`);\n      let arrivalTime = dayjs(`${baseDate} ${originalArrival.format('HH:mm')}`);\n\n      // If arrival time is before departure time, it must be next day\n      if (arrivalTime.isBefore(departureTime)) {\n        arrivalTime = arrivalTime.add(1, 'day');\n      }\n      const existingFlight = flights[flightNumber];\n      if (existingFlight) {\n        const existingDeparture = dayjs(existingFlight.DepartsAt);\n        if (departureTime.isBefore(existingDeparture)) {\n          return;\n        }\n      }\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(trip.Carriers),\n        aircraft: trip.Aircraft[0],\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const handleDateSearch = async currentRoute => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    const processedSegments = [];\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    try {\n      // Process all segments first\n      for (let i = 0; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        const prevSegment = processedSegments[i - 1];\n        let timeWindow = null;\n        if (prevSegment) {\n          if (prevSegment.flights.length === 0) {\n            const prevFrom = currentRoute[i - 1];\n            const prevTo = currentRoute[i];\n            const prevDistance = getSegmentDistance(prevFrom, prevTo);\n            const minConnectionHours = Math.ceil(prevDistance / 575);\n            const baseTime = prevSegment.earliestArrival || dayjs(baseDate);\n            const endTime = prevSegment.latestArrival || baseTime;\n            timeWindow = {\n              earliestDeparture: baseTime.add(minConnectionHours, 'hour'),\n              latestDeparture: endTime.add(24, 'hour').add(minConnectionHours, 'hour')\n            };\n          } else {\n            timeWindow = {\n              earliestDeparture: prevSegment.earliestArrival,\n              latestDeparture: prevSegment.latestArrival.add(24, 'hour')\n            };\n          }\n        }\n        const route = routeDetails.find(r => r.origin === from && r.destination === to);\n        if (!route) {\n          console.log(`No route found for ${from}-${to}`);\n          processedSegments.push({\n            flights: [],\n            earliestArrival: null,\n            latestArrival: null\n          });\n          continue;\n        }\n        console.log(`Processing route ${from}-${to}:`);\n        try {\n          const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n            method: 'GET',\n            headers: {\n              'accept': 'application/json',\n              'Partner-Authorization': apiKey,\n              'Segment-ID': route.ID\n            }\n          });\n          if (!response.ok) {\n            throw new Error(`Failed to fetch flight details for ${from}-${to}`);\n          }\n          const data = await response.json();\n          const flights = processFlightData(data, timeWindow);\n          let earliestArrival = null;\n          let latestArrival = null;\n          if (flights.length > 0) {\n            earliestArrival = dayjs(flights[0].ArrivesAt);\n            latestArrival = dayjs(flights[flights.length - 1].ArrivesAt);\n          }\n          processedSegments.push({\n            route: `${from}-${to}`,\n            flights,\n            earliestArrival,\n            latestArrival\n          });\n        } catch (error) {\n          console.error(`Error processing segment ${from}-${to}:`, error);\n          processedSegments.push({\n            flights: [],\n            earliestArrival: null,\n            latestArrival: null\n          });\n        }\n      }\n\n      // Temporarily disabled connection validation\n      // if (processedSegments.length >= 2 && processedSegments[1].flights.length > 0) {\n      //   ... disabled code ...\n      // }\n\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\n    } catch (error) {\n      console.error('Error fetching segment details:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const resetDetails = () => {\n    setSelectedDates(null);\n    setApiKey('');\n    setSegmentDetails([]);\n  };\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    resetDetails\n  };\n}\n_s(useFlightDetails, \"eNL6x3p2kS9/dPwFDvdCZanJHcQ=\");","map":{"version":3,"names":["useState","dayjs","routeDetails","airlines","useFlightDetails","_s","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","_data$results","_data$results$","_data$results$$data","flights","rawFlights","results","length","filter","trip","Stops","originalDeparture","DepartsAt","departureTime","isValid","isAfter","earliestDeparture","isBefore","latestDeparture","forEach","flightNumber","FlightNumbers","originalArrival","ArrivesAt","arrivalTime","add","existingFlight","existingDeparture","baseDayjs","departDayDiff","diff","arrivalDayDiff","OriginAirport","DestinationAirport","Carriers","aircraft","Aircraft","departs","arrives","economy","business","first","Cabin","toLowerCase","Object","values","handleDateSearch","currentRoute","processedSegments","i","prevSegment","prevFrom","prevTo","prevDistance","minConnectionHours","Math","ceil","baseTime","earliestArrival","endTime","latestArrival","push","response","fetch","ID","method","headers","ok","Error","json","error","flatMap","segment","resetDetails"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport routeDetails from '../../../data/route_details.json';\r\nimport airlines from '../../../data/airlines';\r\n\r\nexport default function useFlightDetails() {\r\n  const [selectedDates, setSelectedDates] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [segmentDetails, setSegmentDetails] = useState([]);\r\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\r\n\r\n  const formatTime = (dateStr, baseDate) => {\r\n    const date = dayjs(dateStr);\r\n    const base = dayjs(baseDate);\r\n    \r\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\r\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\r\n    \r\n    const timeStr = date.format('HH:mm');\r\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\r\n  };\r\n\r\n  const getAirlineName = (code) => {\r\n    const airline = airlines.find(a => a.value === code);\r\n    return airline ? airline.label.replace(` (${code})`, '') : code;\r\n  };\r\n\r\n  const getSegmentDistance = (from, to) => {\r\n    const route = routeDetails.find(r => \r\n      r.origin === from && \r\n      r.destination === to\r\n    );\r\n\r\n    if (!route) {\r\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\r\n      return 1000;\r\n    }\r\n\r\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\r\n    return route.distance;\r\n  };\r\n\r\n  const processFlightData = (data, timeWindow) => {\r\n    const flights = {};\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    const rawFlights = data.results?.[0]?.data?.data || [];\r\n    console.log(`  Processing ${rawFlights.length} raw flights`);\r\n    \r\n    rawFlights\r\n      .filter(trip => {\r\n        if (trip.Stops !== 0) {\r\n          console.log(`  Skipping flight with ${trip.Stops} stops`);\r\n          return false;\r\n        }\r\n        \r\n        // Update departure time to use selected date\r\n        const originalDeparture = dayjs(trip.DepartsAt.replace('Z', ''));\r\n        const departureTime = dayjs(`${baseDate} ${originalDeparture.format('HH:mm')}`);\r\n        \r\n        if (timeWindow) {\r\n          const isValid = departureTime.isAfter(timeWindow.earliestDeparture) && \r\n                         departureTime.isBefore(timeWindow.latestDeparture);\r\n          \r\n          if (!isValid) {\r\n            console.log(`  Skipping flight outside time window: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\r\n          }\r\n          return isValid;\r\n        }\r\n        \r\n        return true;\r\n      })\r\n      .forEach(trip => {\r\n        const flightNumber = trip.FlightNumbers;\r\n        \r\n        // Update departure and arrival times to use selected date\r\n        const originalDeparture = dayjs(trip.DepartsAt.replace('Z', ''));\r\n        const originalArrival = dayjs(trip.ArrivesAt.replace('Z', ''));\r\n        \r\n        const departureTime = dayjs(`${baseDate} ${originalDeparture.format('HH:mm')}`);\r\n        let arrivalTime = dayjs(`${baseDate} ${originalArrival.format('HH:mm')}`);\r\n        \r\n        // If arrival time is before departure time, it must be next day\r\n        if (arrivalTime.isBefore(departureTime)) {\r\n          arrivalTime = arrivalTime.add(1, 'day');\r\n        }\r\n\r\n        const existingFlight = flights[flightNumber];\r\n        if (existingFlight) {\r\n          const existingDeparture = dayjs(existingFlight.DepartsAt);\r\n          if (departureTime.isBefore(existingDeparture)) {\r\n            return;\r\n          }\r\n        }\r\n\r\n        const baseDayjs = dayjs(baseDate);\r\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\r\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\r\n\r\n        flights[flightNumber] = {\r\n          from: trip.OriginAirport,\r\n          to: trip.DestinationAirport,\r\n          flightNumber: flightNumber,\r\n          airlines: getAirlineName(trip.Carriers),\r\n          aircraft: trip.Aircraft[0],\r\n          departs: departDayDiff > 0 ? \r\n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \r\n            departureTime.format('HH:mm'),\r\n          arrives: arrivalDayDiff > 0 ? \r\n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \r\n            arrivalTime.format('HH:mm'),\r\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          economy: false,\r\n          business: false,\r\n          first: false\r\n        };\r\n        \r\n        switch(trip.Cabin.toLowerCase()) {\r\n          case 'economy':\r\n            flights[flightNumber].economy = true;\r\n            break;\r\n          case 'business':\r\n            flights[flightNumber].business = true;\r\n            break;\r\n          case 'first':\r\n            flights[flightNumber].first = true;\r\n            break;\r\n        }\r\n      });\r\n    \r\n    return Object.values(flights);\r\n  };\r\n\r\n  const handleDateSearch = async (currentRoute) => {\r\n    if (!selectedDates || !currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingSegments(true);\r\n    const processedSegments = [];\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    try {\r\n      // Process all segments first\r\n      for (let i = 0; i < currentRoute.length - 1; i++) {\r\n        const from = currentRoute[i];\r\n        const to = currentRoute[i + 1];\r\n        const prevSegment = processedSegments[i - 1];\r\n        \r\n        let timeWindow = null;\r\n        if (prevSegment) {\r\n          if (prevSegment.flights.length === 0) {\r\n            const prevFrom = currentRoute[i - 1];\r\n            const prevTo = currentRoute[i];\r\n            const prevDistance = getSegmentDistance(prevFrom, prevTo);\r\n            const minConnectionHours = Math.ceil(prevDistance / 575);\r\n            \r\n            const baseTime = prevSegment.earliestArrival || dayjs(baseDate);\r\n            const endTime = prevSegment.latestArrival || baseTime;\r\n            \r\n            timeWindow = {\r\n              earliestDeparture: baseTime.add(minConnectionHours, 'hour'),\r\n              latestDeparture: endTime.add(24, 'hour').add(minConnectionHours, 'hour')\r\n            };\r\n          } else {\r\n            timeWindow = {\r\n              earliestDeparture: prevSegment.earliestArrival,\r\n              latestDeparture: prevSegment.latestArrival.add(24, 'hour')\r\n            };\r\n          }\r\n        }\r\n\r\n        const route = routeDetails.find(r => \r\n          r.origin === from && \r\n          r.destination === to\r\n        );\r\n\r\n        if (!route) {\r\n          console.log(`No route found for ${from}-${to}`);\r\n          processedSegments.push({ flights: [], earliestArrival: null, latestArrival: null });\r\n          continue;\r\n        }\r\n\r\n        console.log(`Processing route ${from}-${to}:`);\r\n        \r\n        try {\r\n          const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'accept': 'application/json',\r\n              'Partner-Authorization': apiKey,\r\n              'Segment-ID': route.ID\r\n            }\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to fetch flight details for ${from}-${to}`);\r\n          }\r\n\r\n          const data = await response.json();\r\n          const flights = processFlightData(data, timeWindow);\r\n\r\n          let earliestArrival = null;\r\n          let latestArrival = null;\r\n\r\n          if (flights.length > 0) {\r\n            earliestArrival = dayjs(flights[0].ArrivesAt);\r\n            latestArrival = dayjs(flights[flights.length - 1].ArrivesAt);\r\n          }\r\n\r\n          processedSegments.push({\r\n            route: `${from}-${to}`,\r\n            flights,\r\n            earliestArrival,\r\n            latestArrival\r\n          });\r\n\r\n        } catch (error) {\r\n          console.error(`Error processing segment ${from}-${to}:`, error);\r\n          processedSegments.push({ flights: [], earliestArrival: null, latestArrival: null });\r\n        }\r\n      }\r\n\r\n      // Temporarily disabled connection validation\r\n      // if (processedSegments.length >= 2 && processedSegments[1].flights.length > 0) {\r\n      //   ... disabled code ...\r\n      // }\r\n\r\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\r\n    } catch (error) {\r\n      console.error('Error fetching segment details:', error);\r\n    } finally {\r\n      setIsLoadingSegments(false);\r\n    }\r\n  };\r\n\r\n  const resetDetails = () => {\r\n    setSelectedDates(null);\r\n    setApiKey('');\r\n    setSegmentDetails([]);\r\n  };\r\n\r\n  return {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    resetDetails\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}