{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nimport { getSegmentColumns } from '../segmentColumns';\nexport default function useFlightDetails(getColumns, initialCombinations = [], currentRoute = []) {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const combinationsRef = useRef([]);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    var _data$results, _data$results$, _data$results$$data, _data$results$$data$d, _data$results$$data$d2, _data$results2, _data$results2$, _data$results2$$data;\n    const flights = {};\n    const baseDate = dayjs(((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : (_data$results$$data$d = _data$results$$data.data) === null || _data$results$$data$d === void 0 ? void 0 : (_data$results$$data$d2 = _data$results$$data$d[0]) === null || _data$results$$data$d2 === void 0 ? void 0 : _data$results$$data$d2.DepartsAt) || new Date()).format('YYYY-MM-DD');\n    const rawFlights = ((_data$results2 = data.results) === null || _data$results2 === void 0 ? void 0 : (_data$results2$ = _data$results2[0]) === null || _data$results2$ === void 0 ? void 0 : (_data$results2$$data = _data$results2$.data) === null || _data$results2$$data === void 0 ? void 0 : _data$results2$$data.data) || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    rawFlights.filter(trip => {\n      // Remove the Z suffix when parsing times since they're actually local times\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n      console.log(`  Carrier: ${trip.Carriers}`);\n      console.log(`  Departs: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n      console.log(`  Arrives: ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\n\n      // Filter out non-direct flights\n      if (trip.Stops !== 0) {\n        console.log('  ❌ Skipped: Not a direct flight');\n        return false;\n      }\n\n      // Filter out EK and FZ carriers\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log('  ❌ Skipped: Excluded carrier');\n        return false;\n      }\n      if (timeWindow) {\n        const isValid = departureTime.isAfter(timeWindow.start) && departureTime.isBefore(timeWindow.end);\n        if (!isValid) {\n          console.log('  ❌ Skipped: Outside time window');\n          console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n        } else {\n          console.log('  ✓ Accepted: Within time window');\n        }\n        return isValid;\n      }\n      console.log('  ✓ Accepted: No time window restrictions');\n      return true;\n    }).forEach(trip => {\n      // Remove the Z suffix when parsing times since they're actually local times\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n\n      // Convert CL carrier and flight numbers to LH\n      const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n      const flightNumber = trip.FlightNumbers.startsWith('CL') ? `LH${trip.FlightNumbers.slice(2)}` : trip.FlightNumbers;\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n      // If flight already exists, merge cabin classes\n      if (flights[flightNumber]) {\n        switch (trip.Cabin.toLowerCase()) {\n          case 'economy':\n            flights[flightNumber].economy = true;\n            break;\n          case 'business':\n            flights[flightNumber].business = true;\n            break;\n          case 'first':\n            flights[flightNumber].first = true;\n            break;\n        }\n        return; // Skip creating new flight entry\n      }\n\n      // Process aircraft name and create new flight entry\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName && aircraftName === '787  All') {\n        aircraftName = 'Boeing 787-10';\n      }\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(carrier),\n        aircraft: aircraftName,\n        duration: trip.TotalDuration,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false,\n        isSelected: false,\n        distance: parseInt(trip.Distance) || getSegmentDistance(trip.OriginAirport, trip.DestinationAirport),\n        segmentIndex: segmentIndex\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && date.isBefore(end.add(1, 'day'));\n  };\n  const handleDateSearch = async (startDate, endDate, stopoverInfo) => {\n    if (!startDate || !endDate || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    setIsLoadingAvailability(true);\n    setSelectedFlights({});\n    try {\n      // Log stopover information\n      if (stopoverInfo) {\n        console.log('\\nApplying stopover:', stopoverInfo);\n      }\n      const newProcessedSegments = [];\n      console.log('\\n=== Processing Segments with Stopover ===');\n      if (stopoverInfo) {\n        console.log('Stopover Details:', {\n          airport: stopoverInfo.airport,\n          days: stopoverInfo.days\n        });\n      }\n\n      // Process all segments\n      for (let i = 0; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n        let timeWindow = null;\n        const dates = new Set();\n        if (i === 0) {\n          // First segment - use full date range\n          const startDay = dayjs(startDate).startOf('day');\n          const endDay = dayjs(endDate).endOf('day');\n          console.log('\\n=== First Segment Details ===');\n          console.log('Time Window: 00:00 on first date to 23:59 on last date');\n          console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n          console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n          timeWindow = {\n            start: startDay,\n            end: endDay,\n            isStopover: false\n          };\n\n          // Get all dates in range\n          for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n            dates.add(d.format('YYYY-MM-DD'));\n          }\n        } else {\n          // Handle subsequent segments with stopover consideration\n          const prevSegment = newProcessedSegments[i - 1];\n          if (!prevSegment || prevSegment.flights.length === 0) {\n            // Use full date range if no previous flights\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            timeWindow = {\n              start: startDay,\n              end: endDay,\n              isStopover: false\n            };\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n            console.log('No previous flights found. Using full date range for this segment');\n          } else {\n            // Calculate time window from previous segment's flights\n            const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n            arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n\n            // Check if this segment starts from the stopover airport\n            const isAfterStopover = stopoverInfo && from === stopoverInfo.airport;\n            if (isAfterStopover) {\n              console.log(`\\nApplying stopover of ${stopoverInfo.days} days at ${stopoverInfo.airport}`);\n              timeWindow = {\n                start: arrivals[0].add(stopoverInfo.days, 'days'),\n                end: arrivals[arrivals.length - 1].add(stopoverInfo.days, 'days').add(24, 'hours'),\n                isStopover: true,\n                stopoverDays: stopoverInfo.days\n              };\n            } else {\n              timeWindow = {\n                start: arrivals[0].add(1, 'hour'),\n                // Minimum 1-hour connection\n                end: arrivals[arrivals.length - 1].add(24, 'hours'),\n                isStopover: false\n              };\n            }\n\n            // Get dates for time window\n            for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n            console.log('\\nTime Window:', {\n              start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n              end: timeWindow.end.format('YYYY-MM-DD HH:mm'),\n              isStopover: timeWindow.isStopover,\n              stopoverDays: timeWindow.stopoverDays\n            });\n          }\n        }\n\n        // Process each date\n        const allFlights = [];\n        for (const date of dates) {\n          // Find route from availability data instead\n          const availableRoutes = availabilityData[date] || [];\n          const route = availableRoutes.find(r => r.route === `${from}-${to}`);\n          if (!route) {\n            console.log(`No route found for ${from}-${to} on ${date}`);\n            continue;\n          }\n          console.log(`\\nFetching ${from}-${to} for ${date}:`);\n          console.log(`Segment ID: ${route.ID}`);\n          try {\n            const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n              method: 'GET',\n              headers: {\n                'accept': 'application/json',\n                'Partner-Authorization': apiKey,\n                'Segment-ID': route.ID\n              }\n            });\n            if (!response.ok) {\n              console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n              continue;\n            }\n            const data = await response.json();\n            const processedFlights = processFlightData(data, timeWindow, i);\n            console.log(`✓ Found ${processedFlights.length} valid flights`);\n            allFlights.push(...processedFlights);\n          } catch (error) {\n            console.error(`Error processing ${from}-${to} for ${date}:`, error);\n          }\n        }\n        console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n        // Store searched dates and time window in segment data\n        newProcessedSegments[i] = {\n          route: `${from}-${to}`,\n          flights: allFlights,\n          searchDates: dates,\n          timeWindow: timeWindow,\n          earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n          latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n        };\n\n        // Only break if previous segment had flights but current segment found none\n        if (allFlights.length === 0 && i > 0 && newProcessedSegments[i - 1].flights.length > 0) {\n          console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n          console.log('Skipping remaining segments');\n          break;\n        }\n      }\n\n      // After processing all segments\n      if (newProcessedSegments.length >= 1) {\n        // Log all flights found by segment\n        console.log('\\n=== All Flights Found ===');\n        newProcessedSegments.forEach((segment, index) => {\n          if (segment.flights && segment.flights.length > 0) {\n            console.log(`\\nSegment ${index} (${segment.route}):`);\n            segment.flights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n              console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft}`);\n            });\n          } else {\n            console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\n          }\n        });\n        console.log('\\n=== Flight Combinations ===');\n\n        // Find the first and last segments with flights\n        const firstSegmentWithFlights = newProcessedSegments.findIndex(segment => segment.flights && segment.flights.length > 0);\n        const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(segment => segment.flights && segment.flights.length > 0);\n        const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n        console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n        console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n        // Find all valid combinations recursively\n        const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n          // If we've reached beyond the last valid segment, this is a valid combination\n          if (segmentIndex > lastSegmentIndex) {\n            return [currentPath];\n          }\n          const validCombos = [];\n          const currentSegment = newProcessedSegments[segmentIndex];\n\n          // If no flights in current segment, try next segment\n          if (!(currentSegment !== null && currentSegment !== void 0 && currentSegment.flights) || currentSegment.flights.length === 0) {\n            return findValidCombinations(currentPath, segmentIndex + 1);\n          }\n\n          // For first segment, try all flights\n          if (currentPath.length === 0) {\n            currentSegment.flights.forEach(flight => {\n              const combos = findValidCombinations([flight], segmentIndex + 1);\n              validCombos.push(...combos);\n            });\n          } else {\n            // For subsequent segments, check connection times\n            const prevFlight = currentPath[currentPath.length - 1];\n            const prevArrival = dayjs(prevFlight.ArrivesAt);\n            currentSegment.flights.forEach(flight => {\n              const departure = dayjs(flight.DepartsAt);\n              const connectionTime = departure.diff(prevArrival, 'minutes');\n\n              // Check if departure is within 24 hours of arrival and at least 1 hour connection\n              if (connectionTime >= 60 && connectionTime <= 24 * 60) {\n                const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              }\n            });\n          }\n          return validCombos;\n        };\n\n        // Get all valid combinations using the new function\n        const allCombinations = findValidCombinations();\n\n        // Store combinations in ref immediately after finding them\n        combinationsRef.current = allCombinations;\n\n        // Log the combinations\n        console.log('\\n=== Valid Combinations ===');\n        if (allCombinations.length === 0) {\n          console.log('No valid combinations found for any segment range');\n        } else {\n          console.log(`Found ${allCombinations.length} valid combinations`);\n          allCombinations.forEach(combo => {\n            const flightInfo = combo.map((flight, idx) => {\n              if (idx === 0) {\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n              }\n              const prevFlight = combo[idx - 1];\n              const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n              const hours = Math.floor(connectionTime / 60);\n              const minutes = connectionTime % 60;\n              return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n            });\n            console.log(flightInfo.join(' → '));\n          });\n        }\n\n        // Create a map of valid flights by segment\n        const validFlightsBySegment = new Map();\n        allCombinations.forEach(combo => {\n          combo.forEach(flight => {\n            const segmentKey = flight.segmentIndex;\n            if (!validFlightsBySegment.has(segmentKey)) {\n              validFlightsBySegment.set(segmentKey, new Set());\n            }\n            validFlightsBySegment.get(segmentKey).add(`${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n          });\n        });\n\n        // Filter and process flights\n        const filteredFlights = [];\n        for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n          const segment = newProcessedSegments[i];\n          if (!segment || !segment.flights) continue;\n          const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n\n          // Add valid flights from this segment\n          segment.flights.forEach(flight => {\n            const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n            if (validFlightsForSegment.has(flightKey)) {\n              filteredFlights.push({\n                ...flight,\n                isSelected: false,\n                segmentIndex: i\n              });\n            }\n          });\n        }\n        setSegmentDetails(filteredFlights);\n        setValidCombinations(allCombinations);\n\n        // Log flights by segment\n        console.log('\\n=== Flights By Segment ===');\n        for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n          const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n          if (segmentFlights.length > 0) {\n            console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n            segmentFlights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n              console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n            });\n          }\n        }\n        console.log('\\n======================');\n      } else {\n        setSegmentDetails(newProcessedSegments.flatMap((segment, index) => segment.flights.map(flight => ({\n          ...flight,\n          isSelected: false,\n          segmentIndex: index\n        }))));\n        setValidCombinations([]);\n      }\n    } catch (error) {\n      console.error('Error processing segments:', error);\n    } finally {\n      setIsLoadingSegments(false);\n      setIsLoadingAvailability(false);\n    }\n  };\n  const handleCalendarSearch = async currentRoute => {\n    if (!currentRoute || !apiKey) return;\n    setIsLoadingAvailability(true);\n    setSelectedFlights({});\n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n      const availabilityResponse = await fetch(`https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      });\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n\n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance,\n            date: item.date\n          });\n        });\n        setAvailabilityData(processedAvailability);\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n  const resetDetails = () => {\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n  };\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    setSelectedFlights(prevSelected => {\n      var _newSelected$segmentI, _newSelected$segmentI2;\n      const newSelected = {\n        ...prevSelected\n      };\n\n      // Check if this exact flight is already selected\n      const isCurrentlySelected = (_newSelected$segmentI = newSelected[segmentIndex]) === null || _newSelected$segmentI === void 0 ? void 0 : (_newSelected$segmentI2 = _newSelected$segmentI.some) === null || _newSelected$segmentI2 === void 0 ? void 0 : _newSelected$segmentI2.call(_newSelected$segmentI, f => {\n        const matches = f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Log all current selections\n      console.log('\\nALL CURRENT SELECTIONS:');\n      Object.entries(newSelected).forEach(([idx, flights]) => {\n        if (Array.isArray(flights)) {\n          flights.forEach(f => {\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          });\n        }\n      });\n\n      // Use combinations from the ref\n      const currentCombos = combinationsRef.current;\n      const firstSegmentWithFlights = Math.min(...segmentDetails.filter(f => !f.hidden).map(f => f.segmentIndex));\n      console.log('\\nChecking combinations:', currentCombos.map(combo => combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')));\n\n      // Find combinations that contain the selected flight(s)\n      const validCombos = currentCombos.filter(combo => {\n        // If no selections, all combinations are valid\n        if (Object.keys(newSelected).length === 0) return true;\n\n        // Check if this combination contains all selected flights\n        const isValid = Object.entries(newSelected).every(([segIdx, flights]) => {\n          const selectedFlight = flights[0];\n          // Adjust index based on first segment with flights\n          const comboIndex = parseInt(segIdx, 10) - firstSegmentWithFlights;\n          const comboFlight = combo[comboIndex];\n          const matches = (comboFlight === null || comboFlight === void 0 ? void 0 : comboFlight.flightNumber) === selectedFlight.flightNumber && dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm') === dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm');\n          console.log(`Checking combo flight in segment ${segIdx}:`, {\n            selected: `${selectedFlight.flightNumber} (${dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm')})`,\n            combo: comboFlight ? `${comboFlight.flightNumber} (${dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm')})` : 'none',\n            comboIndex,\n            matches\n          });\n          return matches;\n        });\n        return isValid;\n      });\n      console.log('\\nValid combinations:', validCombos.map(combo => combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')));\n\n      // Create a set of all flights that appear in valid combinations\n      const validFlights = new Set();\n      validCombos.forEach(combo => {\n        combo.forEach(f => {\n          if (!f) return;\n          const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          validFlights.add(key);\n        });\n      });\n\n      // Update visibility\n      setSegmentDetails(prevDetails => prevDetails.map(f => {\n        var _newSelected$f$segmen;\n        const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n        const isSelected = ((_newSelected$f$segmen = newSelected[f.segmentIndex]) === null || _newSelected$f$segmen === void 0 ? void 0 : _newSelected$f$segmen.some(sf => sf.flightNumber === f.flightNumber && dayjs(sf.DepartsAt).format('MM-DD HH:mm') === dayjs(f.DepartsAt).format('MM-DD HH:mm'))) || false;\n        return {\n          ...f,\n          isSelected,\n          hidden: Object.keys(newSelected).length > 0 && !isSelected && !validFlights.has(flightKey)\n        };\n      }));\n      return newSelected;\n    });\n  };\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => combo.map((f, idx) => ({\n        ...f,\n        isSelected: false,\n        segmentIndex: idx\n      })));\n      const uniqueFlights = Array.from(new Map(allFlights.map(f => [`${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`, f])).values());\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability\n  };\n}\n_s(useFlightDetails, \"PUUY+UrheOSZCZOxQSBJwrORadg=\");","map":{"version":3,"names":["useState","useEffect","useRef","useMemo","dayjs","routeDetails","airlines","getSegmentColumns","useFlightDetails","getColumns","initialCombinations","currentRoute","_s","selectedDates","setSelectedDates","apiKey","setApiKey","localStorage","getItem","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","selectedFlights","setSelectedFlights","validCombinations","setValidCombinations","processedSegments","setProcessedSegments","originalFlights","setOriginalFlights","originalCombinations","processedFlights","setProcessedFlights","initialFlights","setInitialFlights","availabilityData","setAvailabilityData","isLoadingAvailability","setIsLoadingAvailability","combinationsRef","setItem","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","segmentIndex","_data$results","_data$results$","_data$results$$data","_data$results$$data$d","_data$results$$data$d2","_data$results2","_data$results2$","_data$results2$$data","flights","results","DepartsAt","Date","rawFlights","length","start","end","filter","trip","departureTime","arrivalTime","ArrivesAt","FlightNumbers","Carriers","Stops","isValid","isAfter","isBefore","forEach","carrier","flightNumber","startsWith","slice","baseDayjs","departDayDiff","diff","arrivalDayDiff","Cabin","toLowerCase","economy","business","first","aircraftName","Aircraft","OriginAirport","DestinationAirport","aircraft","duration","TotalDuration","departs","arrives","isSelected","parseInt","Distance","Object","values","isDateInRange","dateRange","subtract","add","handleDateSearch","startDate","endDate","stopoverInfo","newProcessedSegments","airport","days","i","dates","Set","startDay","startOf","endDay","endOf","isStopover","d","valueOf","prevSegment","arrivals","map","f","sort","b","isAfterStopover","stopoverDays","allFlights","availableRoutes","ID","response","fetch","method","headers","ok","json","push","error","searchDates","earliestArrival","latestArrival","segment","index","flight","firstSegmentWithFlights","findIndex","lastSegmentWithFlights","reverse","lastSegmentIndex","findValidCombinations","currentPath","validCombos","currentSegment","combos","prevFlight","prevArrival","departure","connectionTime","allCombinations","current","combo","flightInfo","idx","hours","Math","floor","minutes","toString","padStart","join","validFlightsBySegment","Map","segmentKey","has","set","get","filteredFlights","validFlightsForSegment","flightKey","segmentFlights","flatMap","handleCalendarSearch","routeString","availabilityResponse","availabilityResult","processedAvailability","item","dateKey","originAirport","destinationAirport","classes","Y","YDirect","J","JDirect","F","FDirect","resetDetails","handleFlightSelect","prevSelected","_newSelected$segmentI","_newSelected$segmentI2","newSelected","isCurrentlySelected","some","call","matches","isSame","keep","entries","Array","isArray","currentCombos","min","hidden","keys","every","segIdx","selectedFlight","comboIndex","comboFlight","selected","validFlights","key","prevDetails","_newSelected$f$segmen","sf","columns","uniqueFlights"],"sources":["/Users/hanguyen/Desktop/route-builder-ac/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nimport { getSegmentColumns } from '../segmentColumns';\n\nexport default function useFlightDetails(getColumns, initialCombinations = [], currentRoute = []) {\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const combinationsRef = useRef([]);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n    \n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    \n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n\n  const getAirlineName = (code) => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => \n      r.origin === from && \n      r.destination === to\n    );\n\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    const flights = {};\n    const baseDate = dayjs(data.results?.[0]?.data?.data?.[0]?.DepartsAt || new Date()).format('YYYY-MM-DD');\n    \n    const rawFlights = data.results?.[0]?.data?.data || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    \n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    \n    rawFlights\n      .filter(trip => {\n        // Remove the Z suffix when parsing times since they're actually local times\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n        \n        console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n        console.log(`  Carrier: ${trip.Carriers}`);\n        console.log(`  Departs: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n        console.log(`  Arrives: ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\n        \n        // Filter out non-direct flights\n        if (trip.Stops !== 0) {\n          console.log('  ❌ Skipped: Not a direct flight');\n          return false;\n        }\n        \n        // Filter out EK and FZ carriers\n        if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n          console.log('  ❌ Skipped: Excluded carrier');\n          return false;\n        }\n        \n        if (timeWindow) {\n          const isValid = departureTime.isAfter(timeWindow.start) && \n                         departureTime.isBefore(timeWindow.end);\n          \n          if (!isValid) {\n            console.log('  ❌ Skipped: Outside time window');\n            console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n          } else {\n            console.log('  ✓ Accepted: Within time window');\n          }\n          return isValid;\n        }\n        \n        console.log('  ✓ Accepted: No time window restrictions');\n        return true;\n      })\n      .forEach(trip => {\n        // Remove the Z suffix when parsing times since they're actually local times\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); \n\n        // Convert CL carrier and flight numbers to LH\n        const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n        const flightNumber = trip.FlightNumbers.startsWith('CL') \n          ? `LH${trip.FlightNumbers.slice(2)}` \n          : trip.FlightNumbers;\n\n        const baseDayjs = dayjs(baseDate);\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n        // If flight already exists, merge cabin classes\n        if (flights[flightNumber]) {\n          switch(trip.Cabin.toLowerCase()) {\n            case 'economy':\n              flights[flightNumber].economy = true;\n              break;\n            case 'business':\n              flights[flightNumber].business = true;\n              break;\n            case 'first':\n              flights[flightNumber].first = true;\n              break;\n          }\n          return; // Skip creating new flight entry\n        }\n\n        // Process aircraft name and create new flight entry\n        let aircraftName = trip.Aircraft[0];\n        if (aircraftName && aircraftName === '787  All') {\n          aircraftName = 'Boeing 787-10';\n        }\n\n        flights[flightNumber] = {\n          from: trip.OriginAirport,\n          to: trip.DestinationAirport,\n          flightNumber: flightNumber,\n          airlines: getAirlineName(carrier),\n          aircraft: aircraftName,\n          duration: trip.TotalDuration,\n          departs: departDayDiff > 0 ? \n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \n            departureTime.format('HH:mm'),\n          arrives: arrivalDayDiff > 0 ? \n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \n            arrivalTime.format('HH:mm'),\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n          economy: false,\n          business: false,\n          first: false,\n          isSelected: false,\n          distance: parseInt(trip.Distance) || getSegmentDistance(trip.OriginAirport, trip.DestinationAirport),\n          segmentIndex: segmentIndex\n        };\n        \n        switch(trip.Cabin.toLowerCase()) {\n          case 'economy':\n            flights[flightNumber].economy = true;\n            break;\n          case 'business':\n            flights[flightNumber].business = true;\n            break;\n          case 'first':\n            flights[flightNumber].first = true;\n            break;\n        }\n      });\n    \n    return Object.values(flights);\n  };\n\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && \n           date.isBefore(end.add(1, 'day'));\n  };\n\n  const handleDateSearch = async (startDate, endDate, stopoverInfo) => {\n    if (!startDate || !endDate || !currentRoute || !apiKey) return;\n    \n    setIsLoadingSegments(true);\n    setIsLoadingAvailability(true);\n    setSelectedFlights({});\n    \n    try {\n      // Log stopover information\n      if (stopoverInfo) {\n        console.log('\\nApplying stopover:', stopoverInfo);\n      }\n\n      const newProcessedSegments = [];\n      \n      console.log('\\n=== Processing Segments with Stopover ===');\n      if (stopoverInfo) {\n        console.log('Stopover Details:', {\n          airport: stopoverInfo.airport,\n          days: stopoverInfo.days\n        });\n      }\n\n      // Process all segments\n      for (let i = 0; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        \n        console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n        \n        let timeWindow = null;\n        const dates = new Set();\n\n        if (i === 0) {\n          // First segment - use full date range\n          const startDay = dayjs(startDate).startOf('day');\n          const endDay = dayjs(endDate).endOf('day');\n          \n          console.log('\\n=== First Segment Details ===');\n          console.log('Time Window: 00:00 on first date to 23:59 on last date');\n          console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n          console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n          \n          timeWindow = {\n            start: startDay,\n            end: endDay,\n            isStopover: false\n          };\n          \n          // Get all dates in range\n          for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n            dates.add(d.format('YYYY-MM-DD'));\n          }\n        } else {\n          // Handle subsequent segments with stopover consideration\n          const prevSegment = newProcessedSegments[i - 1];\n          \n          if (!prevSegment || prevSegment.flights.length === 0) {\n            // Use full date range if no previous flights\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            timeWindow = {\n              start: startDay,\n              end: endDay,\n              isStopover: false\n            };\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n            console.log('No previous flights found. Using full date range for this segment');\n          } else {\n            // Calculate time window from previous segment's flights\n            const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n            arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n            \n            // Check if this segment starts from the stopover airport\n            const isAfterStopover = stopoverInfo && from === stopoverInfo.airport;\n            \n            if (isAfterStopover) {\n              console.log(`\\nApplying stopover of ${stopoverInfo.days} days at ${stopoverInfo.airport}`);\n              timeWindow = {\n                start: arrivals[0].add(stopoverInfo.days, 'days'),\n                end: arrivals[arrivals.length - 1].add(stopoverInfo.days, 'days').add(24, 'hours'),\n                isStopover: true,\n                stopoverDays: stopoverInfo.days\n              };\n            } else {\n              timeWindow = {\n                start: arrivals[0].add(1, 'hour'),  // Minimum 1-hour connection\n                end: arrivals[arrivals.length - 1].add(24, 'hours'),\n                isStopover: false\n              };\n            }\n            \n            // Get dates for time window\n            for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n            \n            console.log('\\nTime Window:', {\n              start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n              end: timeWindow.end.format('YYYY-MM-DD HH:mm'),\n              isStopover: timeWindow.isStopover,\n              stopoverDays: timeWindow.stopoverDays\n            });\n          }\n        }\n\n        // Process each date\n        const allFlights = [];\n        for (const date of dates) {\n          // Find route from availability data instead\n          const availableRoutes = availabilityData[date] || [];\n          const route = availableRoutes.find(r => \n            r.route === `${from}-${to}`\n          );\n\n          if (!route) {\n            console.log(`No route found for ${from}-${to} on ${date}`);\n            continue;\n          }\n\n          console.log(`\\nFetching ${from}-${to} for ${date}:`);\n          console.log(`Segment ID: ${route.ID}`);\n          \n          try {\n            const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n              method: 'GET',\n              headers: {\n                'accept': 'application/json',\n                'Partner-Authorization': apiKey,\n                'Segment-ID': route.ID\n              }\n            });\n\n            if (!response.ok) {\n              console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n              continue;\n            }\n\n            const data = await response.json();\n            const processedFlights = processFlightData(data, timeWindow, i);\n            console.log(`✓ Found ${processedFlights.length} valid flights`);\n            allFlights.push(...processedFlights);\n          } catch (error) {\n            console.error(`Error processing ${from}-${to} for ${date}:`, error);\n          }\n        }\n\n        console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n        // Store searched dates and time window in segment data\n        newProcessedSegments[i] = {\n          route: `${from}-${to}`,\n          flights: allFlights,\n          searchDates: dates,\n          timeWindow: timeWindow,\n          earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n          latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n        };\n\n        // Only break if previous segment had flights but current segment found none\n        if (allFlights.length === 0 && i > 0 && newProcessedSegments[i-1].flights.length > 0) {\n          console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n          console.log('Skipping remaining segments');\n          break;\n        }\n      }\n\n      // After processing all segments\n      if (newProcessedSegments.length >= 1) {\n        // Log all flights found by segment\n        console.log('\\n=== All Flights Found ===');\n        newProcessedSegments.forEach((segment, index) => {\n          if (segment.flights && segment.flights.length > 0) {\n            console.log(`\\nSegment ${index} (${segment.route}):`);\n            segment.flights\n              .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\n              .forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft}`);\n              });\n          } else {\n            console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\n          }\n        });\n\n        console.log('\\n=== Flight Combinations ===');\n        \n        // Find the first and last segments with flights\n        const firstSegmentWithFlights = newProcessedSegments.findIndex(\n          segment => segment.flights && segment.flights.length > 0\n        );\n        \n        const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(\n          segment => segment.flights && segment.flights.length > 0\n        );\n        const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n\n        console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n        console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n        // Find all valid combinations recursively\n        const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n          // If we've reached beyond the last valid segment, this is a valid combination\n          if (segmentIndex > lastSegmentIndex) {\n            return [currentPath];\n          }\n\n          const validCombos = [];\n          const currentSegment = newProcessedSegments[segmentIndex];\n\n          // If no flights in current segment, try next segment\n          if (!currentSegment?.flights || currentSegment.flights.length === 0) {\n            return findValidCombinations(currentPath, segmentIndex + 1);\n          }\n\n          // For first segment, try all flights\n          if (currentPath.length === 0) {\n            currentSegment.flights.forEach(flight => {\n              const combos = findValidCombinations([flight], segmentIndex + 1);\n              validCombos.push(...combos);\n            });\n          } else {\n            // For subsequent segments, check connection times\n            const prevFlight = currentPath[currentPath.length - 1];\n            const prevArrival = dayjs(prevFlight.ArrivesAt);\n\n            currentSegment.flights.forEach(flight => {\n              const departure = dayjs(flight.DepartsAt);\n              const connectionTime = departure.diff(prevArrival, 'minutes');\n\n              // Check if departure is within 24 hours of arrival and at least 1 hour connection\n              if (connectionTime >= 60 && connectionTime <= 24 * 60) {\n                const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              }\n            });\n          }\n\n          return validCombos;\n        };\n\n        // Get all valid combinations using the new function\n        const allCombinations = findValidCombinations();\n\n        // Store combinations in ref immediately after finding them\n        combinationsRef.current = allCombinations;\n\n        // Log the combinations\n        console.log('\\n=== Valid Combinations ===');\n        if (allCombinations.length === 0) {\n          console.log('No valid combinations found for any segment range');\n        } else {\n          console.log(`Found ${allCombinations.length} valid combinations`);\n          allCombinations.forEach(combo => {\n            const flightInfo = combo.map((flight, idx) => {\n              if (idx === 0) {\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n              }\n              \n              const prevFlight = combo[idx - 1];\n              const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n              const hours = Math.floor(connectionTime / 60);\n              const minutes = connectionTime % 60;\n              return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n            });\n            \n            console.log(flightInfo.join(' → '));\n          });\n        }\n\n        // Create a map of valid flights by segment\n        const validFlightsBySegment = new Map();\n        allCombinations.forEach(combo => {\n          combo.forEach(flight => {\n            const segmentKey = flight.segmentIndex;\n            if (!validFlightsBySegment.has(segmentKey)) {\n              validFlightsBySegment.set(segmentKey, new Set());\n            }\n            validFlightsBySegment.get(segmentKey).add(\n              `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`\n            );\n          });\n        });\n\n        // Filter and process flights\n        const filteredFlights = [];\n        for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n          const segment = newProcessedSegments[i];\n          if (!segment || !segment.flights) continue;\n\n          const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n          \n          // Add valid flights from this segment\n          segment.flights.forEach(flight => {\n            const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n            if (validFlightsForSegment.has(flightKey)) {\n              filteredFlights.push({\n                ...flight,\n                isSelected: false,\n                segmentIndex: i\n              });\n            }\n          });\n        }\n\n        setSegmentDetails(filteredFlights);\n        setValidCombinations(allCombinations);\n\n        // Log flights by segment\n        console.log('\\n=== Flights By Segment ===');\n        for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n          const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n          if (segmentFlights.length > 0) {\n            console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n            segmentFlights\n              .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\n              .forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n              });\n          }\n        }\n        \n        console.log('\\n======================');\n      } else {\n        setSegmentDetails(newProcessedSegments.flatMap((segment, index) => \n          segment.flights.map(flight => ({\n            ...flight,\n            isSelected: false,\n            segmentIndex: index\n          }))\n        ));\n        setValidCombinations([]);\n      }\n    } catch (error) {\n      console.error('Error processing segments:', error);\n    } finally {\n      setIsLoadingSegments(false);\n      setIsLoadingAvailability(false);\n    }\n  };\n\n  const handleCalendarSearch = async (currentRoute) => {\n    if (!currentRoute || !apiKey) return;\n    \n    setIsLoadingAvailability(true);\n    setSelectedFlights({});\n    \n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n      const availabilityResponse = await fetch(\n        `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`,\n        {\n          method: 'GET',\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        }\n      );\n\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n        \n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          \n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance,\n            date: item.date\n          });\n        });\n        \n        setAvailabilityData(processedAvailability);\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n\n  const resetDetails = () => {\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n  };\n\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    \n    setSelectedFlights(prevSelected => {\n      const newSelected = { ...prevSelected };\n      \n      // Check if this exact flight is already selected\n      const isCurrentlySelected = newSelected[segmentIndex]?.some?.(f => {\n        const matches = f.flightNumber === flight.flightNumber && \n                       dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && \n                        dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Log all current selections\n      console.log('\\nALL CURRENT SELECTIONS:');\n      Object.entries(newSelected).forEach(([idx, flights]) => {\n        if (Array.isArray(flights)) {\n          flights.forEach(f => {\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          });\n        }\n      });\n\n      // Use combinations from the ref\n      const currentCombos = combinationsRef.current;\n      const firstSegmentWithFlights = Math.min(...segmentDetails\n        .filter(f => !f.hidden)\n        .map(f => f.segmentIndex));\n      \n      console.log('\\nChecking combinations:', currentCombos.map(combo => \n        combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')\n      ));\n\n      // Find combinations that contain the selected flight(s)\n      const validCombos = currentCombos.filter(combo => {\n        // If no selections, all combinations are valid\n        if (Object.keys(newSelected).length === 0) return true;\n\n        // Check if this combination contains all selected flights\n        const isValid = Object.entries(newSelected).every(([segIdx, flights]) => {\n          const selectedFlight = flights[0];\n          // Adjust index based on first segment with flights\n          const comboIndex = parseInt(segIdx, 10) - firstSegmentWithFlights;\n          const comboFlight = combo[comboIndex];\n          \n          const matches = comboFlight?.flightNumber === selectedFlight.flightNumber &&\n                         dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm') === \n                         dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm');\n          \n          console.log(`Checking combo flight in segment ${segIdx}:`, {\n            selected: `${selectedFlight.flightNumber} (${dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm')})`,\n            combo: comboFlight ? `${comboFlight.flightNumber} (${dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm')})` : 'none',\n            comboIndex,\n            matches\n          });\n          \n          return matches;\n        });\n\n        return isValid;\n      });\n\n      console.log('\\nValid combinations:', validCombos.map(combo => \n        combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')\n      ));\n\n      // Create a set of all flights that appear in valid combinations\n      const validFlights = new Set();\n      validCombos.forEach(combo => {\n        combo.forEach(f => {\n          if (!f) return;\n          const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          validFlights.add(key);\n        });\n      });\n\n      // Update visibility\n      setSegmentDetails(prevDetails => \n        prevDetails.map(f => {\n          const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          const isSelected = newSelected[f.segmentIndex]?.some(sf => \n            sf.flightNumber === f.flightNumber && \n            dayjs(sf.DepartsAt).format('MM-DD HH:mm') === dayjs(f.DepartsAt).format('MM-DD HH:mm')\n          ) || false;\n\n          return {\n            ...f,\n            isSelected,\n            hidden: Object.keys(newSelected).length > 0 && !isSelected && !validFlights.has(flightKey)\n          };\n        })\n      );\n\n      return newSelected;\n    });\n  };\n\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => \n        combo.map((f, idx) => ({\n          ...f,\n          isSelected: false,\n          segmentIndex: idx\n        }))\n      );\n\n      const uniqueFlights = Array.from(\n        new Map(allFlights.map(f => [\n          `${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`,\n          f\n        ])).values()\n      );\n\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}