{"ast":null,"code":"import { airports } from '../data/airports';\n\n/**\n * Get airport details by IATA code\n * @param {string} iataCode - IATA code of the airport\n * @returns {Object|null} Airport object or null if not found\n */\nexport const getAirportByIata = iataCode => {\n  if (!iataCode) return null;\n  return airports.find(airport => airport.IATA === iataCode) || null;\n};\n\n/**\n * Calculate distance between two airports (in kilometers)\n * @param {string} fromIata - IATA code of departure airport\n * @param {string} toIata - IATA code of arrival airport \n * @returns {number|null} Distance in kilometers or null if airports not found\n */\nexport const calculateDistance = (fromIata, toIata) => {\n  const fromAirport = getAirportByIata(fromIata);\n  const toAirport = getAirportByIata(toIata);\n  if (!fromAirport || !toAirport) return null;\n\n  // Use Haversine formula to calculate distance\n  const R = 6371; // Earth's radius in km\n  const dLat = deg2rad(toAirport.Latitude - fromAirport.Latitude);\n  const dLon = deg2rad(toAirport.Longitude - fromAirport.Longitude);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(fromAirport.Latitude)) * Math.cos(deg2rad(toAirport.Latitude)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  return distance;\n};\n\n/**\n * Convert degrees to radians\n * @param {number} deg - Degrees\n * @returns {number} Radians\n */\nconst deg2rad = deg => {\n  return deg * (Math.PI / 180);\n};\n\n/**\n * Get airports by zone\n * @param {string} zone - Zone name (e.g. 'North America', 'Europe')\n * @returns {Array} Array of airports in the specified zone\n */\nexport const getAirportsByZone = zone => {\n  if (!zone) return [];\n  return airports.filter(airport => airport.Zone === zone);\n};\n\n/**\n * Get unique list of zones from airports data\n * @returns {Array} Array of unique zone names\n */\nexport const getZones = () => {\n  const zonesSet = new Set(airports.map(airport => airport.Zone));\n  return [...zonesSet];\n};","map":{"version":3,"names":["airports","getAirportByIata","iataCode","find","airport","IATA","calculateDistance","fromIata","toIata","fromAirport","toAirport","R","dLat","deg2rad","Latitude","dLon","Longitude","a","Math","sin","cos","c","atan2","sqrt","distance","deg","PI","getAirportsByZone","zone","filter","Zone","getZones","zonesSet","Set","map"],"sources":["/Users/hanguyen/Desktop/route-builder-ac/src/utils/airportUtils.js"],"sourcesContent":["import { airports } from '../data/airports';\n\n/**\n * Get airport details by IATA code\n * @param {string} iataCode - IATA code of the airport\n * @returns {Object|null} Airport object or null if not found\n */\nexport const getAirportByIata = (iataCode) => {\n  if (!iataCode) return null;\n  return airports.find(airport => airport.IATA === iataCode) || null;\n};\n\n/**\n * Calculate distance between two airports (in kilometers)\n * @param {string} fromIata - IATA code of departure airport\n * @param {string} toIata - IATA code of arrival airport \n * @returns {number|null} Distance in kilometers or null if airports not found\n */\nexport const calculateDistance = (fromIata, toIata) => {\n  const fromAirport = getAirportByIata(fromIata);\n  const toAirport = getAirportByIata(toIata);\n  \n  if (!fromAirport || !toAirport) return null;\n  \n  // Use Haversine formula to calculate distance\n  const R = 6371; // Earth's radius in km\n  const dLat = deg2rad(toAirport.Latitude - fromAirport.Latitude);\n  const dLon = deg2rad(toAirport.Longitude - fromAirport.Longitude);\n  \n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(deg2rad(fromAirport.Latitude)) * Math.cos(deg2rad(toAirport.Latitude)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  const distance = R * c;\n  \n  return distance;\n};\n\n/**\n * Convert degrees to radians\n * @param {number} deg - Degrees\n * @returns {number} Radians\n */\nconst deg2rad = (deg) => {\n  return deg * (Math.PI/180);\n};\n\n/**\n * Get airports by zone\n * @param {string} zone - Zone name (e.g. 'North America', 'Europe')\n * @returns {Array} Array of airports in the specified zone\n */\nexport const getAirportsByZone = (zone) => {\n  if (!zone) return [];\n  return airports.filter(airport => airport.Zone === zone);\n};\n\n/**\n * Get unique list of zones from airports data\n * @returns {Array} Array of unique zone names\n */\nexport const getZones = () => {\n  const zonesSet = new Set(airports.map(airport => airport.Zone));\n  return [...zonesSet];\n};"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;;AAE3C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;EAC5C,IAAI,CAACA,QAAQ,EAAE,OAAO,IAAI;EAC1B,OAAOF,QAAQ,CAACG,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,KAAKH,QAAQ,CAAC,IAAI,IAAI;AACpE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,MAAM,KAAK;EACrD,MAAMC,WAAW,GAAGR,gBAAgB,CAACM,QAAQ,CAAC;EAC9C,MAAMG,SAAS,GAAGT,gBAAgB,CAACO,MAAM,CAAC;EAE1C,IAAI,CAACC,WAAW,IAAI,CAACC,SAAS,EAAE,OAAO,IAAI;;EAE3C;EACA,MAAMC,CAAC,GAAG,IAAI,CAAC,CAAC;EAChB,MAAMC,IAAI,GAAGC,OAAO,CAACH,SAAS,CAACI,QAAQ,GAAGL,WAAW,CAACK,QAAQ,CAAC;EAC/D,MAAMC,IAAI,GAAGF,OAAO,CAACH,SAAS,CAACM,SAAS,GAAGP,WAAW,CAACO,SAAS,CAAC;EAEjE,MAAMC,CAAC,GACLC,IAAI,CAACC,GAAG,CAACP,IAAI,GAAC,CAAC,CAAC,GAAGM,IAAI,CAACC,GAAG,CAACP,IAAI,GAAC,CAAC,CAAC,GACnCM,IAAI,CAACE,GAAG,CAACP,OAAO,CAACJ,WAAW,CAACK,QAAQ,CAAC,CAAC,GAAGI,IAAI,CAACE,GAAG,CAACP,OAAO,CAACH,SAAS,CAACI,QAAQ,CAAC,CAAC,GAC/EI,IAAI,CAACC,GAAG,CAACJ,IAAI,GAAC,CAAC,CAAC,GAAGG,IAAI,CAACC,GAAG,CAACJ,IAAI,GAAC,CAAC,CAAC;EAErC,MAAMM,CAAC,GAAG,CAAC,GAAGH,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACK,IAAI,CAACN,CAAC,CAAC,EAAEC,IAAI,CAACK,IAAI,CAAC,CAAC,GAACN,CAAC,CAAC,CAAC;EACtD,MAAMO,QAAQ,GAAGb,CAAC,GAAGU,CAAC;EAEtB,OAAOG,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMX,OAAO,GAAIY,GAAG,IAAK;EACvB,OAAOA,GAAG,IAAIP,IAAI,CAACQ,EAAE,GAAC,GAAG,CAAC;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EACzC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,OAAO5B,QAAQ,CAAC6B,MAAM,CAACzB,OAAO,IAAIA,OAAO,CAAC0B,IAAI,KAAKF,IAAI,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,QAAQ,GAAGA,CAAA,KAAM;EAC5B,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAACjC,QAAQ,CAACkC,GAAG,CAAC9B,OAAO,IAAIA,OAAO,CAAC0B,IAAI,CAAC,CAAC;EAC/D,OAAO,CAAC,GAAGE,QAAQ,CAAC;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}