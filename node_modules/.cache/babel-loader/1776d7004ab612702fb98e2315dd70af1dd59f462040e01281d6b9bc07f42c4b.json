{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport airlines from '../../../data/airlines';\nimport { getSegmentColumns } from '../segmentColumns';\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const combinationsRef = useRef([]);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    var _data$results, _data$results$, _data$results$$data, _data$results$$data$d, _data$results$$data$d2, _data$results2, _data$results2$, _data$results2$$data;\n    const flights = {};\n    const baseDate = dayjs(((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : (_data$results$$data$d = _data$results$$data.data) === null || _data$results$$data$d === void 0 ? void 0 : (_data$results$$data$d2 = _data$results$$data$d[0]) === null || _data$results$$data$d2 === void 0 ? void 0 : _data$results$$data$d2.DepartsAt) || new Date()).format('YYYY-MM-DD');\n    const rawFlights = ((_data$results2 = data.results) === null || _data$results2 === void 0 ? void 0 : (_data$results2$ = _data$results2[0]) === null || _data$results2$ === void 0 ? void 0 : (_data$results2$$data = _data$results2$.data) === null || _data$results2$$data === void 0 ? void 0 : _data$results2$$data.data) || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    const isValidFlight = trip => {\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n      console.log(`  Carrier: ${trip.Carriers}`);\n      console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n      console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\n      if (trip.Stops !== 0) {\n        console.log('  ❌ Skipped: Not a direct flight');\n        return false;\n      }\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log('  ❌ Skipped: Excluded carrier');\n        return false;\n      }\n      if (timeWindow) {\n        const departureTime = dayjs(trip.DepartsAt);\n        const isValid = departureTime.isAfter(timeWindow.start) && departureTime.isBefore(timeWindow.end);\n        if (!isValid) {\n          console.log('  ❌ Skipped: Outside time window');\n          console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n        } else {\n          console.log('  • Accepted: Within time window');\n        }\n        return isValid;\n      }\n      console.log('  • Accepted: No time window restrictions');\n      return true;\n    };\n    const updateFlightCabins = (flight, cabin) => {\n      switch (cabin.toLowerCase()) {\n        case 'economy':\n          flight.economy = true;\n          break;\n        case 'business':\n          flight.business = true;\n          break;\n        case 'first':\n          flight.first = true;\n          break;\n      }\n    };\n    const createFlightEntry = (trip, carrier, flightNumber, departureTime, arrivalTime, departDayDiff, arrivalDayDiff) => {\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName === '787  All') {\n        aircraftName = 'Boeing 787-10';\n      }\n      return {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber,\n        airlines: getAirlineName(carrier),\n        aircraft: aircraftName,\n        duration: trip.TotalDuration,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false,\n        isSelected: false,\n        segmentIndex\n      };\n    };\n    rawFlights.filter(isValidFlight).forEach(trip => {\n      const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n      const flightNumber = trip.FlightNumbers.startsWith('CL') ? `LH${trip.FlightNumbers.slice(2)}` : trip.FlightNumbers;\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n      if (flights[flightNumber]) {\n        updateFlightCabins(flights[flightNumber], trip.Cabin);\n        return;\n      }\n      flights[flightNumber] = createFlightEntry(trip, carrier, flightNumber, departureTime, arrivalTime, departDayDiff, arrivalDayDiff);\n      updateFlightCabins(flights[flightNumber], trip.Cabin);\n    });\n    return Object.values(flights);\n  };\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && date.isBefore(end.add(1, 'day'));\n  };\n  const handleDateSearch = async currentRoute => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    setIsLoadingAvailability(true);\n    try {\n      // Get the selected segments from availability data\n      const selectedSegments = [];\n      for (const date of Object.keys(availabilityData)) {\n        if (isDateInRange(date, selectedDates)) {\n          selectedSegments.push(...availabilityData[date]);\n        }\n      }\n\n      // Log selected segments before filtering\n      console.log('=== Flights Before Combination Filtering ===');\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\n        if (!acc[segment.route]) {\n          acc[segment.route] = [];\n        }\n        acc[segment.route].push(segment);\n        return acc;\n      }, {});\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\n        console.log(`\\nRoute ${route}:`);\n        segments.forEach(segment => {\n          console.log(`  ID: ${segment.ID}`);\n          console.log(`  Date: ${segment.date}`);\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\n        });\n      });\n\n      // First fetch availability data\n      const routeString = currentRoute.join('-');\n      const availabilityResponse = await fetch(`https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      });\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n\n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance\n          });\n        });\n        setAvailabilityData(processedAvailability);\n      }\n\n      // Continue with existing segment search logic\n      const newProcessedSegments = [];\n      const [startDate, endDate] = selectedDates;\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\n      console.log('\\n=== Processing Segments ===');\n      console.log('Date Range:', {\n        start: dayjs(startDate).format('YYYY-MM-DD'),\n        end: dayjs(endDate).format('YYYY-MM-DD')\n      });\n      try {\n        // Process all segments\n        for (let i = 0; i < currentRoute.length - 1; i++) {\n          const from = currentRoute[i];\n          const to = currentRoute[i + 1];\n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n          let timeWindow = null;\n          const dates = new Set();\n          if (i === 0) {\n            // First segment - use full date range\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            console.log('\\n=== First Segment Details ===');\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n\n            // Get all dates in range\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n          } else {\n            // Handle subsequent segments\n            const prevSegment = newProcessedSegments[i - 1];\n\n            // If no previous flights found, use full date range for all segments\n            if (!prevSegment || prevSegment.flights.length === 0) {\n              const startDay = dayjs(startDate).startOf('day');\n              const endDay = dayjs(endDate).endOf('day');\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('No previous flights found. Using full date range for this segment');\n            } else {\n              // Calculate time window from previous segment's flights\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n              timeWindow = {\n                start: arrivals[0],\n                end: arrivals[arrivals.length - 1].add(24, 'hours')\n              };\n\n              // Get dates for time window\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('Time Window based on previous segment arrivals:');\n              console.log('  Start:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\n              console.log('  End:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\n            }\n          }\n\n          // Process each date\n          const allFlights = [];\n          for (const date of dates) {\n            // Find route from availability data instead\n            const availableRoutes = availabilityData[date] || [];\n            const route = availableRoutes.find(r => r.route === `${from}-${to}`);\n            if (!route) {\n              console.log(`No route found for ${from}-${to} on ${date}`);\n              continue;\n            }\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\n            console.log(`Segment ID: ${route.ID}`);\n            try {\n              const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n                method: 'GET',\n                headers: {\n                  'accept': 'application/json',\n                  'Partner-Authorization': apiKey,\n                  'Segment-ID': route.ID\n                }\n              });\n              if (!response.ok) {\n                console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n                continue;\n              }\n              const data = await response.json();\n              const processedFlights = processFlightData(data, timeWindow, i);\n              console.log(`✓ Found ${processedFlights.length} valid flights`);\n              allFlights.push(...processedFlights);\n            } catch (error) {\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\n            }\n          }\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n          // Store searched dates in segment data\n          newProcessedSegments[i] = {\n            route: `${from}-${to}`,\n            flights: allFlights,\n            searchDates: dates,\n            // Add this field\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n          };\n\n          // Only break if previous segment had flights but current segment found none\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i - 1].flights.length > 0) {\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n            console.log('Skipping remaining segments');\n            break;\n          }\n        }\n\n        // After processing all segments\n        if (newProcessedSegments.length >= 1) {\n          // Log all flights found by segment\n          console.log('\\n=== All Flights Found ===');\n          newProcessedSegments.forEach((segment, index) => {\n            if (segment.flights && segment.flights.length > 0) {\n              console.log(`\\nSegment ${index} (${segment.route}):`);\n              segment.flights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft}`);\n              });\n            } else {\n              console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\n            }\n          });\n          console.log('\\n=== Flight Combinations ===');\n\n          // Find the first and last segments with flights\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n          // Find all valid combinations recursively\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n            // If we've reached beyond the last valid segment, this is a valid combination\n            if (segmentIndex > lastSegmentIndex) {\n              return [currentPath];\n            }\n            const validCombos = [];\n            const currentSegment = newProcessedSegments[segmentIndex];\n\n            // If no flights in current segment, try next segment\n            if (!currentSegment.flights || currentSegment.flights.length === 0) {\n              return findValidCombinations(currentPath, segmentIndex + 1);\n            }\n\n            // For the last flight in the path, accept any flight\n            if (currentPath.length === 0) {\n              currentSegment.flights.forEach(flight => {\n                // Start with the latest segment and work backwards\n                const combos = findValidCombinationsBackward([flight], segmentIndex - 1);\n                validCombos.push(...combos);\n              });\n            }\n            // For previous segments, check connection times\n            else {\n              const nextFlight = currentPath[0];\n              const departure = dayjs(nextFlight.DepartsAt);\n              currentSegment.flights.forEach(flight => {\n                const arrival = dayjs(flight.ArrivesAt);\n                const connectionTime = departure.diff(arrival, 'minutes');\n\n                // Check if departure is within 24 hours of arrival\n                if (connectionTime >= 60 && connectionTime <= 24 * 60) {\n                  const combos = findValidCombinationsBackward([flight, ...currentPath], segmentIndex - 1);\n                  validCombos.push(...combos);\n                }\n              });\n            }\n            return validCombos;\n          };\n          const findValidCombinationsBackward = (currentPath = [], segmentIndex) => {\n            // If we've reached before the first segment, this is a valid combination\n            if (segmentIndex < firstSegmentWithFlights) {\n              return [currentPath];\n            }\n            const validCombos = [];\n            const currentSegment = newProcessedSegments[segmentIndex];\n\n            // If no flights in current segment, try previous segment\n            if (!currentSegment.flights || currentSegment.flights.length === 0) {\n              return findValidCombinationsBackward(currentPath, segmentIndex - 1);\n            }\n\n            // For the first flight in the path, accept any flight\n            if (currentPath.length === 0) {\n              currentSegment.flights.forEach(flight => {\n                const combos = findValidCombinationsBackward([flight], segmentIndex - 1);\n                validCombos.push(...combos);\n              });\n            }\n            // For subsequent segments, check connection times\n            else {\n              const previousFlight = currentPath[0];\n              const previousDeparture = dayjs(previousFlight.DepartsAt);\n              currentSegment.flights.forEach(flight => {\n                const arrival = dayjs(flight.ArrivesAt);\n                const connectionTime = previousDeparture.diff(arrival, 'minutes');\n\n                // Check if next departure is within 24 hours of arrival\n                if (connectionTime >= 60 && connectionTime <= 24 * 60) {\n                  const combos = findValidCombinationsBackward([flight, ...currentPath], segmentIndex - 1);\n                  validCombos.push(...combos);\n                }\n              });\n            }\n            return validCombos;\n          };\n          const trySegmentRanges = () => {\n            let allCombinations = [];\n            const totalSegments = lastSegmentIndex - firstSegmentWithFlights + 1;\n\n            // Try from longest to shortest segment combinations\n            for (let segmentCount = totalSegments; segmentCount >= 2; segmentCount--) {\n              console.log(`\\nTrying ${segmentCount}-segment combinations...`);\n\n              // Try all possible ranges of length segmentCount\n              for (let startSegment = firstSegmentWithFlights; startSegment <= lastSegmentIndex - segmentCount + 1; startSegment++) {\n                const endSegment = startSegment + segmentCount - 1;\n                console.log(`Checking segments ${startSegment}-${endSegment}...`);\n\n                // Use backward search if starting from first segment, forward search otherwise\n                const combinations = startSegment === 0 ? findValidCombinationsBackward([], endSegment) : findValidCombinations([], startSegment, endSegment);\n                if (combinations.length > 0) {\n                  console.log(`Found ${combinations.length} combinations for segments ${startSegment}-${endSegment}`);\n                  allCombinations.push(...combinations);\n                }\n              }\n\n              // If we found any combinations, stop looking for shorter ones\n              if (allCombinations.length > 0) {\n                console.log(`\\nFound valid combinations with ${segmentCount} segments`);\n                break;\n              }\n            }\n            return allCombinations;\n          };\n\n          // Get all valid combinations using the new function\n          const allCombinations = trySegmentRanges();\n\n          // Log the combinations\n          console.log('\\n=== Valid Combinations ===');\n          if (allCombinations.length === 0) {\n            console.log('No valid combinations found for any segment range');\n          } else {\n            console.log(`Found ${allCombinations.length} valid combinations`);\n            allCombinations.forEach(combo => {\n              const flightInfo = combo.map((flight, idx) => {\n                if (idx === 0) return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n                const prevFlight = combo[idx - 1];\n                const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n                const hours = Math.floor(connectionTime / 60);\n                const minutes = connectionTime % 60;\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n              });\n              console.log(flightInfo.join(' → '));\n            });\n          }\n\n          // Create a map of valid flights by segment\n          const validFlightsBySegment = new Map();\n          allCombinations.forEach(combo => {\n            combo.forEach(flight => {\n              const segmentKey = flight.segmentIndex;\n              if (!validFlightsBySegment.has(segmentKey)) {\n                validFlightsBySegment.set(segmentKey, new Set());\n              }\n              validFlightsBySegment.get(segmentKey).add(`${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n            });\n          });\n\n          // Filter and process flights\n          const filteredFlights = [];\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segment = newProcessedSegments[i];\n            if (!segment || !segment.flights) continue;\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n\n            // Add valid flights from this segment\n            segment.flights.forEach(flight => {\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n              if (validFlightsForSegment.has(flightKey)) {\n                var _selectedFlights$i;\n                const processedFlight = {\n                  ...flight,\n                  distance: flight.distance || 0,\n                  key: `${flight.from}-${flight.to}-${flight.flightNumber}`,\n                  isSelected: (_selectedFlights$i = selectedFlights[i]) === null || _selectedFlights$i === void 0 ? void 0 : _selectedFlights$i.some(f => f.flightNumber === flight.flightNumber),\n                  segmentIndex: i\n                };\n                filteredFlights.push(processedFlight);\n              }\n            });\n          }\n          setSegmentDetails(filteredFlights);\n          setValidCombinations(allCombinations);\n\n          // Log flights by segment\n          console.log('\\n=== Flights By Segment ===');\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n            if (segmentFlights.length > 0) {\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n              segmentFlights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n              });\n            }\n          }\n          console.log('\\n======================');\n        } else {\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => segment.flights.map(flight => ({\n            ...flight,\n            isSelected: false,\n            segmentIndex: index\n          }))));\n          setValidCombinations([]);\n        }\n      } catch (error) {\n        console.error('Error fetching segment details:', error);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoadingSegments(false);\n      setIsLoadingAvailability(false);\n    }\n  };\n  const handleCalendarSearch = async currentRoute => {\n    if (!currentRoute || !apiKey) return;\n    setIsLoadingAvailability(true);\n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n      const availabilityResponse = await fetch(`https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      });\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n\n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance,\n            date: item.date\n          });\n        });\n        setAvailabilityData(processedAvailability);\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n  const resetDetails = () => {\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n  };\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    setSelectedFlights(prevSelected => {\n      var _newSelected$segmentI, _newSelected$segmentI2;\n      const newSelected = {\n        ...prevSelected\n      };\n\n      // Check if this exact flight is already selected\n      const isCurrentlySelected = (_newSelected$segmentI = newSelected[segmentIndex]) === null || _newSelected$segmentI === void 0 ? void 0 : (_newSelected$segmentI2 = _newSelected$segmentI.some) === null || _newSelected$segmentI2 === void 0 ? void 0 : _newSelected$segmentI2.call(_newSelected$segmentI, f => {\n        const matches = f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Calculate layover durations for adjacent segments\n      const layoverDurations = {};\n      Object.keys(newSelected).forEach(idx => {\n        const currentIndex = parseInt(idx);\n        const nextIndex = currentIndex + 1;\n        if (newSelected[nextIndex] && newSelected[currentIndex]) {\n          const currentFlight = newSelected[currentIndex][0];\n          const nextFlight = newSelected[nextIndex][0];\n          const arrivalTime = dayjs(currentFlight.ArrivesAt);\n          const departureTime = dayjs(nextFlight.DepartsAt);\n          const duration = departureTime.diff(arrivalTime, 'minute');\n          const hours = Math.floor(duration / 60);\n          const minutes = duration % 60;\n          layoverDurations[currentIndex] = `${hours}h ${minutes}m`;\n        }\n      });\n\n      // Find valid combinations that include ANY of the selected flights per segment\n      const validCombos = validCombinations.filter(combo => {\n        return Object.entries(newSelected).every(([selectedSegmentIndex, selectedFlights]) => {\n          const comboFlight = combo[selectedSegmentIndex];\n          return selectedFlights.some(selectedFlight => comboFlight && comboFlight.flightNumber === selectedFlight.flightNumber && dayjs(comboFlight.DepartsAt).isSame(dayjs(selectedFlight.DepartsAt)));\n        });\n      });\n      console.log(`\\nFound ${validCombos.length} valid combinations with selected flights`);\n\n      // Filter and process flights\n      const filteredFlights = validCombos.flatMap(combo => combo.map((f, idx) => {\n        var _newSelected$idx;\n        return {\n          ...f,\n          isSelected: ((_newSelected$idx = newSelected[idx]) === null || _newSelected$idx === void 0 ? void 0 : _newSelected$idx.some(sf => sf.flightNumber === f.flightNumber && dayjs(sf.DepartsAt).isSame(dayjs(f.DepartsAt)))) || false,\n          segmentIndex: idx,\n          layoverDuration: layoverDurations[idx],\n          // Add layover duration to flight data\n          distance: f.distance || 0\n        };\n      }));\n\n      // Remove duplicates while preserving selections and layover durations\n      const seenFlights = new Map();\n      const uniqueFlights = filteredFlights.filter(f => {\n        const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${f.segmentIndex}`;\n        if (!seenFlights.has(key)) {\n          seenFlights.set(key, {\n            isSelected: f.isSelected,\n            layoverDuration: f.layoverDuration,\n            distance: f.distance\n          });\n          return true;\n        }\n        const existing = seenFlights.get(key);\n        f.isSelected = f.isSelected || existing.isSelected;\n        f.layoverDuration = f.layoverDuration || existing.layoverDuration;\n        f.distance = f.distance || existing.distance;\n        return false;\n      });\n      setSegmentDetails(uniqueFlights);\n      return newSelected;\n    });\n  };\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize with all flights from all combinations\n  useEffect(() => {\n    console.log('Updating combinations ref:', initialCombinations);\n    combinationsRef.current = initialCombinations;\n  }, [initialCombinations]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => combo.map((f, idx) => ({\n        ...f,\n        isSelected: false,\n        segmentIndex: idx\n      })));\n      const uniqueFlights = Array.from(new Map(allFlights.map(f => [`${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`, f])).values());\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability\n  };\n}\n_s(useFlightDetails, \"g+xyjG2CUdMgjQDbLkMgvESPbE8=\");","map":{"version":3,"names":["useState","useEffect","useRef","useMemo","dayjs","airlines","getSegmentColumns","useFlightDetails","getColumns","initialCombinations","_s","selectedDates","setSelectedDates","apiKey","setApiKey","localStorage","getItem","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","selectedFlights","setSelectedFlights","validCombinations","setValidCombinations","processedSegments","setProcessedSegments","originalFlights","setOriginalFlights","originalCombinations","processedFlights","setProcessedFlights","initialFlights","setInitialFlights","availabilityData","setAvailabilityData","isLoadingAvailability","setIsLoadingAvailability","combinationsRef","setItem","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","processFlightData","data","timeWindow","segmentIndex","_data$results","_data$results$","_data$results$$data","_data$results$$data$d","_data$results$$data$d2","_data$results2","_data$results2$","_data$results2$$data","flights","results","DepartsAt","Date","rawFlights","console","log","length","start","end","isValidFlight","trip","FlightNumbers","Carriers","ArrivesAt","Stops","departureTime","isValid","isAfter","isBefore","updateFlightCabins","flight","cabin","toLowerCase","economy","business","first","createFlightEntry","carrier","flightNumber","arrivalTime","departDayDiff","arrivalDayDiff","aircraftName","Aircraft","from","OriginAirport","to","DestinationAirport","aircraft","duration","TotalDuration","departs","arrives","isSelected","filter","forEach","startsWith","slice","baseDayjs","diff","Cabin","Object","values","isDateInRange","dateRange","subtract","add","handleDateSearch","currentRoute","selectedSegments","keys","push","segmentsByRoute","reduce","acc","segment","route","entries","segments","ID","classes","Y","J","F","routeString","join","availabilityResponse","fetch","method","headers","ok","availabilityResult","json","processedAvailability","item","dateKey","originAirport","destinationAirport","YDirect","JDirect","FDirect","distance","newProcessedSegments","startDate","endDate","i","dates","Set","startDay","startOf","endDay","endOf","d","valueOf","prevSegment","arrivals","map","f","sort","b","allFlights","availableRoutes","r","response","error","searchDates","earliestArrival","latestArrival","index","firstSegmentWithFlights","findIndex","lastSegmentWithFlights","reverse","lastSegmentIndex","findValidCombinations","currentPath","validCombos","currentSegment","combos","findValidCombinationsBackward","nextFlight","departure","arrival","connectionTime","previousFlight","previousDeparture","trySegmentRanges","allCombinations","totalSegments","segmentCount","startSegment","endSegment","combinations","combo","flightInfo","idx","prevFlight","hours","Math","floor","minutes","toString","padStart","validFlightsBySegment","Map","segmentKey","has","set","get","filteredFlights","validFlightsForSegment","flightKey","_selectedFlights$i","processedFlight","key","some","segmentFlights","flatMap","handleCalendarSearch","resetDetails","handleFlightSelect","prevSelected","_newSelected$segmentI","_newSelected$segmentI2","newSelected","isCurrentlySelected","call","matches","isSame","keep","layoverDurations","currentIndex","parseInt","nextIndex","currentFlight","every","selectedSegmentIndex","comboFlight","selectedFlight","_newSelected$idx","sf","layoverDuration","seenFlights","uniqueFlights","existing","columns","current","comboIndex","Array"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState, useEffect, useRef, useMemo } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport airlines from '../../../data/airlines';\r\nimport { getSegmentColumns } from '../segmentColumns';\r\n\r\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\r\n  const [selectedDates, setSelectedDates] = useState(null);\r\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\r\n  const [segmentDetails, setSegmentDetails] = useState([]);\r\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\r\n  const [selectedFlights, setSelectedFlights] = useState({});\r\n  const [validCombinations, setValidCombinations] = useState([]);\r\n  const [processedSegments, setProcessedSegments] = useState([]);\r\n  const [originalFlights, setOriginalFlights] = useState(null);\r\n  const [originalCombinations] = useState(initialCombinations);\r\n  const [processedFlights, setProcessedFlights] = useState(null);\r\n  const [initialFlights, setInitialFlights] = useState(null);\r\n  const [availabilityData, setAvailabilityData] = useState({});\r\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\r\n  const combinationsRef = useRef([]);\r\n\r\n  // Update localStorage when apiKey changes\r\n  useEffect(() => {\r\n    if (apiKey) {\r\n      localStorage.setItem('flightSearchApiKey', apiKey);\r\n    }\r\n  }, [apiKey]);\r\n\r\n  const formatTime = (dateStr, baseDate) => {\r\n    const date = dayjs(dateStr);\r\n    const base = dayjs(baseDate);\r\n    \r\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\r\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\r\n    \r\n    const timeStr = date.format('HH:mm');\r\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\r\n  };\r\n\r\n  const getAirlineName = (code) => {\r\n    const airline = airlines.find(a => a.value === code);\r\n    return airline ? airline.label.replace(` (${code})`, '') : code;\r\n  };\r\n\r\n  const processFlightData = (data, timeWindow, segmentIndex) => {\r\n    const flights = {};\r\n    const baseDate = dayjs(data.results?.[0]?.data?.data?.[0]?.DepartsAt || new Date()).format('YYYY-MM-DD');\r\n    const rawFlights = data.results?.[0]?.data?.data || [];\r\n    \r\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\r\n    if (timeWindow) {\r\n      console.log('Time Window:', {\r\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\r\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\r\n      });\r\n    }\r\n    \r\n    const isValidFlight = (trip) => {\r\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\r\n      console.log(`  Carrier: ${trip.Carriers}`);\r\n      console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\r\n      console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\r\n      \r\n      if (trip.Stops !== 0) {\r\n        console.log('  ❌ Skipped: Not a direct flight');\r\n        return false;\r\n      }\r\n      \r\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\r\n        console.log('  ❌ Skipped: Excluded carrier');\r\n        return false;\r\n      }\r\n      \r\n      if (timeWindow) {\r\n        const departureTime = dayjs(trip.DepartsAt);\r\n        const isValid = departureTime.isAfter(timeWindow.start) && \r\n                       departureTime.isBefore(timeWindow.end);\r\n        \r\n        if (!isValid) {\r\n          console.log('  ❌ Skipped: Outside time window');\r\n          console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\r\n        } else {\r\n          console.log('  • Accepted: Within time window');\r\n        }\r\n        return isValid;\r\n      }\r\n      \r\n      console.log('  • Accepted: No time window restrictions');\r\n      return true;\r\n    };\r\n\r\n    const updateFlightCabins = (flight, cabin) => {\r\n      switch(cabin.toLowerCase()) {\r\n        case 'economy':\r\n          flight.economy = true;\r\n          break;\r\n        case 'business':\r\n          flight.business = true;\r\n          break;\r\n        case 'first':\r\n          flight.first = true;\r\n          break;\r\n      }\r\n    };\r\n\r\n    const createFlightEntry = (trip, carrier, flightNumber, departureTime, arrivalTime, departDayDiff, arrivalDayDiff) => {\r\n      let aircraftName = trip.Aircraft[0];\r\n      if (aircraftName === '787  All') {\r\n        aircraftName = 'Boeing 787-10';\r\n      }\r\n\r\n      return {\r\n        from: trip.OriginAirport,\r\n        to: trip.DestinationAirport,\r\n        flightNumber,\r\n        airlines: getAirlineName(carrier),\r\n        aircraft: aircraftName,\r\n        duration: trip.TotalDuration,\r\n        departs: departDayDiff > 0 ? \r\n          `${departureTime.format('HH:mm')} (+${departDayDiff})` : \r\n          departureTime.format('HH:mm'),\r\n        arrives: arrivalDayDiff > 0 ? \r\n          `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \r\n          arrivalTime.format('HH:mm'),\r\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\r\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\r\n        economy: false,\r\n        business: false,\r\n        first: false,\r\n        isSelected: false,\r\n        segmentIndex\r\n      };\r\n    };\r\n\r\n    rawFlights\r\n      .filter(isValidFlight)\r\n      .forEach(trip => {\r\n        const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\r\n        const flightNumber = trip.FlightNumbers.startsWith('CL') \r\n          ? `LH${trip.FlightNumbers.slice(2)}` \r\n          : trip.FlightNumbers;\r\n\r\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\r\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); \r\n        const baseDayjs = dayjs(baseDate);\r\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\r\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\r\n\r\n        if (flights[flightNumber]) {\r\n          updateFlightCabins(flights[flightNumber], trip.Cabin);\r\n          return;\r\n        }\r\n\r\n        flights[flightNumber] = createFlightEntry(\r\n          trip, carrier, flightNumber, \r\n          departureTime, arrivalTime, \r\n          departDayDiff, arrivalDayDiff\r\n        );\r\n        \r\n        updateFlightCabins(flights[flightNumber], trip.Cabin);\r\n      });\r\n    \r\n    return Object.values(flights);\r\n  };\r\n\r\n  const isDateInRange = (dateStr, dateRange) => {\r\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\r\n    const date = dayjs(dateStr);\r\n    const start = dayjs(dateRange[0]);\r\n    const end = dayjs(dateRange[1]);\r\n    return date.isAfter(start.subtract(1, 'day')) && \r\n           date.isBefore(end.add(1, 'day'));\r\n  };\r\n\r\n  const handleDateSearch = async (currentRoute) => {\r\n    if (!selectedDates || !currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingSegments(true);\r\n    setIsLoadingAvailability(true);\r\n    \r\n    try {\r\n      // Get the selected segments from availability data\r\n      const selectedSegments = [];\r\n      for (const date of Object.keys(availabilityData)) {\r\n        if (isDateInRange(date, selectedDates)) {\r\n          selectedSegments.push(...availabilityData[date]);\r\n        }\r\n      }\r\n\r\n      // Log selected segments before filtering\r\n      console.log('=== Flights Before Combination Filtering ===');\r\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\r\n        if (!acc[segment.route]) {\r\n          acc[segment.route] = [];\r\n        }\r\n        acc[segment.route].push(segment);\r\n        return acc;\r\n      }, {});\r\n\r\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\r\n        console.log(`\\nRoute ${route}:`);\r\n        segments.forEach(segment => {\r\n          console.log(`  ID: ${segment.ID}`);\r\n          console.log(`  Date: ${segment.date}`);\r\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\r\n        });\r\n      });\r\n\r\n      // First fetch availability data\r\n      const routeString = currentRoute.join('-');\r\n      const availabilityResponse = await fetch(\r\n        `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`,\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'accept': 'application/json',\r\n            'Partner-Authorization': apiKey\r\n          }\r\n        }\r\n      );\r\n\r\n      if (availabilityResponse.ok) {\r\n        const availabilityResult = await availabilityResponse.json();\r\n        \r\n        // Process availability data into a more usable format\r\n        const processedAvailability = {};\r\n        availabilityResult.forEach(item => {\r\n          const dateKey = item.date;\r\n          if (!processedAvailability[dateKey]) {\r\n            processedAvailability[dateKey] = [];\r\n          }\r\n          \r\n          processedAvailability[dateKey].push({\r\n            route: `${item.originAirport}-${item.destinationAirport}`,\r\n            classes: {\r\n              Y: item.YDirect,\r\n              J: item.JDirect,\r\n              F: item.FDirect\r\n            },\r\n            ID: item.ID,\r\n            distance: item.distance\r\n          });\r\n        });\r\n        \r\n        setAvailabilityData(processedAvailability);\r\n      }\r\n\r\n      // Continue with existing segment search logic\r\n      const newProcessedSegments = [];\r\n      const [startDate, endDate] = selectedDates;\r\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\r\n      \r\n      console.log('\\n=== Processing Segments ===');\r\n      console.log('Date Range:', {\r\n        start: dayjs(startDate).format('YYYY-MM-DD'),\r\n        end: dayjs(endDate).format('YYYY-MM-DD')\r\n      });\r\n      \r\n      try {\r\n        // Process all segments\r\n        for (let i = 0; i < currentRoute.length - 1; i++) {\r\n          const from = currentRoute[i];\r\n          const to = currentRoute[i + 1];\r\n          \r\n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\r\n          \r\n          let timeWindow = null;\r\n          const dates = new Set();\r\n\r\n          if (i === 0) {\r\n            // First segment - use full date range\r\n            const startDay = dayjs(startDate).startOf('day');\r\n            const endDay = dayjs(endDate).endOf('day');\r\n            \r\n            console.log('\\n=== First Segment Details ===');\r\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\r\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\r\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\r\n            \r\n            // Get all dates in range\r\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\r\n              dates.add(d.format('YYYY-MM-DD'));\r\n            }\r\n          } else {\r\n            // Handle subsequent segments\r\n            const prevSegment = newProcessedSegments[i - 1];\r\n            \r\n            // If no previous flights found, use full date range for all segments\r\n            if (!prevSegment || prevSegment.flights.length === 0) {\r\n              const startDay = dayjs(startDate).startOf('day');\r\n              const endDay = dayjs(endDate).endOf('day');\r\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\r\n                dates.add(d.format('YYYY-MM-DD'));\r\n              }\r\n              console.log('No previous flights found. Using full date range for this segment');\r\n            } else {\r\n              // Calculate time window from previous segment's flights\r\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\r\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\r\n              \r\n              timeWindow = {\r\n                start: arrivals[0],\r\n                end: arrivals[arrivals.length - 1].add(24, 'hours')\r\n              };\r\n              \r\n              // Get dates for time window\r\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\r\n                dates.add(d.format('YYYY-MM-DD'));\r\n              }\r\n              \r\n              console.log('Time Window based on previous segment arrivals:');\r\n              console.log('  Start:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\r\n              console.log('  End:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\r\n            }\r\n          }\r\n\r\n          // Process each date\r\n          const allFlights = [];\r\n          for (const date of dates) {\r\n            // Find route from availability data instead\r\n            const availableRoutes = availabilityData[date] || [];\r\n            const route = availableRoutes.find(r => \r\n              r.route === `${from}-${to}`\r\n            );\r\n\r\n            if (!route) {\r\n              console.log(`No route found for ${from}-${to} on ${date}`);\r\n              continue;\r\n            }\r\n\r\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\r\n            console.log(`Segment ID: ${route.ID}`);\r\n            \r\n            try {\r\n              const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                  'accept': 'application/json',\r\n                  'Partner-Authorization': apiKey,\r\n                  'Segment-ID': route.ID\r\n                }\r\n              });\r\n\r\n              if (!response.ok) {\r\n                console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\r\n                continue;\r\n              }\r\n\r\n              const data = await response.json();\r\n              const processedFlights = processFlightData(data, timeWindow, i);\r\n              console.log(`✓ Found ${processedFlights.length} valid flights`);\r\n              allFlights.push(...processedFlights);\r\n            } catch (error) {\r\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\r\n            }\r\n          }\r\n\r\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\r\n\r\n          // Store searched dates in segment data\r\n          newProcessedSegments[i] = {\r\n            route: `${from}-${to}`,\r\n            flights: allFlights,\r\n            searchDates: dates, // Add this field\r\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\r\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\r\n          };\r\n\r\n          // Only break if previous segment had flights but current segment found none\r\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i-1].flights.length > 0) {\r\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\r\n            console.log('Skipping remaining segments');\r\n            break;\r\n          }\r\n        }\r\n\r\n        // After processing all segments\r\n        if (newProcessedSegments.length >= 1) {\r\n          // Log all flights found by segment\r\n          console.log('\\n=== All Flights Found ===');\r\n          newProcessedSegments.forEach((segment, index) => {\r\n            if (segment.flights && segment.flights.length > 0) {\r\n              console.log(`\\nSegment ${index} (${segment.route}):`);\r\n              segment.flights\r\n                .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\r\n                .forEach(flight => {\r\n                  console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft}`);\r\n                });\r\n            } else {\r\n              console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\r\n            }\r\n          });\r\n\r\n          console.log('\\n=== Flight Combinations ===');\r\n          \r\n          // Find the first and last segments with flights\r\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(\r\n            segment => segment.flights && segment.flights.length > 0\r\n          );\r\n          \r\n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(\r\n            segment => segment.flights && segment.flights.length > 0\r\n          );\r\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\r\n\r\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\r\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\r\n\r\n          // Find all valid combinations recursively\r\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\r\n            // If we've reached beyond the last valid segment, this is a valid combination\r\n            if (segmentIndex > lastSegmentIndex) {\r\n              return [currentPath];\r\n            }\r\n\r\n            const validCombos = [];\r\n            const currentSegment = newProcessedSegments[segmentIndex];\r\n\r\n            // If no flights in current segment, try next segment\r\n            if (!currentSegment.flights || currentSegment.flights.length === 0) {\r\n              return findValidCombinations(currentPath, segmentIndex + 1);\r\n            }\r\n\r\n            // For the last flight in the path, accept any flight\r\n            if (currentPath.length === 0) {\r\n              currentSegment.flights.forEach(flight => {\r\n                // Start with the latest segment and work backwards\r\n                const combos = findValidCombinationsBackward([flight], segmentIndex - 1);\r\n                validCombos.push(...combos);\r\n              });\r\n            } \r\n            // For previous segments, check connection times\r\n            else {\r\n              const nextFlight = currentPath[0];\r\n              const departure = dayjs(nextFlight.DepartsAt);\r\n\r\n              currentSegment.flights.forEach(flight => {\r\n                const arrival = dayjs(flight.ArrivesAt);\r\n                const connectionTime = departure.diff(arrival, 'minutes');\r\n\r\n                // Check if departure is within 24 hours of arrival\r\n                if (connectionTime >= 60 && connectionTime <= 24 * 60) {\r\n                  const combos = findValidCombinationsBackward([flight, ...currentPath], segmentIndex - 1);\r\n                  validCombos.push(...combos);\r\n                }\r\n              });\r\n            }\r\n\r\n            return validCombos;\r\n          };\r\n\r\n          const findValidCombinationsBackward = (currentPath = [], segmentIndex) => {\r\n            // If we've reached before the first segment, this is a valid combination\r\n            if (segmentIndex < firstSegmentWithFlights) {\r\n              return [currentPath];\r\n            }\r\n\r\n            const validCombos = [];\r\n            const currentSegment = newProcessedSegments[segmentIndex];\r\n\r\n            // If no flights in current segment, try previous segment\r\n            if (!currentSegment.flights || currentSegment.flights.length === 0) {\r\n              return findValidCombinationsBackward(currentPath, segmentIndex - 1);\r\n            }\r\n\r\n            // For the first flight in the path, accept any flight\r\n            if (currentPath.length === 0) {\r\n              currentSegment.flights.forEach(flight => {\r\n                const combos = findValidCombinationsBackward([flight], segmentIndex - 1);\r\n                validCombos.push(...combos);\r\n              });\r\n            } \r\n            // For subsequent segments, check connection times\r\n            else {\r\n              const previousFlight = currentPath[0];\r\n              const previousDeparture = dayjs(previousFlight.DepartsAt);\r\n\r\n              currentSegment.flights.forEach(flight => {\r\n                const arrival = dayjs(flight.ArrivesAt);\r\n                const connectionTime = previousDeparture.diff(arrival, 'minutes');\r\n\r\n                // Check if next departure is within 24 hours of arrival\r\n                if (connectionTime >= 60 && connectionTime <= 24 * 60) {\r\n                  const combos = findValidCombinationsBackward([flight, ...currentPath], segmentIndex - 1);\r\n                  validCombos.push(...combos);\r\n                }\r\n              });\r\n            }\r\n\r\n            return validCombos;\r\n          };\r\n\r\n          const trySegmentRanges = () => {\r\n            let allCombinations = [];\r\n            const totalSegments = lastSegmentIndex - firstSegmentWithFlights + 1;\r\n            \r\n            // Try from longest to shortest segment combinations\r\n            for (let segmentCount = totalSegments; segmentCount >= 2; segmentCount--) {\r\n              console.log(`\\nTrying ${segmentCount}-segment combinations...`);\r\n              \r\n              // Try all possible ranges of length segmentCount\r\n              for (let startSegment = firstSegmentWithFlights; startSegment <= lastSegmentIndex - segmentCount + 1; startSegment++) {\r\n                const endSegment = startSegment + segmentCount - 1;\r\n                console.log(`Checking segments ${startSegment}-${endSegment}...`);\r\n                \r\n                // Use backward search if starting from first segment, forward search otherwise\r\n                const combinations = startSegment === 0 \r\n                  ? findValidCombinationsBackward([], endSegment)\r\n                  : findValidCombinations([], startSegment, endSegment);\r\n                  \r\n                if (combinations.length > 0) {\r\n                  console.log(`Found ${combinations.length} combinations for segments ${startSegment}-${endSegment}`);\r\n                  allCombinations.push(...combinations);\r\n                }\r\n              }\r\n              \r\n              // If we found any combinations, stop looking for shorter ones\r\n              if (allCombinations.length > 0) {\r\n                console.log(`\\nFound valid combinations with ${segmentCount} segments`);\r\n                break;\r\n              }\r\n            }\r\n            \r\n            return allCombinations;\r\n          };\r\n\r\n          // Get all valid combinations using the new function\r\n          const allCombinations = trySegmentRanges();\r\n\r\n          // Log the combinations\r\n          console.log('\\n=== Valid Combinations ===');\r\n          if (allCombinations.length === 0) {\r\n            console.log('No valid combinations found for any segment range');\r\n          } else {\r\n            console.log(`Found ${allCombinations.length} valid combinations`);\r\n            allCombinations.forEach(combo => {\r\n              const flightInfo = combo.map((flight, idx) => {\r\n                if (idx === 0) return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\r\n                \r\n                const prevFlight = combo[idx - 1];\r\n                const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\r\n                const hours = Math.floor(connectionTime / 60);\r\n                const minutes = connectionTime % 60;\r\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\r\n              });\r\n              \r\n              console.log(flightInfo.join(' → '));\r\n            });\r\n          }\r\n\r\n          // Create a map of valid flights by segment\r\n          const validFlightsBySegment = new Map();\r\n          allCombinations.forEach(combo => {\r\n            combo.forEach(flight => {\r\n              const segmentKey = flight.segmentIndex;\r\n              if (!validFlightsBySegment.has(segmentKey)) {\r\n                validFlightsBySegment.set(segmentKey, new Set());\r\n              }\r\n              validFlightsBySegment.get(segmentKey).add(\r\n                `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`\r\n              );\r\n            });\r\n          });\r\n\r\n          // Filter and process flights\r\n          const filteredFlights = [];\r\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\r\n            const segment = newProcessedSegments[i];\r\n            if (!segment || !segment.flights) continue;\r\n\r\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\r\n            \r\n            // Add valid flights from this segment\r\n            segment.flights.forEach(flight => {\r\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\r\n              if (validFlightsForSegment.has(flightKey)) {\r\n                const processedFlight = {\r\n                  ...flight,\r\n                  distance: flight.distance || 0,\r\n                  key: `${flight.from}-${flight.to}-${flight.flightNumber}`,\r\n                  isSelected: selectedFlights[i]?.some(\r\n                    (f) => f.flightNumber === flight.flightNumber\r\n                  ),\r\n                  segmentIndex: i\r\n                };\r\n                filteredFlights.push(processedFlight);\r\n              }\r\n            });\r\n          }\r\n\r\n          setSegmentDetails(filteredFlights);\r\n          setValidCombinations(allCombinations);\r\n\r\n          // Log flights by segment\r\n          console.log('\\n=== Flights By Segment ===');\r\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\r\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\r\n            if (segmentFlights.length > 0) {\r\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\r\n              segmentFlights\r\n                .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\r\n                .forEach(flight => {\r\n                  console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\r\n                });\r\n            }\r\n          }\r\n          \r\n          console.log('\\n======================');\r\n        } else {\r\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => \r\n            segment.flights.map(flight => ({\r\n              ...flight,\r\n              isSelected: false,\r\n              segmentIndex: index\r\n            }))\r\n          ));\r\n          setValidCombinations([]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching segment details:', error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    } finally {\r\n      setIsLoadingSegments(false);\r\n      setIsLoadingAvailability(false);\r\n    }\r\n  };\r\n\r\n  const handleCalendarSearch = async (currentRoute) => {\r\n    if (!currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingAvailability(true);\r\n    \r\n    try {\r\n      // Fetch availability data\r\n      const routeString = currentRoute.join('-');\r\n      const availabilityResponse = await fetch(\r\n        `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`,\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'accept': 'application/json',\r\n            'Partner-Authorization': apiKey\r\n          }\r\n        }\r\n      );\r\n\r\n      if (availabilityResponse.ok) {\r\n        const availabilityResult = await availabilityResponse.json();\r\n        \r\n        // Process availability data into a more usable format\r\n        const processedAvailability = {};\r\n        availabilityResult.forEach(item => {\r\n          const dateKey = item.date;\r\n          if (!processedAvailability[dateKey]) {\r\n            processedAvailability[dateKey] = [];\r\n          }\r\n          \r\n          processedAvailability[dateKey].push({\r\n            route: `${item.originAirport}-${item.destinationAirport}`,\r\n            classes: {\r\n              Y: item.YDirect,\r\n              J: item.JDirect,\r\n              F: item.FDirect\r\n            },\r\n            ID: item.ID,\r\n            distance: item.distance,\r\n            date: item.date\r\n          });\r\n        });\r\n        \r\n        setAvailabilityData(processedAvailability);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching availability data:', error);\r\n    } finally {\r\n      setIsLoadingAvailability(false);\r\n    }\r\n  };\r\n\r\n  const resetDetails = () => {\r\n    setSegmentDetails([]);\r\n    setIsLoadingSegments(false);\r\n    setSelectedFlights({});\r\n    setValidCombinations([]);\r\n    setProcessedSegments([]);\r\n    setOriginalFlights(null);\r\n    setProcessedFlights(null);\r\n    setInitialFlights(null);\r\n    setAvailabilityData({});\r\n    setIsLoadingAvailability(false);\r\n  };\r\n\r\n  const handleFlightSelect = (flight, segmentIndex) => {\r\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\r\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\r\n    \r\n    setSelectedFlights(prevSelected => {\r\n      const newSelected = { ...prevSelected };\r\n      \r\n      // Check if this exact flight is already selected\r\n      const isCurrentlySelected = newSelected[segmentIndex]?.some?.(f => {\r\n        const matches = f.flightNumber === flight.flightNumber && \r\n                       dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\r\n        if (matches) {\r\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\r\n        }\r\n        return matches;\r\n      });\r\n\r\n      if (isCurrentlySelected) {\r\n        // Remove only this specific flight from the selection\r\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\r\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\r\n          const keep = !(f.flightNumber === flight.flightNumber && \r\n                        dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\r\n          if (!keep) {\r\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\r\n          }\r\n          return keep;\r\n        });\r\n        if (newSelected[segmentIndex].length === 0) {\r\n          console.log(`Removing empty segment ${segmentIndex}`);\r\n          delete newSelected[segmentIndex];\r\n        }\r\n      } else {\r\n        // Add this flight to the selections\r\n        if (!newSelected[segmentIndex]) {\r\n          newSelected[segmentIndex] = [];\r\n        }\r\n        newSelected[segmentIndex].push(flight);\r\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\r\n      }\r\n\r\n      // Calculate layover durations for adjacent segments\r\n      const layoverDurations = {};\r\n      Object.keys(newSelected).forEach(idx => {\r\n        const currentIndex = parseInt(idx);\r\n        const nextIndex = currentIndex + 1;\r\n        \r\n        if (newSelected[nextIndex] && newSelected[currentIndex]) {\r\n          const currentFlight = newSelected[currentIndex][0];\r\n          const nextFlight = newSelected[nextIndex][0];\r\n          \r\n          const arrivalTime = dayjs(currentFlight.ArrivesAt);\r\n          const departureTime = dayjs(nextFlight.DepartsAt);\r\n          const duration = departureTime.diff(arrivalTime, 'minute');\r\n          \r\n          const hours = Math.floor(duration / 60);\r\n          const minutes = duration % 60;\r\n          layoverDurations[currentIndex] = `${hours}h ${minutes}m`;\r\n        }\r\n      });\r\n\r\n      // Find valid combinations that include ANY of the selected flights per segment\r\n      const validCombos = validCombinations.filter(combo => {\r\n        return Object.entries(newSelected).every(([selectedSegmentIndex, selectedFlights]) => {\r\n          const comboFlight = combo[selectedSegmentIndex];\r\n          return selectedFlights.some(selectedFlight => \r\n            comboFlight && \r\n            comboFlight.flightNumber === selectedFlight.flightNumber && \r\n            dayjs(comboFlight.DepartsAt).isSame(dayjs(selectedFlight.DepartsAt))\r\n          );\r\n        });\r\n      });\r\n\r\n      console.log(`\\nFound ${validCombos.length} valid combinations with selected flights`);\r\n\r\n      // Filter and process flights\r\n      const filteredFlights = validCombos.flatMap(combo => \r\n        combo.map((f, idx) => ({\r\n          ...f,\r\n          isSelected: newSelected[idx]?.some(sf => \r\n            sf.flightNumber === f.flightNumber && \r\n            dayjs(sf.DepartsAt).isSame(dayjs(f.DepartsAt))\r\n          ) || false,\r\n          segmentIndex: idx,\r\n          layoverDuration: layoverDurations[idx], // Add layover duration to flight data\r\n          distance: f.distance || 0\r\n        }))\r\n      );\r\n\r\n      // Remove duplicates while preserving selections and layover durations\r\n      const seenFlights = new Map();\r\n      const uniqueFlights = filteredFlights.filter(f => {\r\n        const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${f.segmentIndex}`;\r\n        if (!seenFlights.has(key)) {\r\n          seenFlights.set(key, { isSelected: f.isSelected, layoverDuration: f.layoverDuration, distance: f.distance });\r\n          return true;\r\n        }\r\n        const existing = seenFlights.get(key);\r\n        f.isSelected = f.isSelected || existing.isSelected;\r\n        f.layoverDuration = f.layoverDuration || existing.layoverDuration;\r\n        f.distance = f.distance || existing.distance;\r\n        return false;\r\n      });\r\n\r\n      setSegmentDetails(uniqueFlights);\r\n      return newSelected;\r\n    });\r\n  };\r\n\r\n  const columns = useMemo(() => {\r\n    if (!selectedDates) return getColumns(handleFlightSelect);\r\n    const [startDate] = selectedDates;\r\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\r\n  }, [handleFlightSelect, selectedDates, getColumns]);\r\n\r\n  // Initialize with all flights from all combinations\r\n  useEffect(() => {\r\n    console.log('Updating combinations ref:', initialCombinations);\r\n    combinationsRef.current = initialCombinations;\r\n  }, [initialCombinations]);\r\n\r\n  // Initialize segment details\r\n  useEffect(() => {\r\n    if (initialCombinations.length > 0) {\r\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => \r\n        combo.map((f, idx) => ({\r\n          ...f,\r\n          isSelected: false,\r\n          segmentIndex: idx\r\n        }))\r\n      );\r\n\r\n      const uniqueFlights = Array.from(\r\n        new Map(allFlights.map(f => [\r\n          `${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`,\r\n          f\r\n        ])).values()\r\n      );\r\n\r\n      setSegmentDetails(uniqueFlights);\r\n    }\r\n  }, [initialCombinations]);\r\n\r\n  return {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    handleCalendarSearch,\r\n    resetDetails,\r\n    columns,\r\n    selectedFlights,\r\n    availabilityData,\r\n    isLoadingAvailability,\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}