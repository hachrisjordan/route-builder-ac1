{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nguyen77\\\\docker-neo4j\\\\route-builder-ac1\\\\src\\\\pages\\\\FlightSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Select, InputNumber, Button, Table, Card, Tag, Spin, Input, Modal, DatePicker } from 'antd';\nimport { SearchOutlined, DownOutlined, CheckOutlined } from '@ant-design/icons';\nimport { airports } from '../data/airports';\nimport airlines from '../data/airlines';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport routeDetails from '../data/route_details.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndayjs.extend(utc);\nconst FlightSearch = () => {\n  _s();\n  const [departure, setDeparture] = useState(null);\n  const [arrival, setArrival] = useState(null);\n  const [selectedAirlines, setSelectedAirlines] = useState([]);\n  const [maxSegments, setMaxSegments] = useState(4);\n  const [searchResults, setSearchResults] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [pagination, setPagination] = useState({\n    current: 1,\n    pageSize: 25,\n    total: 0\n  });\n  const [errors, setErrors] = useState({\n    departure: false,\n    arrival: false,\n    maxSegments: false\n  });\n  const [tableSearchText, setTableSearchText] = useState('');\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [currentRoute, setCurrentRoute] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n\n  // Sort airlines alphabetically\n  const sortedAirlines = [...airlines].map(airline => ({\n    ...airline,\n    searchStr: `${airline.value} ${airline.label}`.toLowerCase()\n  })).sort((a, b) => a.label.localeCompare(b.label));\n  const airportSelectProps = {\n    showSearch: true,\n    allowClear: true,\n    suffixIcon: null,\n    options: airports.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`,\n      searchStr: `${airport.IATA} ${airport.Name}`.toLowerCase()\n    })),\n    filterOption: (input, option) => {\n      if (!input) return true;\n      input = input.toString().toLowerCase();\n\n      // IATA match\n      if (option.value.toLowerCase().includes(input)) {\n        option.priority = 2;\n        return true;\n      }\n\n      // Name/label match\n      if (option.label.toLowerCase().includes(input)) {\n        option.priority = 1;\n        return true;\n      }\n      return false;\n    },\n    filterSort: (optionA, optionB) => {\n      // Sort by priority (IATA matches first)\n      if (optionA.priority !== optionB.priority) {\n        return optionB.priority - optionA.priority;\n      }\n      // Then alphabetically\n      return optionA.label.localeCompare(optionB.label);\n    },\n    listHeight: 256,\n    virtual: true,\n    dropdownStyle: {\n      maxHeight: 400\n    }\n  };\n  const airlineSelectProps = {\n    showSearch: true,\n    allowClear: true,\n    filterSort: (optionA, optionB, input) => {\n      if (!input) return optionA.label.localeCompare(optionB.label);\n      const searchInput = input.toString().toLowerCase();\n      const aMatch = optionA.searchStr.includes(searchInput);\n      const bMatch = optionB.searchStr.includes(searchInput);\n      if (aMatch && !bMatch) return -1;\n      if (!aMatch && bMatch) return 1;\n      return optionA.label.localeCompare(optionB.label);\n    },\n    filterOption: (input, option) => {\n      if (!input) return true;\n      const searchInput = input.toString().toLowerCase();\n      return option.searchStr.includes(searchInput);\n    },\n    listHeight: 400,\n    virtual: false,\n    menuItemSelectedIcon: null,\n    dropdownStyle: {\n      maxHeight: 400\n    }\n  };\n  const columns = [{\n    title: 'Origin',\n    dataIndex: 'departure',\n    sorter: (a, b) => a.departure.localeCompare(b.departure),\n    width: 80\n  }, {\n    title: 'Connections',\n    key: 'connections',\n    render: (_, record) => /*#__PURE__*/_jsxDEV(\"span\", {\n      children: record.connections.length > 0 ? record.connections.join(' â†’ ') : '-'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this),\n    width: 200,\n    sorter: (a, b) => {\n      if (a.connections.length !== b.connections.length) {\n        return a.connections.length - b.connections.length;\n      }\n      return a.connections.join('').localeCompare(b.connections.join(''));\n    },\n    sortDirections: ['ascend', 'descend']\n  }, {\n    title: 'Destination',\n    dataIndex: 'arrival',\n    sorter: (a, b) => a.arrival.localeCompare(b.arrival),\n    width: 80\n  }, {\n    title: 'Stops',\n    dataIndex: 'numConnections',\n    sorter: (a, b) => a.numConnections - b.numConnections,\n    render: num => {\n      let color;\n      switch (num) {\n        case 0:\n          color = 'green';\n          break;\n        case 1:\n          color = 'blue';\n          break;\n        case 2:\n          color = 'orange';\n          break;\n        case 3:\n          color = 'gold';\n          break;\n        default:\n          color = 'red';\n      }\n      return /*#__PURE__*/_jsxDEV(Tag, {\n        color: color,\n        children: num === 0 ? 'Direct' : `${num} Stop${num > 1 ? 's' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this);\n    },\n    width: 80\n  }, {\n    title: 'Distance',\n    dataIndex: 'totalDistance',\n    sorter: (a, b) => a.totalDistance - b.totalDistance,\n    render: distance => distance.toLocaleString(),\n    width: 60,\n    align: 'right'\n  }, {\n    title: 'Economy',\n    dataIndex: 'YPrice',\n    sorter: (a, b) => a.YPrice - b.YPrice,\n    render: price => price.toLocaleString(),\n    width: 80,\n    align: 'right'\n  }, {\n    title: 'Business',\n    dataIndex: 'JPrice',\n    sorter: (a, b) => a.JPrice - b.JPrice,\n    render: price => price.toLocaleString(),\n    width: 80,\n    align: 'right'\n  }, {\n    title: 'First',\n    dataIndex: 'FPrice',\n    sorter: (a, b) => a.FPrice - b.FPrice,\n    render: price => price.toLocaleString(),\n    width: 80,\n    align: 'right'\n  }, {\n    title: 'Y %',\n    dataIndex: 'Ynet',\n    width: 160,\n    render: text => text || '-',\n    sorter: (a, b) => {\n      const getPercent = str => {\n        if (!str) return 0;\n        const match = str.match(/^(-?\\d+)/);\n        return match ? parseInt(match[0]) : 0;\n      };\n      return getPercent(a.Ynet) - getPercent(b.Ynet);\n    }\n  }, {\n    title: 'J %',\n    dataIndex: 'Jnet',\n    width: 160,\n    render: text => text || '-',\n    sorter: (a, b) => {\n      const getPercent = str => {\n        if (!str) return 0;\n        const match = str.match(/^(-?\\d+)/);\n        return match ? parseInt(match[0]) : 0;\n      };\n      return getPercent(a.Jnet) - getPercent(b.Jnet);\n    }\n  }, {\n    title: 'F %',\n    dataIndex: 'Fnet',\n    width: 160,\n    render: text => text || '-',\n    sorter: (a, b) => {\n      const getPercent = str => {\n        if (!str) return 0;\n        const match = str.match(/^(-?\\d+)/);\n        return match ? parseInt(match[0]) : 0;\n      };\n      return getPercent(a.Fnet) - getPercent(b.Fnet);\n    }\n  }, {\n    title: '',\n    key: 'actions',\n    width: 20,\n    render: (_, record) => /*#__PURE__*/_jsxDEV(Button, {\n      type: \"link\",\n      icon: /*#__PURE__*/_jsxDEV(DownOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this),\n      onClick: () => {\n        const fullRoute = [record.departure, ...record.connections, record.arrival];\n        setCurrentRoute(fullRoute);\n        setIsModalVisible(true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this)\n  }];\n  const handleSearch = async () => {\n    // Reset errors\n    setErrors({\n      departure: !departure,\n      arrival: !arrival,\n      maxSegments: !maxSegments\n    });\n\n    // Validate mandatory fields\n    if (!departure || !arrival || !maxSegments) {\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const response = await fetch('https://backend-284998006367.us-central1.run.app/api/find-routes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          departureAirport: departure,\n          arrivalAirport: arrival,\n          excludedAirline: selectedAirlines.length ? selectedAirlines[0] : \"null\",\n          maxSegments: maxSegments\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Search failed');\n      }\n      const data = await response.json();\n      setSearchResults(data);\n      setPagination(prev => ({\n        ...prev,\n        total: data.routes.length\n      }));\n    } catch (error) {\n      console.error('Search failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleTableChange = (newPagination, filters, sorter) => {\n    setPagination(newPagination);\n  };\n\n  // Filter function for the table data\n  const getFilteredData = () => {\n    if (!(searchResults !== null && searchResults !== void 0 && searchResults.routes) || !tableSearchText) {\n      return (searchResults === null || searchResults === void 0 ? void 0 : searchResults.routes) || [];\n    }\n    const searchLower = tableSearchText.toLowerCase();\n    return searchResults.routes.filter(route => {\n      // Convert all relevant fields to strings and check if they include the search text\n      return route.departure.toLowerCase().includes(searchLower) || route.arrival.toLowerCase().includes(searchLower) || route.connections.join(' ').toLowerCase().includes(searchLower) || route.YPrice.toString().includes(searchLower) || route.JPrice.toString().includes(searchLower) || route.FPrice.toString().includes(searchLower) || (route.Ynet || '').toLowerCase().includes(searchLower) || (route.Jnet || '').toLowerCase().includes(searchLower) || (route.Fnet || '').toLowerCase().includes(searchLower);\n    });\n  };\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const handleDateSearch = async () => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    const processedSegments = [];\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    try {\n      // Process all segments first\n      for (let i = 0; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        const prevSegment = processedSegments[i - 1];\n        let timeWindow = null;\n        if (prevSegment) {\n          if (prevSegment.flights.length === 0) {\n            const prevFrom = currentRoute[i - 1];\n            const prevTo = currentRoute[i];\n            const prevDistance = getSegmentDistance(prevFrom, prevTo);\n            const minConnectionHours = Math.ceil(prevDistance / 575);\n            const baseTime = prevSegment.earliestArrival || dayjs(baseDate);\n            const endTime = prevSegment.latestArrival || baseTime;\n            timeWindow = {\n              earliestDeparture: baseTime.add(minConnectionHours, 'hour'),\n              latestDeparture: endTime.add(24, 'hour').add(minConnectionHours, 'hour')\n            };\n          } else {\n            timeWindow = {\n              earliestDeparture: prevSegment.earliestArrival,\n              latestDeparture: prevSegment.latestArrival.add(24, 'hour')\n            };\n          }\n        }\n        const segment = await processSegment(from, to, baseDate, timeWindow);\n        processedSegments.push(segment);\n      }\n\n      // Now revisit first segment and filter out invalid connections\n      if (processedSegments.length >= 2 && processedSegments[1].flights.length > 0) {\n        console.log('\\nRevising first segment based on second segment departures:');\n        const firstSegment = processedSegments[0];\n        const secondSegment = processedSegments[1];\n        const earliestSecondDeparture = secondSegment.flights.map(f => dayjs(f.DepartsAt)).reduce((earliest, curr) => earliest.isBefore(curr) ? earliest : curr);\n        console.log(`  Second segment earliest departure: ${earliestSecondDeparture.format('YYYY-MM-DD HH:mm')}`);\n        firstSegment.flights = firstSegment.flights.filter(flight => {\n          const arrivalTime = dayjs(flight.ArrivesAt);\n          const arrivalDate = arrivalTime.format('YYYY-MM-DD');\n          const departureDate = earliestSecondDeparture.format('YYYY-MM-DD');\n\n          // If arrival is on an earlier date, keep it\n          if (arrivalDate < departureDate) {\n            console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - keep (earlier date)`);\n            return true;\n          }\n\n          // If same date, compare times\n          if (arrivalDate === departureDate) {\n            const isValid = arrivalTime.isBefore(earliestSecondDeparture);\n            console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - ${isValid ? 'keep' : 'remove'} (same date)`);\n            return isValid;\n          }\n\n          // If arrival is on a later date, remove it\n          console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - remove (later date)`);\n          return false;\n        });\n\n        // Update arrival bounds if needed\n        if (firstSegment.flights.length > 0) {\n          firstSegment.earliestArrival = dayjs(firstSegment.flights[0].ArrivesAt);\n          firstSegment.latestArrival = dayjs(firstSegment.flights[firstSegment.flights.length - 1].ArrivesAt);\n        } else {\n          firstSegment.earliestArrival = null;\n          firstSegment.latestArrival = null;\n        }\n      }\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\n    } catch (error) {\n      console.error('Error fetching segment details:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const processSegment = async (from, to, baseDate, timeWindow = null, nextSegmentFlights = null) => {\n    var _timeWindow;\n    const API_URL = 'https://backend-284998006367.us-central1.run.app';\n    const dates = new Set();\n\n    // Add base date\n    dates.add(baseDate);\n\n    // Add next day if time window extends to it\n    if ((_timeWindow = timeWindow) !== null && _timeWindow !== void 0 && _timeWindow.latestDeparture) {\n      const nextDay = dayjs(baseDate).add(1, 'day').format('YYYY-MM-DD');\n      if (timeWindow.latestDeparture.isAfter(dayjs(nextDay))) {\n        dates.add(nextDay);\n      }\n    }\n    const flights = [];\n    let earliestArrival = null;\n    let latestArrival = null;\n    console.log(`Processing route ${from}-${to}:`);\n\n    // Process each date\n    for (const date of dates) {\n      const route = routeDetails.find(r => r.origin === from && r.destination === to && r.date === date);\n      if (route) {\n        console.log(`  Found segment ID ${route.ID} for date ${date}`);\n        try {\n          var _data$results, _data$results$, _data$results$$data;\n          const response = await fetch(`${API_URL}/api/seats/${route.ID}`, {\n            method: 'GET',\n            headers: {\n              'accept': 'application/json',\n              'Partner-Authorization': apiKey,\n              'Segment-ID': route.ID\n            }\n          });\n          if (!response.ok) {\n            console.log(`  Failed to fetch segment ${route.ID}: ${response.status}`);\n            continue;\n          }\n          const data = await response.json();\n\n          // For non-first segments, check if there are any next segment flights\n          if (timeWindow && (_data$results = data.results) !== null && _data$results !== void 0 && (_data$results$ = _data$results[0]) !== null && _data$results$ !== void 0 && (_data$results$$data = _data$results$.data) !== null && _data$results$$data !== void 0 && _data$results$$data.data) {\n            const nextSegmentFlights = data.results[0].data.data;\n            if (nextSegmentFlights.length === 1) {\n              const nextFlight = nextSegmentFlights[0];\n              const nextDeparture = dayjs(nextFlight.DepartsAt.replace('Z', ''));\n\n              // Add minimum connection time (e.g., 1 hour)\n              const minConnectionTime = 1;\n              const maxConnectionTime = 4; // Maximum 4 hours connection time\n\n              // Modify timeWindow to only allow flights that make viable connections\n              timeWindow = {\n                earliestDeparture: timeWindow.earliestDeparture,\n                latestDeparture: nextDeparture.subtract(minConnectionTime, 'hour'),\n                nextFlightDeparture: nextDeparture,\n                maxConnectionTime: maxConnectionTime\n              };\n              console.log(`  Adjusting time window for single next flight:\n    Next flight departs: ${nextDeparture.format('YYYY-MM-DD HH:mm')}\n    Must arrive by: ${timeWindow.latestDeparture.format('YYYY-MM-DD HH:mm')}\n    Maximum connection time: ${maxConnectionTime} hours`);\n            }\n          }\n          const validFlights = processFlightData(data, timeWindow);\n          console.log(`  Segment ${route.ID}: Found ${validFlights.length} valid flights`);\n          flights.push(...validFlights);\n\n          // Update arrival time bounds\n          validFlights.forEach(flight => {\n            const arrivalTime = dayjs(flight.ArrivesAt);\n            if (!earliestArrival || arrivalTime.isBefore(earliestArrival)) {\n              earliestArrival = arrivalTime;\n            }\n            if (!latestArrival || arrivalTime.isAfter(latestArrival)) {\n              latestArrival = arrivalTime;\n            }\n          });\n        } catch (error) {\n          console.error(`  Error fetching segment ${route.ID}:`, error);\n        }\n      } else {\n        console.log(`  No segment found for ${from}-${to} on ${date}`);\n      }\n    }\n\n    // If this is first segment and we have next segment data, get latest possible arrival\n    let latestPossibleArrival = null;\n    if (nextSegmentFlights && nextSegmentFlights.length > 0) {\n      // Find earliest departure in next segment\n      const earliestNextDeparture = nextSegmentFlights.map(f => dayjs(f.DepartsAt.replace('Z', ''))).reduce((earliest, curr) => earliest.isBefore(curr) ? earliest : curr);\n      latestPossibleArrival = earliestNextDeparture;\n      console.log(`  Latest possible arrival for connection: ${latestPossibleArrival.format('YYYY-MM-DD HH:mm')}`);\n    }\n    return {\n      route: `${from}-${to}`,\n      flights,\n      earliestArrival,\n      latestArrival\n    };\n  };\n  const processFlightData = (data, timeWindow) => {\n    var _data$results2, _data$results2$, _data$results2$$data;\n    const flights = {};\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    const rawFlights = ((_data$results2 = data.results) === null || _data$results2 === void 0 ? void 0 : (_data$results2$ = _data$results2[0]) === null || _data$results2$ === void 0 ? void 0 : (_data$results2$$data = _data$results2$.data) === null || _data$results2$$data === void 0 ? void 0 : _data$results2$$data.data) || [];\n    console.log(`  Processing ${rawFlights.length} raw flights`);\n    rawFlights.filter(trip => {\n      if (trip.Stops !== 0) {\n        console.log(`  Skipping flight with ${trip.Stops} stops`);\n        return false;\n      }\n      if (timeWindow) {\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n        const isValid = departureTime.isAfter(timeWindow.earliestDeparture) && departureTime.isBefore(timeWindow.latestDeparture);\n        if (!isValid) {\n          console.log(`  Skipping flight outside time window: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n        }\n        return isValid;\n      }\n      return true;\n    }).forEach(trip => {\n      const flightNumber = trip.FlightNumbers;\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n      const existingFlight = flights[flightNumber];\n\n      // If this is a duplicate flight, only keep the later one\n      if (existingFlight) {\n        const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n        if (departureTime.isBefore(existingDeparture)) {\n          return; // Skip this one, keep the existing later flight\n        }\n      }\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\n      const baseDayjs = dayjs(baseDate);\n\n      // Calculate day difference from base date\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(trip.Carriers),\n        aircraft: trip.Aircraft[0],\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: trip.DepartsAt.replace('Z', ''),\n        // Store without Z\n        ArrivesAt: trip.ArrivesAt.replace('Z', ''),\n        // Store without Z\n        economy: false,\n        business: false,\n        first: false\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const segmentColumns = [{\n    title: 'From',\n    dataIndex: 'from',\n    width: 80,\n    sorter: (a, b) => a.from.localeCompare(b.from)\n  }, {\n    title: 'To',\n    dataIndex: 'to',\n    width: 80,\n    sorter: (a, b) => a.to.localeCompare(b.to)\n  }, {\n    title: 'Flight',\n    dataIndex: 'flightNumber',\n    width: 100,\n    sorter: (a, b) => a.flightNumber.localeCompare(b.flightNumber)\n  }, {\n    title: 'Airlines',\n    dataIndex: 'airlines',\n    width: 150,\n    sorter: (a, b) => a.airlines.localeCompare(b.airlines)\n  }, {\n    title: 'Aircraft',\n    dataIndex: 'aircraft',\n    width: 180,\n    sorter: (a, b) => a.aircraft.localeCompare(b.aircraft)\n  }, {\n    title: 'Departs',\n    dataIndex: 'departs',\n    width: 100,\n    sorter: (a, b) => {\n      // Extract day difference\n      const aDayDiff = a.departs.includes('+') ? parseInt(a.departs.match(/\\+(\\d+)/)[1]) : 0;\n      const bDayDiff = b.departs.includes('+') ? parseInt(b.departs.match(/\\+(\\d+)/)[1]) : 0;\n\n      // Extract time\n      const aTime = a.departs.split(' ')[0];\n      const bTime = b.departs.split(' ')[0];\n\n      // Compare days first, then times\n      if (aDayDiff !== bDayDiff) {\n        return aDayDiff - bDayDiff;\n      }\n      return aTime.localeCompare(bTime);\n    },\n    defaultSortOrder: 'ascend'\n  }, {\n    title: 'Arrives',\n    dataIndex: 'arrives',\n    width: 100,\n    sorter: (a, b) => {\n      // Extract day difference\n      const aDayDiff = a.arrives.includes('+') ? parseInt(a.arrives.match(/\\+(\\d+)/)[1]) : 0;\n      const bDayDiff = b.arrives.includes('+') ? parseInt(b.arrives.match(/\\+(\\d+)/)[1]) : 0;\n\n      // Extract time\n      const aTime = a.arrives.split(' ')[0];\n      const bTime = b.arrives.split(' ')[0];\n\n      // Compare days first, then times\n      if (aDayDiff !== bDayDiff) {\n        return aDayDiff - bDayDiff;\n      }\n      return aTime.localeCompare(bTime);\n    }\n  }, {\n    title: 'Economy',\n    dataIndex: 'economy',\n    width: 60,\n    align: 'center',\n    sorter: (a, b) => a.economy === b.economy ? 0 : a.economy ? -1 : 1,\n    render: hasClass => hasClass ? /*#__PURE__*/_jsxDEV(CheckOutlined, {\n      style: {\n        color: '#52c41a'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 38\n    }, this) : null\n  }, {\n    title: 'Business',\n    dataIndex: 'business',\n    width: 60,\n    align: 'center',\n    sorter: (a, b) => a.business === b.business ? 0 : a.business ? -1 : 1,\n    render: hasClass => hasClass ? /*#__PURE__*/_jsxDEV(CheckOutlined, {\n      style: {\n        color: '#52c41a'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 38\n    }, this) : null\n  }, {\n    title: 'First',\n    dataIndex: 'first',\n    width: 60,\n    align: 'center',\n    sorter: (a, b) => a.first === b.first ? 0 : a.first ? -1 : 1,\n    render: hasClass => hasClass ? /*#__PURE__*/_jsxDEV(CheckOutlined, {\n      style: {\n        color: '#52c41a'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 38\n    }, this) : null\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flight-search-container\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      className: \"search-form\",\n      style: {\n        boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flight-search-element\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"element-label\",\n          children: \"Departure Airport: *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          ...airportSelectProps,\n          value: departure,\n          onChange: setDeparture,\n          placeholder: \"Select departure airport...\",\n          className: \"airport-select\",\n          status: errors.departure ? 'error' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flight-search-element\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"element-label\",\n          children: \"Arrival Airport: *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 772,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          ...airportSelectProps,\n          value: arrival,\n          onChange: setArrival,\n          placeholder: \"Select arrival airport...\",\n          className: \"airport-select\",\n          status: errors.arrival ? 'error' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 773,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flight-search-element\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"element-label\",\n          children: \"Airlines Excluded:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          ...airlineSelectProps,\n          mode: \"multiple\",\n          value: selectedAirlines,\n          onChange: setSelectedAirlines,\n          options: sortedAirlines,\n          placeholder: \"Select airlines...\",\n          className: \"airline-select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"segments-element\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"element-label\",\n          children: \"Maximum Segments *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputNumber, {\n          min: 1,\n          max: 5,\n          value: maxSegments,\n          onChange: setMaxSegments,\n          status: errors.maxSegments ? 'error' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        icon: /*#__PURE__*/_jsxDEV(SearchOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 17\n        }, this),\n        onClick: handleSearch,\n        loading: isLoading,\n        className: \"search-button\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 7\n    }, this), searchResults && /*#__PURE__*/_jsxDEV(Card, {\n      className: \"results-card\",\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Search Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Search routes...\",\n          value: tableSearchText,\n          onChange: e => setTableSearchText(e.target.value),\n          style: {\n            width: 200\n          },\n          allowClear: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 13\n      }, this),\n      style: {\n        boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)'\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        dataSource: getFilteredData(),\n        columns: columns,\n        rowKey: (record, index) => index,\n        pagination: {\n          ...pagination,\n          showSizeChanger: true,\n          showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} routes`,\n          pageSizeOptions: ['10', '25', '50', '100'],\n          defaultPageSize: 25\n        },\n        loading: isLoading,\n        onChange: handleTableChange,\n        scroll: {\n          x: 1600\n        },\n        showSorterTooltip: true,\n        sortDirections: ['ascend', 'descend']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 835,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 819,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Flight Details\",\n      open: isModalVisible,\n      onOk: handleDateSearch,\n      onCancel: () => {\n        setIsModalVisible(false);\n        setSelectedDates(null);\n        setApiKey('');\n        setSegmentDetails([]);\n      },\n      okText: \"Search Flights\",\n      okButtonProps: {\n        disabled: !selectedDates || !apiKey,\n        loading: isLoadingSegments\n      },\n      width: 1500,\n      styles: {\n        body: {\n          padding: '12px',\n          maxWidth: '100%'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 16\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 8\n          },\n          children: \"Select Travel Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 879,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          style: {\n            width: '100%'\n          },\n          onChange: date => setSelectedDates(date),\n          disabledDate: current => current && current < dayjs().startOf('day')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 880,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 878,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 16\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 8\n          },\n          children: \"API Key:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Enter API key\",\n          value: apiKey,\n          onChange: e => setApiKey(e.target.value),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 9\n      }, this), isLoadingSegments ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          padding: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          overflowX: 'auto'\n        },\n        children: currentRoute && currentRoute.slice(0, -1).map((from, index) => {\n          const to = currentRoute[index + 1];\n          const routeKey = `${from}-${to}`;\n          const flights = segmentDetails.filter(flight => flight.from === from && flight.to === to);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '24px',\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                marginBottom: '16px'\n              },\n              children: routeKey\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 916,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Table, {\n              dataSource: flights,\n              columns: segmentColumns,\n              size: \"small\",\n              rowKey: (record, index) => `${routeKey}-${index}`,\n              sortDirections: ['ascend', 'descend'],\n              style: {\n                width: '100%',\n                tableLayout: 'fixed'\n              },\n              pagination: {\n                defaultPageSize: 10,\n                showSizeChanger: true,\n                showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} flights`,\n                pageSizeOptions: ['10', '20', '50', 'all'],\n                position: ['bottomRight']\n              },\n              locale: {\n                emptyText: 'No flights available'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 917,\n              columnNumber: 19\n            }, this)]\n          }, routeKey, true, {\n            fileName: _jsxFileName,\n            lineNumber: 912,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 900,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 855,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .flight-search-container {\n          max-width: 1200px;\n          margin: 20px auto;\n          padding: 0 20px;\n        }\n        .search-form {\n          margin-bottom: 20px;\n        }\n        .flight-search-element {\n          margin-bottom: 16px;\n        }\n        .element-label {\n          margin-bottom: 8px;\n          font-weight: 500;\n        }\n        .element-label::after {\n          content: \" *\";\n          color: #ff4d4f;\n          display: none;\n        }\n        .element-label:has(+ [data-required=\"true\"])::after {\n          display: inline;\n        }\n        .airport-select,\n        .airline-select {\n          width: 100%;\n        }\n        .segments-element {\n          margin-bottom: 16px;\n        }\n        .search-button {\n          margin-top: 24px;\n          width: 100%;\n        }\n        .results-card {\n          margin-top: 24px;\n        }\n        :global(.ant-table) {\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 945,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 754,\n    columnNumber: 5\n  }, this);\n};\n_s(FlightSearch, \"Nvyw4j7nZS9o2gbfGyYgjNg+y7E=\");\n_c = FlightSearch;\nexport default FlightSearch;\nvar _c;\n$RefreshReg$(_c, \"FlightSearch\");","map":{"version":3,"names":["React","useState","useEffect","Select","InputNumber","Button","Table","Card","Tag","Spin","Input","Modal","DatePicker","SearchOutlined","DownOutlined","CheckOutlined","airports","airlines","dayjs","utc","routeDetails","jsxDEV","_jsxDEV","extend","FlightSearch","_s","departure","setDeparture","arrival","setArrival","selectedAirlines","setSelectedAirlines","maxSegments","setMaxSegments","searchResults","setSearchResults","isLoading","setIsLoading","pagination","setPagination","current","pageSize","total","errors","setErrors","tableSearchText","setTableSearchText","isModalVisible","setIsModalVisible","selectedDates","setSelectedDates","currentRoute","setCurrentRoute","apiKey","setApiKey","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","sortedAirlines","map","airline","searchStr","value","label","toLowerCase","sort","a","b","localeCompare","airportSelectProps","showSearch","allowClear","suffixIcon","options","airport","IATA","Name","Country","filterOption","input","option","toString","includes","priority","filterSort","optionA","optionB","listHeight","virtual","dropdownStyle","maxHeight","airlineSelectProps","searchInput","aMatch","bMatch","menuItemSelectedIcon","columns","title","dataIndex","sorter","width","key","render","_","record","children","connections","length","join","fileName","_jsxFileName","lineNumber","columnNumber","sortDirections","numConnections","num","color","totalDistance","distance","toLocaleString","align","YPrice","price","JPrice","FPrice","text","getPercent","str","match","parseInt","Ynet","Jnet","Fnet","type","icon","onClick","fullRoute","handleSearch","response","fetch","method","headers","body","JSON","stringify","departureAirport","arrivalAirport","excludedAirline","ok","Error","data","json","prev","routes","error","console","handleTableChange","newPagination","filters","getFilteredData","searchLower","filter","route","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","find","replace","handleDateSearch","processedSegments","i","from","to","prevSegment","timeWindow","flights","prevFrom","prevTo","prevDistance","getSegmentDistance","minConnectionHours","Math","ceil","baseTime","earliestArrival","endTime","latestArrival","earliestDeparture","add","latestDeparture","segment","processSegment","push","log","firstSegment","secondSegment","earliestSecondDeparture","f","DepartsAt","reduce","earliest","curr","isBefore","flight","arrivalTime","ArrivesAt","arrivalDate","departureDate","flightNumber","isValid","flatMap","nextSegmentFlights","_timeWindow","API_URL","dates","Set","nextDay","isAfter","r","origin","destination","ID","_data$results","_data$results$","_data$results$$data","status","results","nextFlight","nextDeparture","minConnectionTime","maxConnectionTime","subtract","nextFlightDeparture","validFlights","processFlightData","forEach","latestPossibleArrival","earliestNextDeparture","_data$results2","_data$results2$","_data$results2$$data","rawFlights","trip","Stops","departureTime","FlightNumbers","existingFlight","existingDeparture","baseDayjs","departDayDiff","diff","arrivalDayDiff","OriginAirport","DestinationAirport","Carriers","aircraft","Aircraft","departs","arrives","economy","business","first","Cabin","Object","values","segmentColumns","aDayDiff","bDayDiff","aTime","split","bTime","defaultSortOrder","hasClass","style","className","boxShadow","onChange","placeholder","mode","min","max","loading","display","justifyContent","alignItems","e","target","dataSource","rowKey","index","showSizeChanger","showTotal","range","pageSizeOptions","defaultPageSize","scroll","x","showSorterTooltip","open","onOk","onCancel","okText","okButtonProps","disabled","styles","padding","maxWidth","marginBottom","disabledDate","startOf","textAlign","overflowX","slice","routeKey","size","tableLayout","position","locale","emptyText","jsx","_c","$RefreshReg$"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/pages/FlightSearch.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Select, InputNumber, Button, Table, Card, Tag, Spin, Input, Modal, DatePicker } from 'antd';\r\nimport { SearchOutlined, DownOutlined, CheckOutlined } from '@ant-design/icons';\r\nimport { airports } from '../data/airports';\r\nimport airlines from '../data/airlines';\r\nimport dayjs from 'dayjs';\r\nimport utc from 'dayjs/plugin/utc';\r\nimport routeDetails from '../data/route_details.json';\r\ndayjs.extend(utc);\r\n\r\nconst FlightSearch = () => {\r\n  const [departure, setDeparture] = useState(null);\r\n  const [arrival, setArrival] = useState(null);\r\n  const [selectedAirlines, setSelectedAirlines] = useState([]);\r\n  const [maxSegments, setMaxSegments] = useState(4);\r\n  const [searchResults, setSearchResults] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [pagination, setPagination] = useState({\r\n    current: 1,\r\n    pageSize: 25,\r\n    total: 0,\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    departure: false,\r\n    arrival: false,\r\n    maxSegments: false\r\n  });\r\n  const [tableSearchText, setTableSearchText] = useState('');\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [selectedDates, setSelectedDates] = useState(null);\r\n  const [currentRoute, setCurrentRoute] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [segmentDetails, setSegmentDetails] = useState([]);\r\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\r\n\r\n  // Sort airlines alphabetically\r\n  const sortedAirlines = [...airlines]\r\n    .map(airline => ({\r\n      ...airline,\r\n      searchStr: `${airline.value} ${airline.label}`.toLowerCase()\r\n    }))\r\n    .sort((a, b) => a.label.localeCompare(b.label));\r\n\r\n  const airportSelectProps = {\r\n    showSearch: true,\r\n    allowClear: true,\r\n    suffixIcon: null,\r\n    options: airports.map(airport => ({\r\n      value: airport.IATA,\r\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`,\r\n      searchStr: `${airport.IATA} ${airport.Name}`.toLowerCase()\r\n    })),\r\n    filterOption: (input, option) => {\r\n      if (!input) return true;\r\n      input = input.toString().toLowerCase();\r\n      \r\n      // IATA match\r\n      if (option.value.toLowerCase().includes(input)) {\r\n        option.priority = 2;\r\n        return true;\r\n      }\r\n      \r\n      // Name/label match\r\n      if (option.label.toLowerCase().includes(input)) {\r\n        option.priority = 1;\r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    },\r\n    filterSort: (optionA, optionB) => {\r\n      // Sort by priority (IATA matches first)\r\n      if (optionA.priority !== optionB.priority) {\r\n        return optionB.priority - optionA.priority;\r\n      }\r\n      // Then alphabetically\r\n      return optionA.label.localeCompare(optionB.label);\r\n    },\r\n    listHeight: 256,\r\n    virtual: true,\r\n    dropdownStyle: { maxHeight: 400 }\r\n  };\r\n\r\n  const airlineSelectProps = {\r\n    showSearch: true,\r\n    allowClear: true,\r\n    filterSort: (optionA, optionB, input) => {\r\n      if (!input) return optionA.label.localeCompare(optionB.label);\r\n      \r\n      const searchInput = input.toString().toLowerCase();\r\n      const aMatch = optionA.searchStr.includes(searchInput);\r\n      const bMatch = optionB.searchStr.includes(searchInput);\r\n      \r\n      if (aMatch && !bMatch) return -1;\r\n      if (!aMatch && bMatch) return 1;\r\n\r\n      return optionA.label.localeCompare(optionB.label);\r\n    },\r\n    filterOption: (input, option) => {\r\n      if (!input) return true;\r\n      const searchInput = input.toString().toLowerCase();\r\n      return option.searchStr.includes(searchInput);\r\n    },\r\n    listHeight: 400,\r\n    virtual: false,\r\n    menuItemSelectedIcon: null,\r\n    dropdownStyle: { maxHeight: 400 }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Origin',\r\n      dataIndex: 'departure',\r\n      sorter: (a, b) => a.departure.localeCompare(b.departure),\r\n      width: 80,\r\n    },\r\n    {\r\n      title: 'Connections',\r\n      key: 'connections',\r\n      render: (_, record) => (\r\n        <span>\r\n          {record.connections.length > 0 \r\n            ? record.connections.join(' â†’ ')\r\n            : '-'}\r\n        </span>\r\n      ),\r\n      width: 200,\r\n      sorter: (a, b) => {\r\n        if (a.connections.length !== b.connections.length) {\r\n          return a.connections.length - b.connections.length;\r\n        }\r\n        return a.connections.join('').localeCompare(b.connections.join(''));\r\n      },\r\n      sortDirections: ['ascend', 'descend'],\r\n    },\r\n    {\r\n      title: 'Destination',\r\n      dataIndex: 'arrival',\r\n      sorter: (a, b) => a.arrival.localeCompare(b.arrival),\r\n      width: 80,\r\n    },\r\n    {\r\n      title: 'Stops',\r\n      dataIndex: 'numConnections',\r\n      sorter: (a, b) => a.numConnections - b.numConnections,\r\n      render: (num) => {\r\n        let color;\r\n        switch (num) {\r\n          case 0: color = 'green'; break;\r\n          case 1: color = 'blue'; break;\r\n          case 2: color = 'orange'; break;\r\n          case 3: color = 'gold'; break;\r\n          default: color = 'red';\r\n        }\r\n        return (\r\n          <Tag color={color}>\r\n            {num === 0 ? 'Direct' : `${num} Stop${num > 1 ? 's' : ''}`}\r\n          </Tag>\r\n        );\r\n      },\r\n      width: 80,\r\n    },\r\n    {\r\n      title: 'Distance',\r\n      dataIndex: 'totalDistance',\r\n      sorter: (a, b) => a.totalDistance - b.totalDistance,\r\n      render: (distance) => distance.toLocaleString(),\r\n      width: 60,\r\n      align: 'right',\r\n    },\r\n    {\r\n      title: 'Economy',\r\n      dataIndex: 'YPrice',\r\n      sorter: (a, b) => a.YPrice - b.YPrice,\r\n      render: (price) => price.toLocaleString(),\r\n      width: 80,\r\n      align: 'right',\r\n    },\r\n    {\r\n      title: 'Business',\r\n      dataIndex: 'JPrice',\r\n      sorter: (a, b) => a.JPrice - b.JPrice,\r\n      render: (price) => price.toLocaleString(),\r\n      width: 80,\r\n      align: 'right',\r\n    },\r\n    {\r\n      title: 'First',\r\n      dataIndex: 'FPrice',\r\n      sorter: (a, b) => a.FPrice - b.FPrice,\r\n      render: (price) => price.toLocaleString(),\r\n      width: 80,\r\n      align: 'right',\r\n    },\r\n    {\r\n      title: 'Y %',\r\n      dataIndex: 'Ynet',\r\n      width: 160,\r\n      render: (text) => text || '-',\r\n      sorter: (a, b) => {\r\n        const getPercent = (str) => {\r\n          if (!str) return 0;\r\n          const match = str.match(/^(-?\\d+)/);\r\n          return match ? parseInt(match[0]) : 0;\r\n        };\r\n        return getPercent(a.Ynet) - getPercent(b.Ynet);\r\n      },\r\n    },\r\n    {\r\n      title: 'J %',\r\n      dataIndex: 'Jnet',\r\n      width: 160,\r\n      render: (text) => text || '-',\r\n      sorter: (a, b) => {\r\n        const getPercent = (str) => {\r\n          if (!str) return 0;\r\n          const match = str.match(/^(-?\\d+)/);\r\n          return match ? parseInt(match[0]) : 0;\r\n        };\r\n        return getPercent(a.Jnet) - getPercent(b.Jnet);\r\n      },\r\n    },\r\n    {\r\n      title: 'F %',\r\n      dataIndex: 'Fnet',\r\n      width: 160,\r\n      render: (text) => text || '-',\r\n      sorter: (a, b) => {\r\n        const getPercent = (str) => {\r\n          if (!str) return 0;\r\n          const match = str.match(/^(-?\\d+)/);\r\n          return match ? parseInt(match[0]) : 0;\r\n        };\r\n        return getPercent(a.Fnet) - getPercent(b.Fnet);\r\n      },\r\n    },\r\n    {\r\n      title: '',\r\n      key: 'actions',\r\n      width: 20,\r\n      render: (_, record) => (\r\n        <Button \r\n          type=\"link\" \r\n          icon={<DownOutlined />}\r\n          onClick={() => {\r\n            const fullRoute = [record.departure, ...record.connections, record.arrival];\r\n            setCurrentRoute(fullRoute);\r\n            setIsModalVisible(true);\r\n          }}\r\n        />\r\n      ),\r\n    }\r\n  ];\r\n\r\n  const handleSearch = async () => {\r\n    // Reset errors\r\n    setErrors({\r\n      departure: !departure,\r\n      arrival: !arrival,\r\n      maxSegments: !maxSegments\r\n    });\r\n\r\n    // Validate mandatory fields\r\n    if (!departure || !arrival || !maxSegments) {\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch('https://backend-284998006367.us-central1.run.app/api/find-routes', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          departureAirport: departure,\r\n          arrivalAirport: arrival,\r\n          excludedAirline: selectedAirlines.length ? selectedAirlines[0] : \"null\",\r\n          maxSegments: maxSegments\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Search failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setSearchResults(data);\r\n      setPagination(prev => ({\r\n        ...prev,\r\n        total: data.routes.length\r\n      }));\r\n    } catch (error) {\r\n      console.error('Search failed:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTableChange = (newPagination, filters, sorter) => {\r\n    setPagination(newPagination);\r\n  };\r\n\r\n  // Filter function for the table data\r\n  const getFilteredData = () => {\r\n    if (!searchResults?.routes || !tableSearchText) {\r\n      return searchResults?.routes || [];\r\n    }\r\n\r\n    const searchLower = tableSearchText.toLowerCase();\r\n    return searchResults.routes.filter(route => {\r\n      // Convert all relevant fields to strings and check if they include the search text\r\n      return (\r\n        route.departure.toLowerCase().includes(searchLower) ||\r\n        route.arrival.toLowerCase().includes(searchLower) ||\r\n        route.connections.join(' ').toLowerCase().includes(searchLower) ||\r\n        route.YPrice.toString().includes(searchLower) ||\r\n        route.JPrice.toString().includes(searchLower) ||\r\n        route.FPrice.toString().includes(searchLower) ||\r\n        (route.Ynet || '').toLowerCase().includes(searchLower) ||\r\n        (route.Jnet || '').toLowerCase().includes(searchLower) ||\r\n        (route.Fnet || '').toLowerCase().includes(searchLower)\r\n      );\r\n    });\r\n  };\r\n\r\n  const formatTime = (dateStr, baseDate) => {\r\n    const date = dayjs(dateStr);\r\n    const base = dayjs(baseDate);\r\n    \r\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\r\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\r\n    \r\n    const timeStr = date.format('HH:mm');\r\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\r\n  };\r\n\r\n  const getAirlineName = (code) => {\r\n    const airline = airlines.find(a => a.value === code);\r\n    return airline ? airline.label.replace(` (${code})`, '') : code;\r\n  };\r\n\r\n  const handleDateSearch = async () => {\r\n    if (!selectedDates || !currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingSegments(true);\r\n    const processedSegments = [];\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    try {\r\n      // Process all segments first\r\n      for (let i = 0; i < currentRoute.length - 1; i++) {\r\n        const from = currentRoute[i];\r\n        const to = currentRoute[i + 1];\r\n        const prevSegment = processedSegments[i - 1];\r\n        \r\n        let timeWindow = null;\r\n        if (prevSegment) {\r\n          if (prevSegment.flights.length === 0) {\r\n            const prevFrom = currentRoute[i - 1];\r\n            const prevTo = currentRoute[i];\r\n            const prevDistance = getSegmentDistance(prevFrom, prevTo);\r\n            const minConnectionHours = Math.ceil(prevDistance / 575);\r\n            \r\n            const baseTime = prevSegment.earliestArrival || dayjs(baseDate);\r\n            const endTime = prevSegment.latestArrival || baseTime;\r\n            \r\n            timeWindow = {\r\n              earliestDeparture: baseTime.add(minConnectionHours, 'hour'),\r\n              latestDeparture: endTime.add(24, 'hour').add(minConnectionHours, 'hour')\r\n            };\r\n          } else {\r\n            timeWindow = {\r\n              earliestDeparture: prevSegment.earliestArrival,\r\n              latestDeparture: prevSegment.latestArrival.add(24, 'hour')\r\n            };\r\n          }\r\n        }\r\n\r\n        const segment = await processSegment(from, to, baseDate, timeWindow);\r\n        processedSegments.push(segment);\r\n      }\r\n\r\n      // Now revisit first segment and filter out invalid connections\r\n      if (processedSegments.length >= 2 && processedSegments[1].flights.length > 0) {\r\n        console.log('\\nRevising first segment based on second segment departures:');\r\n        const firstSegment = processedSegments[0];\r\n        const secondSegment = processedSegments[1];\r\n        \r\n        const earliestSecondDeparture = secondSegment.flights\r\n          .map(f => dayjs(f.DepartsAt))\r\n          .reduce((earliest, curr) => earliest.isBefore(curr) ? earliest : curr);\r\n        \r\n        console.log(`  Second segment earliest departure: ${earliestSecondDeparture.format('YYYY-MM-DD HH:mm')}`);\r\n        \r\n        firstSegment.flights = firstSegment.flights.filter(flight => {\r\n          const arrivalTime = dayjs(flight.ArrivesAt);\r\n          const arrivalDate = arrivalTime.format('YYYY-MM-DD');\r\n          const departureDate = earliestSecondDeparture.format('YYYY-MM-DD');\r\n          \r\n          // If arrival is on an earlier date, keep it\r\n          if (arrivalDate < departureDate) {\r\n            console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - keep (earlier date)`);\r\n            return true;\r\n          }\r\n          \r\n          // If same date, compare times\r\n          if (arrivalDate === departureDate) {\r\n            const isValid = arrivalTime.isBefore(earliestSecondDeparture);\r\n            console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - ${isValid ? 'keep' : 'remove'} (same date)`);\r\n            return isValid;\r\n          }\r\n          \r\n          // If arrival is on a later date, remove it\r\n          console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - remove (later date)`);\r\n          return false;\r\n        });\r\n\r\n        // Update arrival bounds if needed\r\n        if (firstSegment.flights.length > 0) {\r\n          firstSegment.earliestArrival = dayjs(firstSegment.flights[0].ArrivesAt);\r\n          firstSegment.latestArrival = dayjs(firstSegment.flights[firstSegment.flights.length - 1].ArrivesAt);\r\n        } else {\r\n          firstSegment.earliestArrival = null;\r\n          firstSegment.latestArrival = null;\r\n        }\r\n      }\r\n\r\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\r\n    } catch (error) {\r\n      console.error('Error fetching segment details:', error);\r\n    } finally {\r\n      setIsLoadingSegments(false);\r\n    }\r\n  };\r\n\r\n  const processSegment = async (from, to, baseDate, timeWindow = null, nextSegmentFlights = null) => {\r\n    const API_URL = 'https://backend-284998006367.us-central1.run.app';\r\n    const dates = new Set();\r\n    \r\n    // Add base date\r\n    dates.add(baseDate);\r\n    \r\n    // Add next day if time window extends to it\r\n    if (timeWindow?.latestDeparture) {\r\n      const nextDay = dayjs(baseDate).add(1, 'day').format('YYYY-MM-DD');\r\n      if (timeWindow.latestDeparture.isAfter(dayjs(nextDay))) {\r\n        dates.add(nextDay);\r\n      }\r\n    }\r\n\r\n    const flights = [];\r\n    let earliestArrival = null;\r\n    let latestArrival = null;\r\n\r\n    console.log(`Processing route ${from}-${to}:`);\r\n    \r\n    // Process each date\r\n    for (const date of dates) {\r\n      const route = routeDetails.find(r => \r\n        r.origin === from && \r\n        r.destination === to && \r\n        r.date === date\r\n      );\r\n      \r\n      if (route) {\r\n        console.log(`  Found segment ID ${route.ID} for date ${date}`);\r\n        try {\r\n          const response = await fetch(`${API_URL}/api/seats/${route.ID}`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'accept': 'application/json',\r\n              'Partner-Authorization': apiKey,\r\n              'Segment-ID': route.ID\r\n            }\r\n          });\r\n\r\n          if (!response.ok) {\r\n            console.log(`  Failed to fetch segment ${route.ID}: ${response.status}`);\r\n            continue;\r\n          }\r\n\r\n          const data = await response.json();\r\n          \r\n          // For non-first segments, check if there are any next segment flights\r\n          if (timeWindow && data.results?.[0]?.data?.data) {\r\n            const nextSegmentFlights = data.results[0].data.data;\r\n            if (nextSegmentFlights.length === 1) {\r\n              const nextFlight = nextSegmentFlights[0];\r\n              const nextDeparture = dayjs(nextFlight.DepartsAt.replace('Z', ''));\r\n              \r\n              // Add minimum connection time (e.g., 1 hour)\r\n              const minConnectionTime = 1;\r\n              const maxConnectionTime = 4; // Maximum 4 hours connection time\r\n              \r\n              // Modify timeWindow to only allow flights that make viable connections\r\n              timeWindow = {\r\n                earliestDeparture: timeWindow.earliestDeparture,\r\n                latestDeparture: nextDeparture.subtract(minConnectionTime, 'hour'),\r\n                nextFlightDeparture: nextDeparture,\r\n                maxConnectionTime: maxConnectionTime\r\n              };\r\n              \r\n              console.log(`  Adjusting time window for single next flight:\r\n    Next flight departs: ${nextDeparture.format('YYYY-MM-DD HH:mm')}\r\n    Must arrive by: ${timeWindow.latestDeparture.format('YYYY-MM-DD HH:mm')}\r\n    Maximum connection time: ${maxConnectionTime} hours`);\r\n            }\r\n          }\r\n\r\n          const validFlights = processFlightData(data, timeWindow);\r\n          console.log(`  Segment ${route.ID}: Found ${validFlights.length} valid flights`);\r\n          \r\n          flights.push(...validFlights);\r\n\r\n          // Update arrival time bounds\r\n          validFlights.forEach(flight => {\r\n            const arrivalTime = dayjs(flight.ArrivesAt);\r\n            if (!earliestArrival || arrivalTime.isBefore(earliestArrival)) {\r\n              earliestArrival = arrivalTime;\r\n            }\r\n            if (!latestArrival || arrivalTime.isAfter(latestArrival)) {\r\n              latestArrival = arrivalTime;\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.error(`  Error fetching segment ${route.ID}:`, error);\r\n        }\r\n      } else {\r\n        console.log(`  No segment found for ${from}-${to} on ${date}`);\r\n      }\r\n    }\r\n\r\n    // If this is first segment and we have next segment data, get latest possible arrival\r\n    let latestPossibleArrival = null;\r\n    if (nextSegmentFlights && nextSegmentFlights.length > 0) {\r\n      // Find earliest departure in next segment\r\n      const earliestNextDeparture = nextSegmentFlights\r\n        .map(f => dayjs(f.DepartsAt.replace('Z', '')))\r\n        .reduce((earliest, curr) => earliest.isBefore(curr) ? earliest : curr);\r\n      \r\n      latestPossibleArrival = earliestNextDeparture;\r\n      console.log(`  Latest possible arrival for connection: ${latestPossibleArrival.format('YYYY-MM-DD HH:mm')}`);\r\n    }\r\n\r\n    return {\r\n      route: `${from}-${to}`,\r\n      flights,\r\n      earliestArrival,\r\n      latestArrival\r\n    };\r\n  };\r\n\r\n  const processFlightData = (data, timeWindow) => {\r\n    const flights = {};\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    const rawFlights = data.results?.[0]?.data?.data || [];\r\n    console.log(`  Processing ${rawFlights.length} raw flights`);\r\n    \r\n    rawFlights\r\n      .filter(trip => {\r\n        if (trip.Stops !== 0) {\r\n          console.log(`  Skipping flight with ${trip.Stops} stops`);\r\n          return false;\r\n        }\r\n        \r\n        if (timeWindow) {\r\n          const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));  // Remove Z to treat as local time\r\n          const isValid = departureTime.isAfter(timeWindow.earliestDeparture) && \r\n                         departureTime.isBefore(timeWindow.latestDeparture);\r\n          \r\n          if (!isValid) {\r\n            console.log(`  Skipping flight outside time window: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\r\n          }\r\n          return isValid;\r\n        }\r\n        \r\n        return true;\r\n      })\r\n      .forEach(trip => {\r\n        const flightNumber = trip.FlightNumbers;\r\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\r\n        const existingFlight = flights[flightNumber];\r\n\r\n        // If this is a duplicate flight, only keep the later one\r\n        if (existingFlight) {\r\n          const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\r\n          if (departureTime.isBefore(existingDeparture)) {\r\n            return; // Skip this one, keep the existing later flight\r\n          }\r\n        }\r\n\r\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\r\n        const baseDayjs = dayjs(baseDate);\r\n        \r\n        // Calculate day difference from base date\r\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\r\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\r\n\r\n        flights[flightNumber] = {\r\n          from: trip.OriginAirport,\r\n          to: trip.DestinationAirport,\r\n          flightNumber: flightNumber,\r\n          airlines: getAirlineName(trip.Carriers),\r\n          aircraft: trip.Aircraft[0],\r\n          departs: departDayDiff > 0 ? \r\n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \r\n            departureTime.format('HH:mm'),\r\n          arrives: arrivalDayDiff > 0 ? \r\n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \r\n            arrivalTime.format('HH:mm'),\r\n          DepartsAt: trip.DepartsAt.replace('Z', ''), // Store without Z\r\n          ArrivesAt: trip.ArrivesAt.replace('Z', ''), // Store without Z\r\n          economy: false,\r\n          business: false,\r\n          first: false\r\n        };\r\n        \r\n        switch(trip.Cabin.toLowerCase()) {\r\n          case 'economy':\r\n            flights[flightNumber].economy = true;\r\n            break;\r\n          case 'business':\r\n            flights[flightNumber].business = true;\r\n            break;\r\n          case 'first':\r\n            flights[flightNumber].first = true;\r\n            break;\r\n        }\r\n      });\r\n    \r\n    return Object.values(flights);\r\n  };\r\n\r\n  const getSegmentDistance = (from, to) => {\r\n    const route = routeDetails.find(r => \r\n      r.origin === from && \r\n      r.destination === to\r\n    );\r\n\r\n    if (!route) {\r\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\r\n      return 1000;\r\n    }\r\n\r\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\r\n    return route.distance;\r\n  };\r\n\r\n  const segmentColumns = [\r\n    { \r\n      title: 'From', \r\n      dataIndex: 'from', \r\n      width: 80,\r\n      sorter: (a, b) => a.from.localeCompare(b.from)\r\n    },\r\n    { \r\n      title: 'To', \r\n      dataIndex: 'to', \r\n      width: 80,\r\n      sorter: (a, b) => a.to.localeCompare(b.to)\r\n    },\r\n    { \r\n      title: 'Flight', \r\n      dataIndex: 'flightNumber', \r\n      width: 100,\r\n      sorter: (a, b) => a.flightNumber.localeCompare(b.flightNumber)\r\n    },\r\n    { \r\n      title: 'Airlines', \r\n      dataIndex: 'airlines', \r\n      width: 150,\r\n      sorter: (a, b) => a.airlines.localeCompare(b.airlines)\r\n    },\r\n    { \r\n      title: 'Aircraft', \r\n      dataIndex: 'aircraft', \r\n      width: 180,\r\n      sorter: (a, b) => a.aircraft.localeCompare(b.aircraft)\r\n    },\r\n    { \r\n      title: 'Departs', \r\n      dataIndex: 'departs', \r\n      width: 100,\r\n      sorter: (a, b) => {\r\n        // Extract day difference\r\n        const aDayDiff = a.departs.includes('+') ? \r\n          parseInt(a.departs.match(/\\+(\\d+)/)[1]) : 0;\r\n        const bDayDiff = b.departs.includes('+') ? \r\n          parseInt(b.departs.match(/\\+(\\d+)/)[1]) : 0;\r\n        \r\n        // Extract time\r\n        const aTime = a.departs.split(' ')[0];\r\n        const bTime = b.departs.split(' ')[0];\r\n        \r\n        // Compare days first, then times\r\n        if (aDayDiff !== bDayDiff) {\r\n          return aDayDiff - bDayDiff;\r\n        }\r\n        return aTime.localeCompare(bTime);\r\n      },\r\n      defaultSortOrder: 'ascend'\r\n    },\r\n    { \r\n      title: 'Arrives', \r\n      dataIndex: 'arrives', \r\n      width: 100,\r\n      sorter: (a, b) => {\r\n        // Extract day difference\r\n        const aDayDiff = a.arrives.includes('+') ? \r\n          parseInt(a.arrives.match(/\\+(\\d+)/)[1]) : 0;\r\n        const bDayDiff = b.arrives.includes('+') ? \r\n          parseInt(b.arrives.match(/\\+(\\d+)/)[1]) : 0;\r\n        \r\n        // Extract time\r\n        const aTime = a.arrives.split(' ')[0];\r\n        const bTime = b.arrives.split(' ')[0];\r\n        \r\n        // Compare days first, then times\r\n        if (aDayDiff !== bDayDiff) {\r\n          return aDayDiff - bDayDiff;\r\n        }\r\n        return aTime.localeCompare(bTime);\r\n      }\r\n    },\r\n    { \r\n      title: 'Economy', \r\n      dataIndex: 'economy', \r\n      width: 60,\r\n      align: 'center',\r\n      sorter: (a, b) => (a.economy === b.economy ? 0 : a.economy ? -1 : 1),\r\n      render: hasClass => hasClass ? <CheckOutlined style={{ color: '#52c41a' }} /> : null\r\n    },\r\n    { \r\n      title: 'Business', \r\n      dataIndex: 'business', \r\n      width: 60,\r\n      align: 'center',\r\n      sorter: (a, b) => (a.business === b.business ? 0 : a.business ? -1 : 1),\r\n      render: hasClass => hasClass ? <CheckOutlined style={{ color: '#52c41a' }} /> : null\r\n    },\r\n    { \r\n      title: 'First', \r\n      dataIndex: 'first', \r\n      width: 60,\r\n      align: 'center',\r\n      sorter: (a, b) => (a.first === b.first ? 0 : a.first ? -1 : 1),\r\n      render: hasClass => hasClass ? <CheckOutlined style={{ color: '#52c41a' }} /> : null\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"flight-search-container\">\r\n      <Card \r\n        className=\"search-form\" \r\n        style={{ boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)' }}\r\n      >\r\n        <div className=\"flight-search-element\">\r\n          <div className=\"element-label\">Departure Airport: *</div>\r\n          <Select\r\n            {...airportSelectProps}\r\n            value={departure}\r\n            onChange={setDeparture}\r\n            placeholder=\"Select departure airport...\"\r\n            className=\"airport-select\"\r\n            status={errors.departure ? 'error' : ''}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"flight-search-element\">\r\n          <div className=\"element-label\">Arrival Airport: *</div>\r\n          <Select\r\n            {...airportSelectProps}\r\n            value={arrival}\r\n            onChange={setArrival}\r\n            placeholder=\"Select arrival airport...\"\r\n            className=\"airport-select\"\r\n            status={errors.arrival ? 'error' : ''}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"flight-search-element\">\r\n          <div className=\"element-label\">Airlines Excluded:</div>\r\n          <Select\r\n            {...airlineSelectProps}\r\n            mode=\"multiple\"\r\n            value={selectedAirlines}\r\n            onChange={setSelectedAirlines}\r\n            options={sortedAirlines}\r\n            placeholder=\"Select airlines...\"\r\n            className=\"airline-select\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"segments-element\">\r\n          <div className=\"element-label\">Maximum Segments *</div>\r\n          <InputNumber\r\n            min={1}\r\n            max={5}\r\n            value={maxSegments}\r\n            onChange={setMaxSegments}\r\n            status={errors.maxSegments ? 'error' : ''}\r\n          />\r\n        </div>\r\n\r\n        <Button \r\n          type=\"primary\"\r\n          icon={<SearchOutlined />}\r\n          onClick={handleSearch}\r\n          loading={isLoading}\r\n          className=\"search-button\"\r\n        >\r\n          Search\r\n        </Button>\r\n      </Card>\r\n\r\n      {searchResults && (\r\n        <Card \r\n          className=\"results-card\" \r\n          title={\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n              <span>Search Results</span>\r\n              <Input\r\n                placeholder=\"Search routes...\"\r\n                value={tableSearchText}\r\n                onChange={e => setTableSearchText(e.target.value)}\r\n                style={{ width: 200 }}\r\n                allowClear\r\n              />\r\n            </div>\r\n          }\r\n          style={{ boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)' }}\r\n        >\r\n          <Table\r\n            dataSource={getFilteredData()}\r\n            columns={columns}\r\n            rowKey={(record, index) => index}\r\n            pagination={{\r\n              ...pagination,\r\n              showSizeChanger: true,\r\n              showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} routes`,\r\n              pageSizeOptions: ['10', '25', '50', '100'],\r\n              defaultPageSize: 25,\r\n            }}\r\n            loading={isLoading}\r\n            onChange={handleTableChange}\r\n            scroll={{ x: 1600 }}\r\n            showSorterTooltip={true}\r\n            sortDirections={['ascend', 'descend']}\r\n          />\r\n        </Card>\r\n      )}\r\n\r\n      <Modal\r\n        title=\"Flight Details\"\r\n        open={isModalVisible}\r\n        onOk={handleDateSearch}\r\n        onCancel={() => {\r\n          setIsModalVisible(false);\r\n          setSelectedDates(null);\r\n          setApiKey('');\r\n          setSegmentDetails([]);\r\n        }}\r\n        okText=\"Search Flights\"\r\n        okButtonProps={{ \r\n          disabled: !selectedDates || !apiKey,\r\n          loading: isLoadingSegments \r\n        }}\r\n        width={1500}\r\n        styles={{\r\n          body: { \r\n            padding: '12px',\r\n            maxWidth: '100%'\r\n          }\r\n        }}\r\n      >\r\n        <div style={{ marginBottom: 16 }}>\r\n          <div style={{ marginBottom: 8 }}>Select Travel Date:</div>\r\n          <DatePicker\r\n            style={{ width: '100%' }}\r\n            onChange={(date) => setSelectedDates(date)}\r\n            disabledDate={(current) => current && current < dayjs().startOf('day')}\r\n          />\r\n        </div>\r\n        <div style={{ marginBottom: 16 }}>\r\n          <div style={{ marginBottom: 8 }}>API Key:</div>\r\n          <Input\r\n            placeholder=\"Enter API key\"\r\n            value={apiKey}\r\n            onChange={(e) => setApiKey(e.target.value)}\r\n            style={{ width: '100%' }}\r\n          />\r\n        </div>\r\n        {isLoadingSegments ? (\r\n          <div style={{ textAlign: 'center', padding: '20px' }}>\r\n            <Spin />\r\n          </div>\r\n        ) : (\r\n          <div style={{ \r\n            width: '100%',\r\n            overflowX: 'auto'\r\n          }}>\r\n            {currentRoute && currentRoute.slice(0, -1).map((from, index) => {\r\n              const to = currentRoute[index + 1];\r\n              const routeKey = `${from}-${to}`;\r\n              const flights = segmentDetails.filter(flight => \r\n                flight.from === from && flight.to === to\r\n              );\r\n\r\n              return (\r\n                <div key={routeKey} style={{ \r\n                  marginBottom: '24px',\r\n                  width: '100%'\r\n                }}>\r\n                  <h3 style={{ marginBottom: '16px' }}>{routeKey}</h3>\r\n                  <Table\r\n                    dataSource={flights}\r\n                    columns={segmentColumns}\r\n                    size=\"small\"\r\n                    rowKey={(record, index) => `${routeKey}-${index}`}\r\n                    sortDirections={['ascend', 'descend']}\r\n                    style={{ \r\n                      width: '100%',\r\n                      tableLayout: 'fixed'\r\n                    }}\r\n                    pagination={{\r\n                      defaultPageSize: 10,\r\n                      showSizeChanger: true,\r\n                      showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} flights`,\r\n                      pageSizeOptions: ['10', '20', '50', 'all'],\r\n                      position: ['bottomRight']\r\n                    }}\r\n                    locale={{\r\n                      emptyText: 'No flights available'\r\n                    }}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </Modal>\r\n\r\n      <style jsx>{`\r\n        .flight-search-container {\r\n          max-width: 1200px;\r\n          margin: 20px auto;\r\n          padding: 0 20px;\r\n        }\r\n        .search-form {\r\n          margin-bottom: 20px;\r\n        }\r\n        .flight-search-element {\r\n          margin-bottom: 16px;\r\n        }\r\n        .element-label {\r\n          margin-bottom: 8px;\r\n          font-weight: 500;\r\n        }\r\n        .element-label::after {\r\n          content: \" *\";\r\n          color: #ff4d4f;\r\n          display: none;\r\n        }\r\n        .element-label:has(+ [data-required=\"true\"])::after {\r\n          display: inline;\r\n        }\r\n        .airport-select,\r\n        .airline-select {\r\n          width: 100%;\r\n        }\r\n        .segments-element {\r\n          margin-bottom: 16px;\r\n        }\r\n        .search-button {\r\n          margin-top: 24px;\r\n          width: 100%;\r\n        }\r\n        .results-card {\r\n          margin-top: 24px;\r\n        }\r\n        :global(.ant-table) {\r\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlightSearch;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}