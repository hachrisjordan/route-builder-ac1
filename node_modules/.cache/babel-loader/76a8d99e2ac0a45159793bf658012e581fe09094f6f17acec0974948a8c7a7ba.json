{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const [startDate, setStartDate] = useState(null);\n  const combinationsRef = useRef([]);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    var _data$results, _data$results$, _data$results$$data, _data$results$$data$d, _data$results$$data$d2, _data$results2, _data$results2$, _data$results2$$data;\n    const flights = {};\n    const baseDate = dayjs(((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : (_data$results$$data$d = _data$results$$data.data) === null || _data$results$$data$d === void 0 ? void 0 : (_data$results$$data$d2 = _data$results$$data$d[0]) === null || _data$results$$data$d2 === void 0 ? void 0 : _data$results$$data$d2.DepartsAt) || new Date()).format('YYYY-MM-DD');\n    const rawFlights = ((_data$results2 = data.results) === null || _data$results2 === void 0 ? void 0 : (_data$results2$ = _data$results2[0]) === null || _data$results2$ === void 0 ? void 0 : (_data$results2$$data = _data$results2$.data) === null || _data$results2$$data === void 0 ? void 0 : _data$results2$$data.data) || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    rawFlights.filter(trip => {\n      // Remove the Z suffix when parsing times since they're actually local times\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n      console.log(`  Carrier: ${trip.Carriers}`);\n      console.log(`  Departs: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n      console.log(`  Arrives: ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\n\n      // Filter out non-direct flights\n      if (trip.Stops !== 0) {\n        console.log('  ❌ Skipped: Not a direct flight');\n        return false;\n      }\n\n      // Filter out EK and FZ carriers\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log('  ❌ Skipped: Excluded carrier');\n        return false;\n      }\n\n      // Filter out 2-character FareClass values\n      if (trip.FareClass && trip.FareClass.length === 2) {\n        console.log('  ❌ Skipped: 2-character FareClass');\n        return false;\n      }\n      if (timeWindow) {\n        const isValid = departureTime.isAfter(timeWindow.start) && departureTime.isBefore(timeWindow.end);\n        if (!isValid) {\n          console.log('  ❌ Skipped: Outside time window');\n          console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n        } else {\n          console.log('  ✓ Accepted: Within time window');\n        }\n        return isValid;\n      }\n      console.log('  ✓ Accepted: No time window restrictions');\n      return true;\n    }).forEach(trip => {\n      // Remove the Z suffix when parsing times since they're actually local times\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n\n      // Convert CL carrier and flight numbers to LH\n      const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n      const flightNumber = trip.FlightNumbers.startsWith('CL') ? `LH${trip.FlightNumbers.slice(2)}` : trip.FlightNumbers;\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n      // If flight already exists, merge cabin classes\n      if (flights[flightNumber]) {\n        switch (trip.Cabin.toLowerCase()) {\n          case 'economy':\n            flights[flightNumber].economy = true;\n            break;\n          case 'business':\n            flights[flightNumber].business = true;\n            break;\n          case 'first':\n            flights[flightNumber].first = true;\n            break;\n        }\n        return; // Skip creating new flight entry\n      }\n\n      // Process aircraft name and create new flight entry\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName && aircraftName === '787  All') {\n        aircraftName = 'Boeing 787-10';\n      }\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(carrier),\n        aircraft: aircraftName,\n        duration: trip.TotalDuration,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false,\n        isSelected: false,\n        distance: parseInt(trip.Distance) || getSegmentDistance(trip.OriginAirport, trip.DestinationAirport),\n        segmentIndex: segmentIndex\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && date.isBefore(end.add(1, 'day'));\n  };\n  const handleDateSearch = async (currentRoute, stopoverInfo, preserveCalendarData = false, clearSelections = false) => {\n    console.log('\\n=== useFlightDetails handleDateSearch ===');\n    console.log('Current Route:', currentRoute);\n    console.log('Received Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n    console.log('Preserve Calendar Data:', preserveCalendarData);\n    console.log('Clear Selections:', clearSelections);\n    if (!selectedDates || !currentRoute || !apiKey) {\n      console.log('Missing required data:', {\n        selectedDates: !!selectedDates,\n        currentRoute: !!currentRoute,\n        apiKey: !!apiKey\n      });\n      return;\n    }\n\n    // Always clear flight selections when requested\n    if (clearSelections) {\n      setSelectedFlights({});\n      setSegmentDetails(prevDetails => prevDetails.map(f => ({\n        ...f,\n        isSelected: false,\n        hidden: false\n      })));\n    }\n    setIsLoadingSegments(true);\n    try {\n      const selectedSegments = [];\n      for (const date of Object.keys(availabilityData)) {\n        if (isDateInRange(date, selectedDates)) {\n          // Preserve distance information when collecting segments\n          const segments = availabilityData[date].map(segment => ({\n            ...segment,\n            distance: parseInt(segment.distance) || getSegmentDistance(segment.route.split('-')[0], segment.route.split('-')[1])\n          }));\n          selectedSegments.push(...segments);\n        }\n      }\n\n      // Log selected segments before filtering\n      console.log('=== Flights Before Combination Filtering ===');\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\n        if (!acc[segment.route]) {\n          acc[segment.route] = [];\n        }\n        acc[segment.route].push(segment);\n        return acc;\n      }, {});\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\n        console.log(`\\nRoute ${route}:`);\n        segments.forEach(segment => {\n          console.log(`  ID: ${segment.ID}`);\n          console.log(`  Date: ${segment.date}`);\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\n        });\n      });\n\n      // Continue with existing segment search logic\n      const segmentPromises = selectedSegments.map(segment => fetch(`https://backend-284998006367.us-central1.run.app/api/route_details/${segment.ID}`, {\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      }));\n\n      // Only fetch availability data if we're not preserving it\n      if (!preserveCalendarData) {\n        const routeString = currentRoute.join('-');\n\n        // Add startDate parameter if available\n        let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n        if (startDate) {\n          const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n          url += `?startDate=${formattedDate}`;\n        }\n        const availabilityResponse = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        });\n        if (availabilityResponse.ok) {\n          const availabilityResult = await availabilityResponse.json();\n\n          // Process availability data into a more usable format\n          const processedAvailability = {};\n\n          // Group records by date and route\n          const groupedRecords = {};\n          availabilityResult.forEach(item => {\n            const key = `${item.date}_${item.originAirport}-${item.destinationAirport}`;\n            if (!groupedRecords[key]) {\n              groupedRecords[key] = [];\n            }\n            groupedRecords[key].push(item);\n          });\n\n          // Process each group of records\n          Object.values(groupedRecords).forEach(records => {\n            // Sort records by source priority: united -> velocity -> lufthansa -> aeroplan\n            const sourcePriority = {\n              united: 0,\n              velocity: 1,\n              lufthansa: 2,\n              aeroplan: 3\n            };\n            records.sort((a, b) => sourcePriority[a.source] - sourcePriority[b.source]);\n\n            // Initialize merged record from the first record\n            const mergedRecord = {\n              ...records[0]\n            };\n            const dateKey = mergedRecord.date;\n\n            // Process airline lists for each cabin class\n            const processAirlines = airlineStr => {\n              if (!airlineStr) return '';\n              return airlineStr.split(',').map(a => a.trim()).filter(Boolean).join(',');\n            };\n\n            // Filter airlines based on source\n            records.forEach(record => {\n              // Remove specific airlines based on source\n              if (record.source === 'lufthansa') {\n                var _record$YDirectAirlin, _record$JDirectAirlin, _record$FDirectAirlin;\n                record.YDirectAirlines = processAirlines((_record$YDirectAirlin = record.YDirectAirlines) === null || _record$YDirectAirlin === void 0 ? void 0 : _record$YDirectAirlin.replace(/\\bLH\\b/g, ''));\n                record.JDirectAirlines = processAirlines((_record$JDirectAirlin = record.JDirectAirlines) === null || _record$JDirectAirlin === void 0 ? void 0 : _record$JDirectAirlin.replace(/\\bLH\\b/g, ''));\n                record.FDirectAirlines = processAirlines((_record$FDirectAirlin = record.FDirectAirlines) === null || _record$FDirectAirlin === void 0 ? void 0 : _record$FDirectAirlin.replace(/\\bLH\\b/g, ''));\n              } else if (record.source === 'united') {\n                var _record$YDirectAirlin2, _record$JDirectAirlin2, _record$FDirectAirlin2;\n                record.YDirectAirlines = processAirlines((_record$YDirectAirlin2 = record.YDirectAirlines) === null || _record$YDirectAirlin2 === void 0 ? void 0 : _record$YDirectAirlin2.replace(/\\bUA\\b/g, ''));\n                record.JDirectAirlines = processAirlines((_record$JDirectAirlin2 = record.JDirectAirlines) === null || _record$JDirectAirlin2 === void 0 ? void 0 : _record$JDirectAirlin2.replace(/\\bUA\\b/g, ''));\n                record.FDirectAirlines = processAirlines((_record$FDirectAirlin2 = record.FDirectAirlines) === null || _record$FDirectAirlin2 === void 0 ? void 0 : _record$FDirectAirlin2.replace(/\\bUA\\b/g, ''));\n              }\n\n              // Update Direct flags based on remaining airlines\n              record.YDirect = !!record.YDirectAirlines;\n              record.JDirect = !!record.JDirectAirlines;\n              record.FDirect = !!record.FDirectAirlines;\n              console.log(`\\nProcessed ${record.source} record:`, {\n                YDirectAirlines: record.YDirectAirlines,\n                JDirectAirlines: record.JDirectAirlines,\n                FDirectAirlines: record.FDirectAirlines,\n                YDirect: record.YDirect,\n                JDirect: record.JDirect,\n                FDirect: record.FDirect\n              });\n            });\n\n            // Merge airlines across sources\n            const mergedAirlines = {\n              Y: new Set(),\n              J: new Set(),\n              F: new Set()\n            };\n            let lastYUpdate = null;\n            let lastJUpdate = null;\n            let lastFUpdate = null;\n            records.forEach(record => {\n              const addAirlines = (airlineStr, set) => {\n                if (airlineStr) {\n                  airlineStr.split(',').forEach(airline => {\n                    const trimmed = airline.trim();\n                    if (trimmed) set.add(trimmed);\n                  });\n                }\n              };\n              if (record.YDirect && record.YDirectAirlines) {\n                const prevSize = mergedAirlines.Y.size;\n                addAirlines(record.YDirectAirlines, mergedAirlines.Y);\n                if (mergedAirlines.Y.size > prevSize) lastYUpdate = record.ID;\n              }\n              if (record.JDirect && record.JDirectAirlines) {\n                const prevSize = mergedAirlines.J.size;\n                addAirlines(record.JDirectAirlines, mergedAirlines.J);\n                if (mergedAirlines.J.size > prevSize) lastJUpdate = record.ID;\n              }\n              if (record.FDirect && record.FDirectAirlines) {\n                const prevSize = mergedAirlines.F.size;\n                addAirlines(record.FDirectAirlines, mergedAirlines.F);\n                if (mergedAirlines.F.size > prevSize) lastFUpdate = record.ID;\n              }\n            });\n\n            // Update merged record\n            mergedRecord.YDirectAirlines = Array.from(mergedAirlines.Y).join(',');\n            mergedRecord.JDirectAirlines = Array.from(mergedAirlines.J).join(',');\n            mergedRecord.FDirectAirlines = Array.from(mergedAirlines.F).join(',');\n            mergedRecord.YDirect = mergedAirlines.Y.size > 0;\n            mergedRecord.JDirect = mergedAirlines.J.size > 0;\n            mergedRecord.FDirect = mergedAirlines.F.size > 0;\n            mergedRecord.lastYUpdate = lastYUpdate;\n            mergedRecord.lastJUpdate = lastJUpdate;\n            mergedRecord.lastFUpdate = lastFUpdate;\n            console.log('\\nMerged record:', {\n              YDirectAirlines: mergedRecord.YDirectAirlines,\n              JDirectAirlines: mergedRecord.JDirectAirlines,\n              FDirectAirlines: mergedRecord.FDirectAirlines,\n              YDirect: mergedRecord.YDirect,\n              JDirect: mergedRecord.JDirect,\n              FDirect: mergedRecord.FDirect,\n              lastYUpdate,\n              lastJUpdate,\n              lastFUpdate\n            });\n            if (!processedAvailability[dateKey]) {\n              processedAvailability[dateKey] = [];\n            }\n            processedAvailability[dateKey].push({\n              route: `${mergedRecord.originAirport}-${mergedRecord.destinationAirport}`,\n              classes: {\n                Y: mergedRecord.YDirect,\n                J: mergedRecord.JDirect,\n                F: mergedRecord.FDirect\n              },\n              ID: mergedRecord.ID,\n              lastYUpdate: mergedRecord.lastYUpdate,\n              lastJUpdate: mergedRecord.lastJUpdate,\n              lastFUpdate: mergedRecord.lastFUpdate,\n              distance: mergedRecord.distance,\n              date: mergedRecord.date,\n              Source: mergedRecord.source,\n              YDirectAirlines: mergedRecord.YDirectAirlines,\n              JDirectAirlines: mergedRecord.JDirectAirlines,\n              FDirectAirlines: mergedRecord.FDirectAirlines\n            });\n          });\n          setAvailabilityData(processedAvailability);\n        }\n      }\n\n      // Continue with existing segment search logic\n      const newProcessedSegments = [];\n      const [startDate, endDate] = selectedDates;\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\n      console.log('\\n=== Processing Segments with Stopover ===');\n      if (stopoverInfo) {\n        console.log('Stopover Details:', {\n          airport: stopoverInfo.airport,\n          days: stopoverInfo.days\n        });\n      }\n      console.log('\\n=== Processing Segments ===');\n      console.log('Date Range:', {\n        start: dayjs(startDate).format('YYYY-MM-DD'),\n        end: dayjs(endDate).format('YYYY-MM-DD')\n      });\n      try {\n        // Process all segments\n        for (let i = 0; i < currentRoute.length - 1; i++) {\n          const from = currentRoute[i];\n          const to = currentRoute[i + 1];\n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n          let timeWindow = null;\n          const dates = new Set();\n          if (i === 0) {\n            // First segment - use full date range\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            console.log('\\n=== First Segment Details ===');\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n\n            // Get all dates in range\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n          } else {\n            // Handle subsequent segments with stopover consideration\n            const prevSegment = newProcessedSegments[i - 1];\n            if (!prevSegment || prevSegment.flights.length === 0) {\n              // Use full date range if no previous flights\n              const startDay = dayjs(startDate).startOf('day');\n              const endDay = dayjs(endDate).endOf('day');\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('No previous flights found. Using full date range for this segment');\n            } else {\n              // Calculate time window from previous segment's flights\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n              console.log('\\n=== Processing Subsequent Segment ===');\n              console.log('Segment:', `${currentRoute[i - 1]}-${currentRoute[i]}`);\n              console.log('Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n              console.log('Current Airport:', currentRoute[i]);\n              console.log('Previous Airport:', currentRoute[i - 1]);\n              console.log('Is Stopover Airport:', stopoverInfo && currentRoute[i] === stopoverInfo.airport);\n\n              // Adjust time window based on stopover\n              if (stopoverInfo && currentRoute[i] === stopoverInfo.airport) {\n                console.log(`\\nApplying stopover of ${stopoverInfo.days} days at ${stopoverInfo.airport}`);\n                timeWindow = {\n                  start: arrivals[0].add(stopoverInfo.days, 'days'),\n                  end: arrivals[arrivals.length - 1].add(stopoverInfo.days, 'days').add(24, 'hours'),\n                  isStopover: true,\n                  stopoverDays: stopoverInfo.days\n                };\n              } else {\n                timeWindow = {\n                  start: arrivals[0],\n                  end: arrivals[arrivals.length - 1].add(24, 'hours'),\n                  isStopover: false,\n                  stopoverDays: 0\n                };\n              }\n              console.log('\\nTime Window:', {\n                start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n                end: timeWindow.end.format('YYYY-MM-DD HH:mm'),\n                isStopover: timeWindow.isStopover,\n                stopoverDays: timeWindow.stopoverDays\n              });\n\n              // Get dates for time window\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n            }\n          }\n\n          // Process each date\n          const allFlights = [];\n          for (const date of dates) {\n            // Find route from availability data instead\n            const availableRoutes = availabilityData[date] || [];\n            const route = availableRoutes.find(r => r.route === `${from}-${to}`);\n            if (!route) {\n              console.log(`No route found for ${from}-${to} on ${date}`);\n              continue;\n            }\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\n            console.log(`Segment ID: ${route.ID}`);\n            try {\n              const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n                method: 'GET',\n                headers: {\n                  'accept': 'application/json',\n                  'Partner-Authorization': apiKey,\n                  'Segment-ID': route.ID\n                }\n              });\n              if (!response.ok) {\n                console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n                continue;\n              }\n              const data = await response.json();\n              const processedFlights = processFlightData(data, timeWindow, i);\n              console.log(`✓ Found ${processedFlights.length} valid flights`);\n              allFlights.push(...processedFlights);\n            } catch (error) {\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\n            }\n          }\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n          // Store searched dates in segment data\n          newProcessedSegments[i] = {\n            route: `${from}-${to}`,\n            flights: allFlights,\n            searchDates: dates,\n            // Add this field\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n          };\n\n          // Only break if previous segment had flights but current segment found none\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i - 1].flights.length > 0) {\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n            console.log('Skipping remaining segments');\n            break;\n          }\n        }\n\n        // After processing all segments\n        if (newProcessedSegments.length >= 1) {\n          // Log all flights found by segment\n          console.log('\\n=== All Flights Found ===');\n          newProcessedSegments.forEach((segment, index) => {\n            if (segment.flights && segment.flights.length > 0) {\n              console.log(`\\nSegment ${index} (${segment.route}):`);\n              segment.flights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft}`);\n              });\n            } else {\n              console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\n            }\n          });\n          console.log('\\n=== Flight Combinations ===');\n\n          // Find the first and last segments with flights\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n          // Find all valid combinations recursively\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n            // If we've reached beyond the last valid segment, this is a valid combination\n            if (segmentIndex > lastSegmentIndex) {\n              return [currentPath];\n            }\n            const validCombos = [];\n            const currentSegment = newProcessedSegments[segmentIndex];\n\n            // If no flights in current segment, try next segment\n            if (!(currentSegment !== null && currentSegment !== void 0 && currentSegment.flights) || currentSegment.flights.length === 0) {\n              return findValidCombinations(currentPath, segmentIndex + 1);\n            }\n\n            // For first segment, try all flights\n            if (currentPath.length === 0) {\n              currentSegment.flights.forEach(flight => {\n                const combos = findValidCombinations([flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              });\n            } else {\n              // For subsequent segments, check connection times\n              const prevFlight = currentPath[currentPath.length - 1];\n              const prevArrival = dayjs(prevFlight.ArrivesAt);\n              const isStopoverPoint = stopoverInfo && currentRoute[segmentIndex] === stopoverInfo.airport;\n              currentSegment.flights.forEach(flight => {\n                const departure = dayjs(flight.DepartsAt);\n                const connectionTime = departure.diff(prevArrival, 'minutes');\n                if (isStopoverPoint) {\n                  // For stopover points, connection must be within stopover day window\n                  const minStopoverTime = stopoverInfo.days * 24 * 60; // Convert days to minutes\n                  const maxStopoverTime = (stopoverInfo.days + 1) * 24 * 60; // Add one more day for flexibility\n\n                  if (connectionTime >= minStopoverTime && connectionTime <= maxStopoverTime) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                } else {\n                  // For normal connections, 30 minutes to 24 hours\n                  if (connectionTime >= 30 && connectionTime <= 24 * 60) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                }\n              });\n            }\n            return validCombos;\n          };\n\n          // Get all valid combinations using the new function\n          const allCombinations = findValidCombinations();\n\n          // Store combinations in ref immediately after finding them\n          combinationsRef.current = allCombinations;\n\n          // Log the combinations\n          console.log('\\n=== Valid Combinations ===');\n          if (allCombinations.length === 0) {\n            console.log('No valid combinations found for any segment range');\n          } else {\n            console.log(`Found ${allCombinations.length} valid combinations`);\n            allCombinations.forEach(combo => {\n              const flightInfo = combo.map((flight, idx) => {\n                if (idx === 0) {\n                  return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n                }\n                const prevFlight = combo[idx - 1];\n                const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n                const hours = Math.floor(connectionTime / 60);\n                const minutes = connectionTime % 60;\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n              });\n              console.log(flightInfo.join(' → '));\n            });\n          }\n\n          // Create a map of valid flights by segment\n          const validFlightsBySegment = new Map();\n          allCombinations.forEach(combo => {\n            combo.forEach(flight => {\n              const segmentKey = flight.segmentIndex;\n              if (!validFlightsBySegment.has(segmentKey)) {\n                validFlightsBySegment.set(segmentKey, new Set());\n              }\n              validFlightsBySegment.get(segmentKey).add(`${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n            });\n          });\n\n          // Filter and process flights\n          const filteredFlights = [];\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segment = newProcessedSegments[i];\n            if (!segment || !segment.flights) continue;\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n\n            // Add valid flights from this segment\n            segment.flights.forEach(flight => {\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n              if (validFlightsForSegment.has(flightKey)) {\n                filteredFlights.push({\n                  ...flight,\n                  isSelected: false,\n                  segmentIndex: i\n                });\n              }\n            });\n          }\n          setSegmentDetails(filteredFlights);\n          setValidCombinations(allCombinations);\n\n          // Log flights by segment\n          console.log('\\n=== Flights By Segment ===');\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n            if (segmentFlights.length > 0) {\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n              segmentFlights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n              });\n            }\n          }\n          console.log('\\n======================');\n        } else {\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => segment.flights.map(flight => ({\n            ...flight,\n            isSelected: false,\n            segmentIndex: index\n          }))));\n          setValidCombinations([]);\n        }\n      } catch (error) {\n        console.error('Error processing segments:', error);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const handleCalendarSearch = async currentRoute => {\n    if (!currentRoute || !apiKey) return;\n    setIsLoadingAvailability(true);\n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n\n      // Add startDate parameter if available\n      let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n      if (startDate) {\n        const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n        url += `?startDate=${formattedDate}`;\n        console.log(`Using start date: ${formattedDate} for availability search`);\n      }\n      console.log(`Fetching availability data from: ${url}`);\n      const availabilityResponse = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      });\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n        console.log(`Received ${availabilityResult.length} availability records`);\n\n        // Process availability data into a more usable format\n        const processedAvailability = {};\n\n        // Group records by date and route\n        const groupedRecords = {};\n        availabilityResult.forEach(item => {\n          const key = `${item.date}_${item.originAirport}-${item.destinationAirport}`;\n          if (!groupedRecords[key]) {\n            groupedRecords[key] = [];\n          }\n          groupedRecords[key].push(item);\n        });\n\n        // Process each group of records\n        Object.values(groupedRecords).forEach(records => {\n          // Sort records by source priority: united -> velocity -> lufthansa -> aeroplan\n          const sourcePriority = {\n            united: 0,\n            velocity: 1,\n            lufthansa: 2,\n            aeroplan: 3\n          };\n          records.sort((a, b) => sourcePriority[a.source] - sourcePriority[b.source]);\n\n          // Initialize merged record from the first record\n          const mergedRecord = {\n            ...records[0]\n          };\n          const dateKey = mergedRecord.date;\n\n          // Process airline lists for each cabin class\n          const processAirlines = airlineStr => {\n            if (!airlineStr) return '';\n            return airlineStr.split(',').map(a => a.trim()).filter(Boolean).join(',');\n          };\n\n          // Filter airlines based on source\n          records.forEach(record => {\n            // Remove specific airlines based on source\n            if (record.source === 'lufthansa') {\n              var _record$YDirectAirlin3, _record$JDirectAirlin3, _record$FDirectAirlin3;\n              record.YDirectAirlines = processAirlines((_record$YDirectAirlin3 = record.YDirectAirlines) === null || _record$YDirectAirlin3 === void 0 ? void 0 : _record$YDirectAirlin3.replace(/\\bLH\\b/g, ''));\n              record.JDirectAirlines = processAirlines((_record$JDirectAirlin3 = record.JDirectAirlines) === null || _record$JDirectAirlin3 === void 0 ? void 0 : _record$JDirectAirlin3.replace(/\\bLH\\b/g, ''));\n              record.FDirectAirlines = processAirlines((_record$FDirectAirlin3 = record.FDirectAirlines) === null || _record$FDirectAirlin3 === void 0 ? void 0 : _record$FDirectAirlin3.replace(/\\bLH\\b/g, ''));\n            } else if (record.source === 'united') {\n              var _record$YDirectAirlin4, _record$JDirectAirlin4, _record$FDirectAirlin4;\n              record.YDirectAirlines = processAirlines((_record$YDirectAirlin4 = record.YDirectAirlines) === null || _record$YDirectAirlin4 === void 0 ? void 0 : _record$YDirectAirlin4.replace(/\\bUA\\b/g, ''));\n              record.JDirectAirlines = processAirlines((_record$JDirectAirlin4 = record.JDirectAirlines) === null || _record$JDirectAirlin4 === void 0 ? void 0 : _record$JDirectAirlin4.replace(/\\bUA\\b/g, ''));\n              record.FDirectAirlines = processAirlines((_record$FDirectAirlin4 = record.FDirectAirlines) === null || _record$FDirectAirlin4 === void 0 ? void 0 : _record$FDirectAirlin4.replace(/\\bUA\\b/g, ''));\n            }\n\n            // Update Direct flags based on remaining airlines\n            record.YDirect = !!record.YDirectAirlines;\n            record.JDirect = !!record.JDirectAirlines;\n            record.FDirect = !!record.FDirectAirlines;\n            console.log(`\\nProcessed ${record.source} record:`, {\n              YDirectAirlines: record.YDirectAirlines,\n              JDirectAirlines: record.JDirectAirlines,\n              FDirectAirlines: record.FDirectAirlines,\n              YDirect: record.YDirect,\n              JDirect: record.JDirect,\n              FDirect: record.FDirect\n            });\n          });\n\n          // Merge airlines across sources\n          const mergedAirlines = {\n            Y: new Set(),\n            J: new Set(),\n            F: new Set()\n          };\n          let lastYUpdate = null;\n          let lastJUpdate = null;\n          let lastFUpdate = null;\n          records.forEach(record => {\n            const addAirlines = (airlineStr, set) => {\n              if (airlineStr) {\n                airlineStr.split(',').forEach(airline => {\n                  const trimmed = airline.trim();\n                  if (trimmed) set.add(trimmed);\n                });\n              }\n            };\n            if (record.YDirect && record.YDirectAirlines) {\n              const prevSize = mergedAirlines.Y.size;\n              addAirlines(record.YDirectAirlines, mergedAirlines.Y);\n              if (mergedAirlines.Y.size > prevSize) lastYUpdate = record.ID;\n            }\n            if (record.JDirect && record.JDirectAirlines) {\n              const prevSize = mergedAirlines.J.size;\n              addAirlines(record.JDirectAirlines, mergedAirlines.J);\n              if (mergedAirlines.J.size > prevSize) lastJUpdate = record.ID;\n            }\n            if (record.FDirect && record.FDirectAirlines) {\n              const prevSize = mergedAirlines.F.size;\n              addAirlines(record.FDirectAirlines, mergedAirlines.F);\n              if (mergedAirlines.F.size > prevSize) lastFUpdate = record.ID;\n            }\n          });\n\n          // Update merged record\n          mergedRecord.YDirectAirlines = Array.from(mergedAirlines.Y).join(',');\n          mergedRecord.JDirectAirlines = Array.from(mergedAirlines.J).join(',');\n          mergedRecord.FDirectAirlines = Array.from(mergedAirlines.F).join(',');\n          mergedRecord.YDirect = mergedAirlines.Y.size > 0;\n          mergedRecord.JDirect = mergedAirlines.J.size > 0;\n          mergedRecord.FDirect = mergedAirlines.F.size > 0;\n          mergedRecord.lastYUpdate = lastYUpdate;\n          mergedRecord.lastJUpdate = lastJUpdate;\n          mergedRecord.lastFUpdate = lastFUpdate;\n          console.log('\\nMerged record:', {\n            YDirectAirlines: mergedRecord.YDirectAirlines,\n            JDirectAirlines: mergedRecord.JDirectAirlines,\n            FDirectAirlines: mergedRecord.FDirectAirlines,\n            YDirect: mergedRecord.YDirect,\n            JDirect: mergedRecord.JDirect,\n            FDirect: mergedRecord.FDirect,\n            lastYUpdate,\n            lastJUpdate,\n            lastFUpdate\n          });\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          processedAvailability[dateKey].push({\n            route: `${mergedRecord.originAirport}-${mergedRecord.destinationAirport}`,\n            classes: {\n              Y: mergedRecord.YDirect,\n              J: mergedRecord.JDirect,\n              F: mergedRecord.FDirect\n            },\n            ID: mergedRecord.ID,\n            lastYUpdate: mergedRecord.lastYUpdate,\n            lastJUpdate: mergedRecord.lastJUpdate,\n            lastFUpdate: mergedRecord.lastFUpdate,\n            distance: mergedRecord.distance,\n            date: mergedRecord.date,\n            Source: mergedRecord.source,\n            YDirectAirlines: mergedRecord.YDirectAirlines,\n            JDirectAirlines: mergedRecord.JDirectAirlines,\n            FDirectAirlines: mergedRecord.FDirectAirlines\n          });\n        });\n        setAvailabilityData(processedAvailability);\n      } else {\n        console.error('Failed to fetch availability data:', availabilityResponse.status);\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n  const resetDetails = () => {\n    // Clear all data states\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n    setStartDate(null); // Clear the start date\n\n    // Note: We don't clear selectedDates here because we do it explicitly in the modal close handler\n\n    // Reset the combinations reference\n    combinationsRef.current = [];\n\n    // Clear any stopover information in the FlightAvailabilityCalendar\n    if (window.clearStopoverInfo && typeof window.clearStopoverInfo === 'function') {\n      window.clearStopoverInfo();\n    }\n\n    // Clear calendar display\n    if (window.hideCalendar && typeof window.hideCalendar === 'function') {\n      window.hideCalendar();\n    }\n  };\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    setSelectedFlights(prevSelected => {\n      var _newSelected$segmentI, _newSelected$segmentI2;\n      const newSelected = {\n        ...prevSelected\n      };\n\n      // Check if this exact flight is already selected\n      const isCurrentlySelected = (_newSelected$segmentI = newSelected[segmentIndex]) === null || _newSelected$segmentI === void 0 ? void 0 : (_newSelected$segmentI2 = _newSelected$segmentI.some) === null || _newSelected$segmentI2 === void 0 ? void 0 : _newSelected$segmentI2.call(_newSelected$segmentI, f => {\n        const matches = f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Log all current selections\n      console.log('\\nALL CURRENT SELECTIONS:');\n      Object.entries(newSelected).forEach(([idx, flights]) => {\n        if (Array.isArray(flights)) {\n          flights.forEach(f => {\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          });\n        }\n      });\n\n      // Use combinations from the ref\n      const currentCombos = combinationsRef.current;\n      const firstSegmentWithFlights = Math.min(...segmentDetails.filter(f => !f.hidden).map(f => f.segmentIndex));\n      console.log('\\nChecking combinations:', currentCombos.map(combo => combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')));\n\n      // Find combinations that contain the selected flight(s)\n      const validCombos = currentCombos.filter(combo => {\n        // If no selections, all combinations are valid\n        if (Object.keys(newSelected).length === 0) return true;\n\n        // Check if this combination contains all selected flights\n        const isValid = Object.entries(newSelected).every(([segIdx, flights]) => {\n          const selectedFlight = flights[0];\n          // Adjust index based on first segment with flights\n          const comboIndex = parseInt(segIdx, 10) - firstSegmentWithFlights;\n          const comboFlight = combo[comboIndex];\n          const matches = (comboFlight === null || comboFlight === void 0 ? void 0 : comboFlight.flightNumber) === selectedFlight.flightNumber && dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm') === dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm');\n          console.log(`Checking combo flight in segment ${segIdx}:`, {\n            selected: `${selectedFlight.flightNumber} (${dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm')})`,\n            combo: comboFlight ? `${comboFlight.flightNumber} (${dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm')})` : 'none',\n            comboIndex,\n            matches\n          });\n          return matches;\n        });\n        return isValid;\n      });\n      console.log('\\nValid combinations:', validCombos.map(combo => combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')));\n\n      // Create a set of all flights that appear in valid combinations\n      const validFlights = new Set();\n      validCombos.forEach(combo => {\n        combo.forEach(f => {\n          if (!f) return;\n          const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          validFlights.add(key);\n        });\n      });\n\n      // Update visibility\n      setSegmentDetails(prevDetails => prevDetails.map(f => {\n        var _newSelected$f$segmen;\n        const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n        const isSelected = ((_newSelected$f$segmen = newSelected[f.segmentIndex]) === null || _newSelected$f$segmen === void 0 ? void 0 : _newSelected$f$segmen.some(sf => sf.flightNumber === f.flightNumber && dayjs(sf.DepartsAt).format('MM-DD HH:mm') === dayjs(f.DepartsAt).format('MM-DD HH:mm'))) || false;\n        return {\n          ...f,\n          isSelected,\n          hidden: Object.keys(newSelected).length > 0 && !isSelected && !validFlights.has(flightKey)\n        };\n      }));\n      return newSelected;\n    });\n  };\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => combo.map((f, idx) => ({\n        ...f,\n        isSelected: false,\n        segmentIndex: idx\n      })));\n      const uniqueFlights = Array.from(new Map(allFlights.map(f => [`${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`, f])).values());\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n    startDate,\n    setStartDate\n  };\n}\n_s(useFlightDetails, \"/wSre+NzoaEr19CeqCCuXLcaxHg=\");","map":{"version":3,"names":["useState","useEffect","useRef","useMemo","dayjs","routeDetails","airlines","useFlightDetails","getColumns","initialCombinations","_s","selectedDates","setSelectedDates","apiKey","setApiKey","localStorage","getItem","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","selectedFlights","setSelectedFlights","validCombinations","setValidCombinations","processedSegments","setProcessedSegments","originalFlights","setOriginalFlights","originalCombinations","processedFlights","setProcessedFlights","initialFlights","setInitialFlights","availabilityData","setAvailabilityData","isLoadingAvailability","setIsLoadingAvailability","startDate","setStartDate","combinationsRef","setItem","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","segmentIndex","_data$results","_data$results$","_data$results$$data","_data$results$$data$d","_data$results$$data$d2","_data$results2","_data$results2$","_data$results2$$data","flights","results","DepartsAt","Date","rawFlights","length","start","end","filter","trip","departureTime","arrivalTime","ArrivesAt","FlightNumbers","Carriers","Stops","FareClass","isValid","isAfter","isBefore","forEach","carrier","flightNumber","startsWith","slice","baseDayjs","departDayDiff","diff","arrivalDayDiff","Cabin","toLowerCase","economy","business","first","aircraftName","Aircraft","OriginAirport","DestinationAirport","aircraft","duration","TotalDuration","departs","arrives","isSelected","parseInt","Distance","Object","values","isDateInRange","dateRange","subtract","add","handleDateSearch","currentRoute","stopoverInfo","preserveCalendarData","clearSelections","JSON","stringify","prevDetails","map","f","hidden","selectedSegments","keys","segments","segment","split","push","segmentsByRoute","reduce","acc","entries","ID","classes","Y","J","F","segmentPromises","fetch","headers","routeString","join","url","formattedDate","availabilityResponse","method","ok","availabilityResult","json","processedAvailability","groupedRecords","item","key","originAirport","destinationAirport","records","sourcePriority","united","velocity","lufthansa","aeroplan","sort","b","source","mergedRecord","dateKey","processAirlines","airlineStr","trim","Boolean","record","_record$YDirectAirlin","_record$JDirectAirlin","_record$FDirectAirlin","YDirectAirlines","JDirectAirlines","FDirectAirlines","_record$YDirectAirlin2","_record$JDirectAirlin2","_record$FDirectAirlin2","YDirect","JDirect","FDirect","mergedAirlines","Set","lastYUpdate","lastJUpdate","lastFUpdate","addAirlines","set","trimmed","prevSize","size","Array","Source","newProcessedSegments","endDate","airport","days","i","dates","startDay","startOf","endDay","endOf","d","valueOf","prevSegment","arrivals","isStopover","stopoverDays","allFlights","availableRoutes","response","error","searchDates","earliestArrival","latestArrival","index","flight","firstSegmentWithFlights","findIndex","lastSegmentWithFlights","reverse","lastSegmentIndex","findValidCombinations","currentPath","validCombos","currentSegment","combos","prevFlight","prevArrival","isStopoverPoint","departure","connectionTime","minStopoverTime","maxStopoverTime","allCombinations","current","combo","flightInfo","idx","hours","Math","floor","minutes","toString","padStart","validFlightsBySegment","Map","segmentKey","has","get","filteredFlights","validFlightsForSegment","flightKey","segmentFlights","flatMap","handleCalendarSearch","_record$YDirectAirlin3","_record$JDirectAirlin3","_record$FDirectAirlin3","_record$YDirectAirlin4","_record$JDirectAirlin4","_record$FDirectAirlin4","status","resetDetails","window","clearStopoverInfo","hideCalendar","handleFlightSelect","prevSelected","_newSelected$segmentI","_newSelected$segmentI2","newSelected","isCurrentlySelected","some","call","matches","isSame","keep","isArray","currentCombos","min","every","segIdx","selectedFlight","comboIndex","comboFlight","selected","validFlights","_newSelected$f$segmen","sf","columns","uniqueFlights"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\n\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const [startDate, setStartDate] = useState(null);\n  const combinationsRef = useRef([]);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n    \n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    \n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n\n  const getAirlineName = (code) => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => \n      r.origin === from && \n      r.destination === to\n    );\n\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    const flights = {};\n    const baseDate = dayjs(data.results?.[0]?.data?.data?.[0]?.DepartsAt || new Date()).format('YYYY-MM-DD');\n    \n    const rawFlights = data.results?.[0]?.data?.data || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    \n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    \n    rawFlights\n      .filter(trip => {\n        // Remove the Z suffix when parsing times since they're actually local times\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n        \n        console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n        console.log(`  Carrier: ${trip.Carriers}`);\n        console.log(`  Departs: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n        console.log(`  Arrives: ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\n        \n        // Filter out non-direct flights\n        if (trip.Stops !== 0) {\n          console.log('  ❌ Skipped: Not a direct flight');\n          return false;\n        }\n        \n        // Filter out EK and FZ carriers\n        if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n          console.log('  ❌ Skipped: Excluded carrier');\n          return false;\n        }\n        \n        // Filter out 2-character FareClass values\n        if (trip.FareClass && trip.FareClass.length === 2) {\n          console.log('  ❌ Skipped: 2-character FareClass');\n          return false;\n        }\n        \n        if (timeWindow) {\n          const isValid = departureTime.isAfter(timeWindow.start) && \n                         departureTime.isBefore(timeWindow.end);\n          \n          if (!isValid) {\n            console.log('  ❌ Skipped: Outside time window');\n            console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n          } else {\n            console.log('  ✓ Accepted: Within time window');\n          }\n          return isValid;\n        }\n        \n        console.log('  ✓ Accepted: No time window restrictions');\n        return true;\n      })\n      .forEach(trip => {\n        // Remove the Z suffix when parsing times since they're actually local times\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); \n\n        // Convert CL carrier and flight numbers to LH\n        const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n        const flightNumber = trip.FlightNumbers.startsWith('CL') \n          ? `LH${trip.FlightNumbers.slice(2)}` \n          : trip.FlightNumbers;\n\n        const baseDayjs = dayjs(baseDate);\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n        // If flight already exists, merge cabin classes\n        if (flights[flightNumber]) {\n          switch(trip.Cabin.toLowerCase()) {\n            case 'economy':\n              flights[flightNumber].economy = true;\n              break;\n            case 'business':\n              flights[flightNumber].business = true;\n              break;\n            case 'first':\n              flights[flightNumber].first = true;\n              break;\n          }\n          return; // Skip creating new flight entry\n        }\n\n        // Process aircraft name and create new flight entry\n        let aircraftName = trip.Aircraft[0];\n        if (aircraftName && aircraftName === '787  All') {\n          aircraftName = 'Boeing 787-10';\n        }\n\n        flights[flightNumber] = {\n          from: trip.OriginAirport,\n          to: trip.DestinationAirport,\n          flightNumber: flightNumber,\n          airlines: getAirlineName(carrier),\n          aircraft: aircraftName,\n          duration: trip.TotalDuration,\n          departs: departDayDiff > 0 ? \n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \n            departureTime.format('HH:mm'),\n          arrives: arrivalDayDiff > 0 ? \n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \n            arrivalTime.format('HH:mm'),\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n          economy: false,\n          business: false,\n          first: false,\n          isSelected: false,\n          distance: parseInt(trip.Distance) || getSegmentDistance(trip.OriginAirport, trip.DestinationAirport),\n          segmentIndex: segmentIndex\n        };\n        \n        switch(trip.Cabin.toLowerCase()) {\n          case 'economy':\n            flights[flightNumber].economy = true;\n            break;\n          case 'business':\n            flights[flightNumber].business = true;\n            break;\n          case 'first':\n            flights[flightNumber].first = true;\n            break;\n        }\n      });\n    \n    return Object.values(flights);\n  };\n\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && \n           date.isBefore(end.add(1, 'day'));\n  };\n\n  const handleDateSearch = async (currentRoute, stopoverInfo, preserveCalendarData = false, clearSelections = false) => {\n    console.log('\\n=== useFlightDetails handleDateSearch ===');\n    console.log('Current Route:', currentRoute);\n    console.log('Received Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n    console.log('Preserve Calendar Data:', preserveCalendarData);\n    console.log('Clear Selections:', clearSelections);\n    \n    if (!selectedDates || !currentRoute || !apiKey) {\n      console.log('Missing required data:', {\n        selectedDates: !!selectedDates,\n        currentRoute: !!currentRoute,\n        apiKey: !!apiKey\n      });\n      return;\n    }\n    \n    // Always clear flight selections when requested\n    if (clearSelections) {\n      setSelectedFlights({});\n      setSegmentDetails(prevDetails => \n        prevDetails.map(f => ({\n          ...f,\n          isSelected: false,\n          hidden: false\n        }))\n      );\n    }\n    \n    setIsLoadingSegments(true);\n    \n    try {\n      const selectedSegments = [];\n      for (const date of Object.keys(availabilityData)) {\n        if (isDateInRange(date, selectedDates)) {\n          // Preserve distance information when collecting segments\n          const segments = availabilityData[date].map(segment => ({\n            ...segment,\n            distance: parseInt(segment.distance) || getSegmentDistance(segment.route.split('-')[0], segment.route.split('-')[1])\n          }));\n          selectedSegments.push(...segments);\n        }\n      }\n\n      // Log selected segments before filtering\n      console.log('=== Flights Before Combination Filtering ===');\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\n        if (!acc[segment.route]) {\n          acc[segment.route] = [];\n        }\n        acc[segment.route].push(segment);\n        return acc;\n      }, {});\n\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\n        console.log(`\\nRoute ${route}:`);\n        segments.forEach(segment => {\n          console.log(`  ID: ${segment.ID}`);\n          console.log(`  Date: ${segment.date}`);\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\n        });\n      });\n\n      // Continue with existing segment search logic\n      const segmentPromises = selectedSegments.map(segment => \n        fetch(`https://backend-284998006367.us-central1.run.app/api/route_details/${segment.ID}`, {\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        })\n      );\n\n      // Only fetch availability data if we're not preserving it\n      if (!preserveCalendarData) {\n        const routeString = currentRoute.join('-');\n        \n        // Add startDate parameter if available\n        let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n        if (startDate) {\n          const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n          url += `?startDate=${formattedDate}`;\n        }\n        \n        const availabilityResponse = await fetch(\n          url,\n          {\n            method: 'GET',\n            headers: {\n              'accept': 'application/json',\n              'Partner-Authorization': apiKey\n            }\n          }\n        );\n\n        if (availabilityResponse.ok) {\n          const availabilityResult = await availabilityResponse.json();\n          \n          // Process availability data into a more usable format\n          const processedAvailability = {};\n          \n          // Group records by date and route\n          const groupedRecords = {};\n          availabilityResult.forEach(item => {\n            const key = `${item.date}_${item.originAirport}-${item.destinationAirport}`;\n            if (!groupedRecords[key]) {\n              groupedRecords[key] = [];\n            }\n            groupedRecords[key].push(item);\n          });\n\n          // Process each group of records\n          Object.values(groupedRecords).forEach(records => {\n            // Sort records by source priority: united -> velocity -> lufthansa -> aeroplan\n            const sourcePriority = { united: 0, velocity: 1, lufthansa: 2, aeroplan: 3 };\n            records.sort((a, b) => sourcePriority[a.source] - sourcePriority[b.source]);\n\n            // Initialize merged record from the first record\n            const mergedRecord = { ...records[0] };\n            const dateKey = mergedRecord.date;\n\n            // Process airline lists for each cabin class\n            const processAirlines = (airlineStr) => {\n              if (!airlineStr) return '';\n              return airlineStr.split(',').map(a => a.trim()).filter(Boolean).join(',');\n            };\n\n            // Filter airlines based on source\n            records.forEach(record => {\n              // Remove specific airlines based on source\n              if (record.source === 'lufthansa') {\n                record.YDirectAirlines = processAirlines(record.YDirectAirlines?.replace(/\\bLH\\b/g, ''));\n                record.JDirectAirlines = processAirlines(record.JDirectAirlines?.replace(/\\bLH\\b/g, ''));\n                record.FDirectAirlines = processAirlines(record.FDirectAirlines?.replace(/\\bLH\\b/g, ''));\n              } else if (record.source === 'united') {\n                record.YDirectAirlines = processAirlines(record.YDirectAirlines?.replace(/\\bUA\\b/g, ''));\n                record.JDirectAirlines = processAirlines(record.JDirectAirlines?.replace(/\\bUA\\b/g, ''));\n                record.FDirectAirlines = processAirlines(record.FDirectAirlines?.replace(/\\bUA\\b/g, ''));\n              }\n\n              // Update Direct flags based on remaining airlines\n              record.YDirect = !!record.YDirectAirlines;\n              record.JDirect = !!record.JDirectAirlines;\n              record.FDirect = !!record.FDirectAirlines;\n\n              console.log(`\\nProcessed ${record.source} record:`, {\n                YDirectAirlines: record.YDirectAirlines,\n                JDirectAirlines: record.JDirectAirlines,\n                FDirectAirlines: record.FDirectAirlines,\n                YDirect: record.YDirect,\n                JDirect: record.JDirect,\n                FDirect: record.FDirect\n              });\n            });\n\n            // Merge airlines across sources\n            const mergedAirlines = {\n              Y: new Set(),\n              J: new Set(),\n              F: new Set()\n            };\n\n            let lastYUpdate = null;\n            let lastJUpdate = null;\n            let lastFUpdate = null;\n\n            records.forEach(record => {\n              const addAirlines = (airlineStr, set) => {\n                if (airlineStr) {\n                  airlineStr.split(',').forEach(airline => {\n                    const trimmed = airline.trim();\n                    if (trimmed) set.add(trimmed);\n                  });\n                }\n              };\n\n              if (record.YDirect && record.YDirectAirlines) {\n                const prevSize = mergedAirlines.Y.size;\n                addAirlines(record.YDirectAirlines, mergedAirlines.Y);\n                if (mergedAirlines.Y.size > prevSize) lastYUpdate = record.ID;\n              }\n              if (record.JDirect && record.JDirectAirlines) {\n                const prevSize = mergedAirlines.J.size;\n                addAirlines(record.JDirectAirlines, mergedAirlines.J);\n                if (mergedAirlines.J.size > prevSize) lastJUpdate = record.ID;\n              }\n              if (record.FDirect && record.FDirectAirlines) {\n                const prevSize = mergedAirlines.F.size;\n                addAirlines(record.FDirectAirlines, mergedAirlines.F);\n                if (mergedAirlines.F.size > prevSize) lastFUpdate = record.ID;\n              }\n            });\n\n            // Update merged record\n            mergedRecord.YDirectAirlines = Array.from(mergedAirlines.Y).join(',');\n            mergedRecord.JDirectAirlines = Array.from(mergedAirlines.J).join(',');\n            mergedRecord.FDirectAirlines = Array.from(mergedAirlines.F).join(',');\n            mergedRecord.YDirect = mergedAirlines.Y.size > 0;\n            mergedRecord.JDirect = mergedAirlines.J.size > 0;\n            mergedRecord.FDirect = mergedAirlines.F.size > 0;\n            mergedRecord.lastYUpdate = lastYUpdate;\n            mergedRecord.lastJUpdate = lastJUpdate;\n            mergedRecord.lastFUpdate = lastFUpdate;\n\n            console.log('\\nMerged record:', {\n              YDirectAirlines: mergedRecord.YDirectAirlines,\n              JDirectAirlines: mergedRecord.JDirectAirlines,\n              FDirectAirlines: mergedRecord.FDirectAirlines,\n              YDirect: mergedRecord.YDirect,\n              JDirect: mergedRecord.JDirect,\n              FDirect: mergedRecord.FDirect,\n              lastYUpdate,\n              lastJUpdate,\n              lastFUpdate\n            });\n\n            if (!processedAvailability[dateKey]) {\n              processedAvailability[dateKey] = [];\n            }\n            \n            processedAvailability[dateKey].push({\n              route: `${mergedRecord.originAirport}-${mergedRecord.destinationAirport}`,\n              classes: {\n                Y: mergedRecord.YDirect,\n                J: mergedRecord.JDirect,\n                F: mergedRecord.FDirect\n              },\n              ID: mergedRecord.ID,\n              lastYUpdate: mergedRecord.lastYUpdate,\n              lastJUpdate: mergedRecord.lastJUpdate,\n              lastFUpdate: mergedRecord.lastFUpdate,\n              distance: mergedRecord.distance,\n              date: mergedRecord.date,\n              Source: mergedRecord.source,\n              YDirectAirlines: mergedRecord.YDirectAirlines,\n              JDirectAirlines: mergedRecord.JDirectAirlines,\n              FDirectAirlines: mergedRecord.FDirectAirlines\n            });\n          });\n          \n          setAvailabilityData(processedAvailability);\n        }\n      }\n\n      // Continue with existing segment search logic\n      const newProcessedSegments = [];\n      const [startDate, endDate] = selectedDates;\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\n      \n      console.log('\\n=== Processing Segments with Stopover ===');\n      if (stopoverInfo) {\n        console.log('Stopover Details:', {\n          airport: stopoverInfo.airport,\n          days: stopoverInfo.days\n        });\n      }\n\n      console.log('\\n=== Processing Segments ===');\n      console.log('Date Range:', {\n        start: dayjs(startDate).format('YYYY-MM-DD'),\n        end: dayjs(endDate).format('YYYY-MM-DD')\n      });\n      \n      try {\n        // Process all segments\n        for (let i = 0; i < currentRoute.length - 1; i++) {\n          const from = currentRoute[i];\n          const to = currentRoute[i + 1];\n          \n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n          \n          let timeWindow = null;\n          const dates = new Set();\n\n          if (i === 0) {\n            // First segment - use full date range\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            \n            console.log('\\n=== First Segment Details ===');\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n            \n            // Get all dates in range\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n          } else {\n            // Handle subsequent segments with stopover consideration\n            const prevSegment = newProcessedSegments[i - 1];\n            \n            if (!prevSegment || prevSegment.flights.length === 0) {\n              // Use full date range if no previous flights\n              const startDay = dayjs(startDate).startOf('day');\n              const endDay = dayjs(endDate).endOf('day');\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('No previous flights found. Using full date range for this segment');\n            } else {\n              // Calculate time window from previous segment's flights\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n              \n              console.log('\\n=== Processing Subsequent Segment ===');\n              console.log('Segment:', `${currentRoute[i-1]}-${currentRoute[i]}`);\n              console.log('Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n              console.log('Current Airport:', currentRoute[i]);\n              console.log('Previous Airport:', currentRoute[i-1]);\n              console.log('Is Stopover Airport:', stopoverInfo && currentRoute[i] === stopoverInfo.airport);\n              \n              // Adjust time window based on stopover\n              if (stopoverInfo && currentRoute[i] === stopoverInfo.airport) {\n                console.log(`\\nApplying stopover of ${stopoverInfo.days} days at ${stopoverInfo.airport}`);\n                timeWindow = {\n                  start: arrivals[0].add(stopoverInfo.days, 'days'),\n                  end: arrivals[arrivals.length - 1].add(stopoverInfo.days, 'days').add(24, 'hours'),\n                  isStopover: true,\n                  stopoverDays: stopoverInfo.days\n                };\n              } else {\n                timeWindow = {\n                  start: arrivals[0],\n                  end: arrivals[arrivals.length - 1].add(24, 'hours'),\n                  isStopover: false,\n                  stopoverDays: 0\n                };\n              }\n              \n              console.log('\\nTime Window:', {\n                start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n                end: timeWindow.end.format('YYYY-MM-DD HH:mm'),\n                isStopover: timeWindow.isStopover,\n                stopoverDays: timeWindow.stopoverDays\n              });\n\n              // Get dates for time window\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n            }\n          }\n\n          // Process each date\n          const allFlights = [];\n          for (const date of dates) {\n            // Find route from availability data instead\n            const availableRoutes = availabilityData[date] || [];\n            const route = availableRoutes.find(r => \n              r.route === `${from}-${to}`\n            );\n\n            if (!route) {\n              console.log(`No route found for ${from}-${to} on ${date}`);\n              continue;\n            }\n\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\n            console.log(`Segment ID: ${route.ID}`);\n            \n            try {\n              const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n                method: 'GET',\n                headers: {\n                  'accept': 'application/json',\n                  'Partner-Authorization': apiKey,\n                  'Segment-ID': route.ID\n                }\n              });\n\n              if (!response.ok) {\n                console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n                continue;\n              }\n\n              const data = await response.json();\n              const processedFlights = processFlightData(data, timeWindow, i);\n              console.log(`✓ Found ${processedFlights.length} valid flights`);\n              allFlights.push(...processedFlights);\n            } catch (error) {\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\n            }\n          }\n\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n          // Store searched dates in segment data\n          newProcessedSegments[i] = {\n            route: `${from}-${to}`,\n            flights: allFlights,\n            searchDates: dates, // Add this field\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n          };\n\n          // Only break if previous segment had flights but current segment found none\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i-1].flights.length > 0) {\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n            console.log('Skipping remaining segments');\n            break;\n          }\n        }\n\n        // After processing all segments\n        if (newProcessedSegments.length >= 1) {\n          // Log all flights found by segment\n          console.log('\\n=== All Flights Found ===');\n          newProcessedSegments.forEach((segment, index) => {\n            if (segment.flights && segment.flights.length > 0) {\n              console.log(`\\nSegment ${index} (${segment.route}):`);\n              segment.flights\n                .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\n                .forEach(flight => {\n                  console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft}`);\n                });\n            } else {\n              console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\n            }\n          });\n\n          console.log('\\n=== Flight Combinations ===');\n          \n          // Find the first and last segments with flights\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(\n            segment => segment.flights && segment.flights.length > 0\n          );\n          \n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(\n            segment => segment.flights && segment.flights.length > 0\n          );\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n          // Find all valid combinations recursively\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n            // If we've reached beyond the last valid segment, this is a valid combination\n            if (segmentIndex > lastSegmentIndex) {\n              return [currentPath];\n            }\n\n            const validCombos = [];\n            const currentSegment = newProcessedSegments[segmentIndex];\n\n            // If no flights in current segment, try next segment\n            if (!currentSegment?.flights || currentSegment.flights.length === 0) {\n              return findValidCombinations(currentPath, segmentIndex + 1);\n            }\n\n            // For first segment, try all flights\n            if (currentPath.length === 0) {\n              currentSegment.flights.forEach(flight => {\n                const combos = findValidCombinations([flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              });\n            } else {\n              // For subsequent segments, check connection times\n              const prevFlight = currentPath[currentPath.length - 1];\n              const prevArrival = dayjs(prevFlight.ArrivesAt);\n              const isStopoverPoint = stopoverInfo && \n                                     currentRoute[segmentIndex] === stopoverInfo.airport;\n\n              currentSegment.flights.forEach(flight => {\n                const departure = dayjs(flight.DepartsAt);\n                const connectionTime = departure.diff(prevArrival, 'minutes');\n\n                if (isStopoverPoint) {\n                  // For stopover points, connection must be within stopover day window\n                  const minStopoverTime = stopoverInfo.days * 24 * 60; // Convert days to minutes\n                  const maxStopoverTime = (stopoverInfo.days + 1) * 24 * 60; // Add one more day for flexibility\n                  \n                  if (connectionTime >= minStopoverTime && connectionTime <= maxStopoverTime) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                } else {\n                  // For normal connections, 30 minutes to 24 hours\n                  if (connectionTime >= 30 && connectionTime <= 24 * 60) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                }\n              });\n            }\n\n            return validCombos;\n          };\n\n          // Get all valid combinations using the new function\n          const allCombinations = findValidCombinations();\n\n          // Store combinations in ref immediately after finding them\n          combinationsRef.current = allCombinations;\n\n          // Log the combinations\n          console.log('\\n=== Valid Combinations ===');\n          if (allCombinations.length === 0) {\n            console.log('No valid combinations found for any segment range');\n          } else {\n            console.log(`Found ${allCombinations.length} valid combinations`);\n            allCombinations.forEach(combo => {\n              const flightInfo = combo.map((flight, idx) => {\n                if (idx === 0) {\n                  return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n                }\n                \n                const prevFlight = combo[idx - 1];\n                const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n                const hours = Math.floor(connectionTime / 60);\n                const minutes = connectionTime % 60;\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n              });\n              \n              console.log(flightInfo.join(' → '));\n            });\n          }\n\n          // Create a map of valid flights by segment\n          const validFlightsBySegment = new Map();\n          allCombinations.forEach(combo => {\n            combo.forEach(flight => {\n              const segmentKey = flight.segmentIndex;\n              if (!validFlightsBySegment.has(segmentKey)) {\n                validFlightsBySegment.set(segmentKey, new Set());\n              }\n              validFlightsBySegment.get(segmentKey).add(\n                `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`\n              );\n            });\n          });\n\n          // Filter and process flights\n          const filteredFlights = [];\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segment = newProcessedSegments[i];\n            if (!segment || !segment.flights) continue;\n\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n            \n            // Add valid flights from this segment\n            segment.flights.forEach(flight => {\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n              if (validFlightsForSegment.has(flightKey)) {\n                filteredFlights.push({\n                  ...flight,\n                  isSelected: false,\n                  segmentIndex: i\n                });\n              }\n            });\n          }\n\n          setSegmentDetails(filteredFlights);\n          setValidCombinations(allCombinations);\n\n          // Log flights by segment\n          console.log('\\n=== Flights By Segment ===');\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n            if (segmentFlights.length > 0) {\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n              segmentFlights\n                .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\n                .forEach(flight => {\n                  console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n                });\n            }\n          }\n          \n          console.log('\\n======================');\n        } else {\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => \n            segment.flights.map(flight => ({\n              ...flight,\n              isSelected: false,\n              segmentIndex: index\n            }))\n          ));\n          setValidCombinations([]);\n        }\n      } catch (error) {\n        console.error('Error processing segments:', error);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n\n  const handleCalendarSearch = async (currentRoute) => {\n    if (!currentRoute || !apiKey) return;\n    \n    setIsLoadingAvailability(true);\n    \n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n      \n      // Add startDate parameter if available\n      let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n      if (startDate) {\n        const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n        url += `?startDate=${formattedDate}`;\n        console.log(`Using start date: ${formattedDate} for availability search`);\n      }\n      \n      console.log(`Fetching availability data from: ${url}`);\n      \n      const availabilityResponse = await fetch(\n        url,\n        {\n          method: 'GET',\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        }\n      );\n\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n        console.log(`Received ${availabilityResult.length} availability records`);\n        \n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        \n        // Group records by date and route\n        const groupedRecords = {};\n        availabilityResult.forEach(item => {\n          const key = `${item.date}_${item.originAirport}-${item.destinationAirport}`;\n          if (!groupedRecords[key]) {\n            groupedRecords[key] = [];\n          }\n          groupedRecords[key].push(item);\n        });\n\n        // Process each group of records\n        Object.values(groupedRecords).forEach(records => {\n          // Sort records by source priority: united -> velocity -> lufthansa -> aeroplan\n          const sourcePriority = { united: 0, velocity: 1, lufthansa: 2, aeroplan: 3 };\n          records.sort((a, b) => sourcePriority[a.source] - sourcePriority[b.source]);\n\n          // Initialize merged record from the first record\n          const mergedRecord = { ...records[0] };\n          const dateKey = mergedRecord.date;\n\n          // Process airline lists for each cabin class\n          const processAirlines = (airlineStr) => {\n            if (!airlineStr) return '';\n            return airlineStr.split(',').map(a => a.trim()).filter(Boolean).join(',');\n          };\n\n          // Filter airlines based on source\n          records.forEach(record => {\n            // Remove specific airlines based on source\n            if (record.source === 'lufthansa') {\n              record.YDirectAirlines = processAirlines(record.YDirectAirlines?.replace(/\\bLH\\b/g, ''));\n              record.JDirectAirlines = processAirlines(record.JDirectAirlines?.replace(/\\bLH\\b/g, ''));\n              record.FDirectAirlines = processAirlines(record.FDirectAirlines?.replace(/\\bLH\\b/g, ''));\n            } else if (record.source === 'united') {\n              record.YDirectAirlines = processAirlines(record.YDirectAirlines?.replace(/\\bUA\\b/g, ''));\n              record.JDirectAirlines = processAirlines(record.JDirectAirlines?.replace(/\\bUA\\b/g, ''));\n              record.FDirectAirlines = processAirlines(record.FDirectAirlines?.replace(/\\bUA\\b/g, ''));\n            }\n\n            // Update Direct flags based on remaining airlines\n            record.YDirect = !!record.YDirectAirlines;\n            record.JDirect = !!record.JDirectAirlines;\n            record.FDirect = !!record.FDirectAirlines;\n\n            console.log(`\\nProcessed ${record.source} record:`, {\n              YDirectAirlines: record.YDirectAirlines,\n              JDirectAirlines: record.JDirectAirlines,\n              FDirectAirlines: record.FDirectAirlines,\n              YDirect: record.YDirect,\n              JDirect: record.JDirect,\n              FDirect: record.FDirect\n            });\n          });\n\n          // Merge airlines across sources\n          const mergedAirlines = {\n            Y: new Set(),\n            J: new Set(),\n            F: new Set()\n          };\n\n          let lastYUpdate = null;\n          let lastJUpdate = null;\n          let lastFUpdate = null;\n\n          records.forEach(record => {\n            const addAirlines = (airlineStr, set) => {\n              if (airlineStr) {\n                airlineStr.split(',').forEach(airline => {\n                  const trimmed = airline.trim();\n                  if (trimmed) set.add(trimmed);\n                });\n              }\n            };\n\n            if (record.YDirect && record.YDirectAirlines) {\n              const prevSize = mergedAirlines.Y.size;\n              addAirlines(record.YDirectAirlines, mergedAirlines.Y);\n              if (mergedAirlines.Y.size > prevSize) lastYUpdate = record.ID;\n            }\n            if (record.JDirect && record.JDirectAirlines) {\n              const prevSize = mergedAirlines.J.size;\n              addAirlines(record.JDirectAirlines, mergedAirlines.J);\n              if (mergedAirlines.J.size > prevSize) lastJUpdate = record.ID;\n            }\n            if (record.FDirect && record.FDirectAirlines) {\n              const prevSize = mergedAirlines.F.size;\n              addAirlines(record.FDirectAirlines, mergedAirlines.F);\n              if (mergedAirlines.F.size > prevSize) lastFUpdate = record.ID;\n            }\n          });\n\n          // Update merged record\n          mergedRecord.YDirectAirlines = Array.from(mergedAirlines.Y).join(',');\n          mergedRecord.JDirectAirlines = Array.from(mergedAirlines.J).join(',');\n          mergedRecord.FDirectAirlines = Array.from(mergedAirlines.F).join(',');\n          mergedRecord.YDirect = mergedAirlines.Y.size > 0;\n          mergedRecord.JDirect = mergedAirlines.J.size > 0;\n          mergedRecord.FDirect = mergedAirlines.F.size > 0;\n          mergedRecord.lastYUpdate = lastYUpdate;\n          mergedRecord.lastJUpdate = lastJUpdate;\n          mergedRecord.lastFUpdate = lastFUpdate;\n\n          console.log('\\nMerged record:', {\n            YDirectAirlines: mergedRecord.YDirectAirlines,\n            JDirectAirlines: mergedRecord.JDirectAirlines,\n            FDirectAirlines: mergedRecord.FDirectAirlines,\n            YDirect: mergedRecord.YDirect,\n            JDirect: mergedRecord.JDirect,\n            FDirect: mergedRecord.FDirect,\n            lastYUpdate,\n            lastJUpdate,\n            lastFUpdate\n          });\n\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          \n          processedAvailability[dateKey].push({\n            route: `${mergedRecord.originAirport}-${mergedRecord.destinationAirport}`,\n            classes: {\n              Y: mergedRecord.YDirect,\n              J: mergedRecord.JDirect,\n              F: mergedRecord.FDirect\n            },\n            ID: mergedRecord.ID,\n            lastYUpdate: mergedRecord.lastYUpdate,\n            lastJUpdate: mergedRecord.lastJUpdate,\n            lastFUpdate: mergedRecord.lastFUpdate,\n            distance: mergedRecord.distance,\n            date: mergedRecord.date,\n            Source: mergedRecord.source,\n            YDirectAirlines: mergedRecord.YDirectAirlines,\n            JDirectAirlines: mergedRecord.JDirectAirlines,\n            FDirectAirlines: mergedRecord.FDirectAirlines\n          });\n        });\n        \n        setAvailabilityData(processedAvailability);\n      } else {\n        console.error('Failed to fetch availability data:', availabilityResponse.status);\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n\n  const resetDetails = () => {\n    // Clear all data states\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n    setStartDate(null); // Clear the start date\n    \n    // Note: We don't clear selectedDates here because we do it explicitly in the modal close handler\n    \n    // Reset the combinations reference\n    combinationsRef.current = [];\n    \n    // Clear any stopover information in the FlightAvailabilityCalendar\n    if (window.clearStopoverInfo && typeof window.clearStopoverInfo === 'function') {\n      window.clearStopoverInfo();\n    }\n    \n    // Clear calendar display\n    if (window.hideCalendar && typeof window.hideCalendar === 'function') {\n      window.hideCalendar();\n    }\n  };\n\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    \n    setSelectedFlights(prevSelected => {\n      const newSelected = { ...prevSelected };\n      \n      // Check if this exact flight is already selected\n      const isCurrentlySelected = newSelected[segmentIndex]?.some?.(f => {\n        const matches = f.flightNumber === flight.flightNumber && \n                       dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && \n                        dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Log all current selections\n      console.log('\\nALL CURRENT SELECTIONS:');\n      Object.entries(newSelected).forEach(([idx, flights]) => {\n        if (Array.isArray(flights)) {\n          flights.forEach(f => {\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          });\n        }\n      });\n\n      // Use combinations from the ref\n      const currentCombos = combinationsRef.current;\n      const firstSegmentWithFlights = Math.min(...segmentDetails\n        .filter(f => !f.hidden)\n        .map(f => f.segmentIndex));\n      \n      console.log('\\nChecking combinations:', currentCombos.map(combo => \n        combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')\n      ));\n\n      // Find combinations that contain the selected flight(s)\n      const validCombos = currentCombos.filter(combo => {\n        // If no selections, all combinations are valid\n        if (Object.keys(newSelected).length === 0) return true;\n\n        // Check if this combination contains all selected flights\n        const isValid = Object.entries(newSelected).every(([segIdx, flights]) => {\n          const selectedFlight = flights[0];\n          // Adjust index based on first segment with flights\n          const comboIndex = parseInt(segIdx, 10) - firstSegmentWithFlights;\n          const comboFlight = combo[comboIndex];\n          \n          const matches = comboFlight?.flightNumber === selectedFlight.flightNumber &&\n                         dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm') === \n                         dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm');\n          \n          console.log(`Checking combo flight in segment ${segIdx}:`, {\n            selected: `${selectedFlight.flightNumber} (${dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm')})`,\n            combo: comboFlight ? `${comboFlight.flightNumber} (${dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm')})` : 'none',\n            comboIndex,\n            matches\n          });\n          \n          return matches;\n        });\n\n        return isValid;\n      });\n\n      console.log('\\nValid combinations:', validCombos.map(combo => \n        combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')\n      ));\n\n      // Create a set of all flights that appear in valid combinations\n      const validFlights = new Set();\n      validCombos.forEach(combo => {\n        combo.forEach(f => {\n          if (!f) return;\n          const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          validFlights.add(key);\n        });\n      });\n\n      // Update visibility\n      setSegmentDetails(prevDetails => \n        prevDetails.map(f => {\n          const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          const isSelected = newSelected[f.segmentIndex]?.some(sf => \n            sf.flightNumber === f.flightNumber && \n            dayjs(sf.DepartsAt).format('MM-DD HH:mm') === dayjs(f.DepartsAt).format('MM-DD HH:mm')\n          ) || false;\n\n          return {\n            ...f,\n            isSelected,\n            hidden: Object.keys(newSelected).length > 0 && !isSelected && !validFlights.has(flightKey)\n          };\n        })\n      );\n\n      return newSelected;\n    });\n  };\n\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => \n        combo.map((f, idx) => ({\n          ...f,\n          isSelected: false,\n          segmentIndex: idx\n        }))\n      );\n\n      const uniqueFlights = Array.from(\n        new Map(allFlights.map(f => [\n          `${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`,\n          f\n        ])).values()\n      );\n\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n    startDate,\n    setStartDate,\n  };\n} "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,OAAO,QAAQ,OAAO;AAC5D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,kCAAkC;AAC3D,OAAOC,QAAQ,MAAM,wBAAwB;AAE7C,eAAe,SAASC,gBAAgBA,CAACC,UAAU,EAAEC,mBAAmB,GAAG,EAAE,EAAE;EAAAC,EAAA;EAC7E,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,MAAMe,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;EAC5F,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACmB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACqB,eAAe,EAAEC,kBAAkB,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACuB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACyB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAAC2B,eAAe,EAAEC,kBAAkB,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAAC6B,oBAAoB,CAAC,GAAG7B,QAAQ,CAACS,mBAAmB,CAAC;EAC5D,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACgC,cAAc,EAAEC,iBAAiB,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACkC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACoC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EACzE,MAAM,CAACsC,SAAS,EAAEC,YAAY,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMwC,eAAe,GAAGtC,MAAM,CAAC,EAAE,CAAC;;EAElC;EACAD,SAAS,CAAC,MAAM;IACd,IAAIY,MAAM,EAAE;MACVE,YAAY,CAAC0B,OAAO,CAAC,oBAAoB,EAAE5B,MAAM,CAAC;IACpD;EACF,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,MAAM6B,UAAU,GAAGA,CAACC,OAAO,EAAEC,QAAQ,KAAK;IACxC,MAAMC,IAAI,GAAGzC,KAAK,CAACuC,OAAO,CAAC;IAC3B,MAAMG,IAAI,GAAG1C,KAAK,CAACwC,QAAQ,CAAC;;IAE5B;IACA,MAAMG,OAAO,GAAGF,IAAI,CAACG,IAAI,CAAC,CAAC,GAAG,EAAE,IAAIH,IAAI,CAACI,MAAM,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC;IAE1E,MAAMC,OAAO,GAAGL,IAAI,CAACI,MAAM,CAAC,OAAO,CAAC;IACpC,OAAOF,OAAO,GAAG,CAAC,GAAG,GAAGG,OAAO,MAAMH,OAAO,GAAG,GAAGG,OAAO;EAC3D,CAAC;EAED,MAAMC,cAAc,GAAIC,IAAI,IAAK;IAC/B,MAAMC,OAAO,GAAG/C,QAAQ,CAACgD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKJ,IAAI,CAAC;IACpD,OAAOC,OAAO,GAAGA,OAAO,CAACI,KAAK,CAACC,OAAO,CAAC,KAAKN,IAAI,GAAG,EAAE,EAAE,CAAC,GAAGA,IAAI;EACjE,CAAC;EAED,MAAMO,kBAAkB,GAAGA,CAACC,IAAI,EAAEC,EAAE,KAAK;IACvC,MAAMC,KAAK,GAAGzD,YAAY,CAACiD,IAAI,CAACS,CAAC,IAC/BA,CAAC,CAACC,MAAM,KAAKJ,IAAI,IACjBG,CAAC,CAACE,WAAW,KAAKJ,EACpB,CAAC;IAED,IAAI,CAACC,KAAK,EAAE;MACVI,OAAO,CAACC,GAAG,CAAC,+BAA+BP,IAAI,IAAIC,EAAE,0BAA0B,CAAC;MAChF,OAAO,IAAI;IACb;IAEAK,OAAO,CAACC,GAAG,CAAC,gBAAgBP,IAAI,IAAIC,EAAE,KAAKC,KAAK,CAACM,QAAQ,CAACC,cAAc,CAAC,CAAC,QAAQ,CAAC;IACnF,OAAOP,KAAK,CAACM,QAAQ;EACvB,CAAC;EAED,MAAME,iBAAiB,GAAGA,CAACC,IAAI,EAAEC,UAAU,EAAEC,YAAY,KAAK;IAAA,IAAAC,aAAA,EAAAC,cAAA,EAAAC,mBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,cAAA,EAAAC,eAAA,EAAAC,oBAAA;IAC5D,MAAMC,OAAO,GAAG,CAAC,CAAC;IAClB,MAAMtC,QAAQ,GAAGxC,KAAK,CAAC,EAAAsE,aAAA,GAAAH,IAAI,CAACY,OAAO,cAAAT,aAAA,wBAAAC,cAAA,GAAZD,aAAA,CAAe,CAAC,CAAC,cAAAC,cAAA,wBAAAC,mBAAA,GAAjBD,cAAA,CAAmBJ,IAAI,cAAAK,mBAAA,wBAAAC,qBAAA,GAAvBD,mBAAA,CAAyBL,IAAI,cAAAM,qBAAA,wBAAAC,sBAAA,GAA7BD,qBAAA,CAAgC,CAAC,CAAC,cAAAC,sBAAA,uBAAlCA,sBAAA,CAAoCM,SAAS,KAAI,IAAIC,IAAI,CAAC,CAAC,CAAC,CAACpC,MAAM,CAAC,YAAY,CAAC;IAExG,MAAMqC,UAAU,GAAG,EAAAP,cAAA,GAAAR,IAAI,CAACY,OAAO,cAAAJ,cAAA,wBAAAC,eAAA,GAAZD,cAAA,CAAe,CAAC,CAAC,cAAAC,eAAA,wBAAAC,oBAAA,GAAjBD,eAAA,CAAmBT,IAAI,cAAAU,oBAAA,uBAAvBA,oBAAA,CAAyBV,IAAI,KAAI,EAAE;IACtDL,OAAO,CAACC,GAAG,CAAC,gBAAgBmB,UAAU,CAACC,MAAM,eAAe,CAAC;IAE7D,IAAIf,UAAU,EAAE;MACdN,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE;QAC1BqB,KAAK,EAAEhB,UAAU,CAACgB,KAAK,CAACvC,MAAM,CAAC,kBAAkB,CAAC;QAClDwC,GAAG,EAAEjB,UAAU,CAACiB,GAAG,CAACxC,MAAM,CAAC,kBAAkB;MAC/C,CAAC,CAAC;IACJ;IAEAqC,UAAU,CACPI,MAAM,CAACC,IAAI,IAAI;MACd;MACA,MAAMC,aAAa,GAAGxF,KAAK,CAACuF,IAAI,CAACP,SAAS,CAAC1B,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;MAC5D,MAAMmC,WAAW,GAAGzF,KAAK,CAACuF,IAAI,CAACG,SAAS,CAACpC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;MAE1DQ,OAAO,CAACC,GAAG,CAAC,qBAAqBwB,IAAI,CAACI,aAAa,GAAG,CAAC;MACvD7B,OAAO,CAACC,GAAG,CAAC,cAAcwB,IAAI,CAACK,QAAQ,EAAE,CAAC;MAC1C9B,OAAO,CAACC,GAAG,CAAC,cAAcyB,aAAa,CAAC3C,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC;MACrEiB,OAAO,CAACC,GAAG,CAAC,cAAc0B,WAAW,CAAC5C,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC;;MAEnE;MACA,IAAI0C,IAAI,CAACM,KAAK,KAAK,CAAC,EAAE;QACpB/B,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/C,OAAO,KAAK;MACd;;MAEA;MACA,IAAIwB,IAAI,CAACK,QAAQ,KAAK,IAAI,IAAIL,IAAI,CAACK,QAAQ,KAAK,IAAI,EAAE;QACpD9B,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5C,OAAO,KAAK;MACd;;MAEA;MACA,IAAIwB,IAAI,CAACO,SAAS,IAAIP,IAAI,CAACO,SAAS,CAACX,MAAM,KAAK,CAAC,EAAE;QACjDrB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;QACjD,OAAO,KAAK;MACd;MAEA,IAAIK,UAAU,EAAE;QACd,MAAM2B,OAAO,GAAGP,aAAa,CAACQ,OAAO,CAAC5B,UAAU,CAACgB,KAAK,CAAC,IACxCI,aAAa,CAACS,QAAQ,CAAC7B,UAAU,CAACiB,GAAG,CAAC;QAErD,IAAI,CAACU,OAAO,EAAE;UACZjC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;UAC/CD,OAAO,CAACC,GAAG,CAAC,2BAA2BK,UAAU,CAACgB,KAAK,CAACvC,MAAM,CAAC,kBAAkB,CAAC,QAAQuB,UAAU,CAACiB,GAAG,CAACxC,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC;QACxI,CAAC,MAAM;UACLiB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QACjD;QACA,OAAOgC,OAAO;MAChB;MAEAjC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MACxD,OAAO,IAAI;IACb,CAAC,CAAC,CACDmC,OAAO,CAACX,IAAI,IAAI;MACf;MACA,MAAMC,aAAa,GAAGxF,KAAK,CAACuF,IAAI,CAACP,SAAS,CAAC1B,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;MAC5D,MAAMmC,WAAW,GAAGzF,KAAK,CAACuF,IAAI,CAACG,SAAS,CAACpC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;;MAE1D;MACA,MAAM6C,OAAO,GAAGZ,IAAI,CAACK,QAAQ,KAAK,IAAI,GAAG,IAAI,GAAGL,IAAI,CAACK,QAAQ;MAC7D,MAAMQ,YAAY,GAAGb,IAAI,CAACI,aAAa,CAACU,UAAU,CAAC,IAAI,CAAC,GACpD,KAAKd,IAAI,CAACI,aAAa,CAACW,KAAK,CAAC,CAAC,CAAC,EAAE,GAClCf,IAAI,CAACI,aAAa;MAEtB,MAAMY,SAAS,GAAGvG,KAAK,CAACwC,QAAQ,CAAC;MACjC,MAAMgE,aAAa,GAAGhB,aAAa,CAACiB,IAAI,CAACF,SAAS,EAAE,KAAK,CAAC;MAC1D,MAAMG,cAAc,GAAGjB,WAAW,CAACgB,IAAI,CAACF,SAAS,EAAE,KAAK,CAAC;;MAEzD;MACA,IAAIzB,OAAO,CAACsB,YAAY,CAAC,EAAE;QACzB,QAAOb,IAAI,CAACoB,KAAK,CAACC,WAAW,CAAC,CAAC;UAC7B,KAAK,SAAS;YACZ9B,OAAO,CAACsB,YAAY,CAAC,CAACS,OAAO,GAAG,IAAI;YACpC;UACF,KAAK,UAAU;YACb/B,OAAO,CAACsB,YAAY,CAAC,CAACU,QAAQ,GAAG,IAAI;YACrC;UACF,KAAK,OAAO;YACVhC,OAAO,CAACsB,YAAY,CAAC,CAACW,KAAK,GAAG,IAAI;YAClC;QACJ;QACA,OAAO,CAAC;MACV;;MAEA;MACA,IAAIC,YAAY,GAAGzB,IAAI,CAAC0B,QAAQ,CAAC,CAAC,CAAC;MACnC,IAAID,YAAY,IAAIA,YAAY,KAAK,UAAU,EAAE;QAC/CA,YAAY,GAAG,eAAe;MAChC;MAEAlC,OAAO,CAACsB,YAAY,CAAC,GAAG;QACtB5C,IAAI,EAAE+B,IAAI,CAAC2B,aAAa;QACxBzD,EAAE,EAAE8B,IAAI,CAAC4B,kBAAkB;QAC3Bf,YAAY,EAAEA,YAAY;QAC1BlG,QAAQ,EAAE6C,cAAc,CAACoD,OAAO,CAAC;QACjCiB,QAAQ,EAAEJ,YAAY;QACtBK,QAAQ,EAAE9B,IAAI,CAAC+B,aAAa;QAC5BC,OAAO,EAAEf,aAAa,GAAG,CAAC,GACxB,GAAGhB,aAAa,CAAC3C,MAAM,CAAC,OAAO,CAAC,MAAM2D,aAAa,GAAG,GACtDhB,aAAa,CAAC3C,MAAM,CAAC,OAAO,CAAC;QAC/B2E,OAAO,EAAEd,cAAc,GAAG,CAAC,GACzB,GAAGjB,WAAW,CAAC5C,MAAM,CAAC,OAAO,CAAC,MAAM6D,cAAc,GAAG,GACrDjB,WAAW,CAAC5C,MAAM,CAAC,OAAO,CAAC;QAC7BmC,SAAS,EAAEQ,aAAa,CAAC3C,MAAM,CAAC,qBAAqB,CAAC;QACtD6C,SAAS,EAAED,WAAW,CAAC5C,MAAM,CAAC,qBAAqB,CAAC;QACpDgE,OAAO,EAAE,KAAK;QACdC,QAAQ,EAAE,KAAK;QACfC,KAAK,EAAE,KAAK;QACZU,UAAU,EAAE,KAAK;QACjBzD,QAAQ,EAAE0D,QAAQ,CAACnC,IAAI,CAACoC,QAAQ,CAAC,IAAIpE,kBAAkB,CAACgC,IAAI,CAAC2B,aAAa,EAAE3B,IAAI,CAAC4B,kBAAkB,CAAC;QACpG9C,YAAY,EAAEA;MAChB,CAAC;MAED,QAAOkB,IAAI,CAACoB,KAAK,CAACC,WAAW,CAAC,CAAC;QAC7B,KAAK,SAAS;UACZ9B,OAAO,CAACsB,YAAY,CAAC,CAACS,OAAO,GAAG,IAAI;UACpC;QACF,KAAK,UAAU;UACb/B,OAAO,CAACsB,YAAY,CAAC,CAACU,QAAQ,GAAG,IAAI;UACrC;QACF,KAAK,OAAO;UACVhC,OAAO,CAACsB,YAAY,CAAC,CAACW,KAAK,GAAG,IAAI;UAClC;MACJ;IACF,CAAC,CAAC;IAEJ,OAAOa,MAAM,CAACC,MAAM,CAAC/C,OAAO,CAAC;EAC/B,CAAC;EAED,MAAMgD,aAAa,GAAGA,CAACvF,OAAO,EAAEwF,SAAS,KAAK;IAC5C,IAAI,CAACA,SAAS,IAAI,CAACA,SAAS,CAAC,CAAC,CAAC,IAAI,CAACA,SAAS,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK;IAC9D,MAAMtF,IAAI,GAAGzC,KAAK,CAACuC,OAAO,CAAC;IAC3B,MAAM6C,KAAK,GAAGpF,KAAK,CAAC+H,SAAS,CAAC,CAAC,CAAC,CAAC;IACjC,MAAM1C,GAAG,GAAGrF,KAAK,CAAC+H,SAAS,CAAC,CAAC,CAAC,CAAC;IAC/B,OAAOtF,IAAI,CAACuD,OAAO,CAACZ,KAAK,CAAC4C,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,IACtCvF,IAAI,CAACwD,QAAQ,CAACZ,GAAG,CAAC4C,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;EACzC,CAAC;EAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,YAAY,EAAEC,YAAY,EAAEC,oBAAoB,GAAG,KAAK,EAAEC,eAAe,GAAG,KAAK,KAAK;IACpHxE,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAC1DD,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEoE,YAAY,CAAC;IAC3CrE,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEwE,IAAI,CAACC,SAAS,CAACJ,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC7EtE,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEsE,oBAAoB,CAAC;IAC5DvE,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEuE,eAAe,CAAC;IAEjD,IAAI,CAAC/H,aAAa,IAAI,CAAC4H,YAAY,IAAI,CAAC1H,MAAM,EAAE;MAC9CqD,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE;QACpCxD,aAAa,EAAE,CAAC,CAACA,aAAa;QAC9B4H,YAAY,EAAE,CAAC,CAACA,YAAY;QAC5B1H,MAAM,EAAE,CAAC,CAACA;MACZ,CAAC,CAAC;MACF;IACF;;IAEA;IACA,IAAI6H,eAAe,EAAE;MACnBpH,kBAAkB,CAAC,CAAC,CAAC,CAAC;MACtBJ,iBAAiB,CAAC2H,WAAW,IAC3BA,WAAW,CAACC,GAAG,CAACC,CAAC,KAAK;QACpB,GAAGA,CAAC;QACJlB,UAAU,EAAE,KAAK;QACjBmB,MAAM,EAAE;MACV,CAAC,CAAC,CACJ,CAAC;IACH;IAEA5H,oBAAoB,CAAC,IAAI,CAAC;IAE1B,IAAI;MACF,MAAM6H,gBAAgB,GAAG,EAAE;MAC3B,KAAK,MAAMpG,IAAI,IAAImF,MAAM,CAACkB,IAAI,CAAChH,gBAAgB,CAAC,EAAE;QAChD,IAAIgG,aAAa,CAACrF,IAAI,EAAElC,aAAa,CAAC,EAAE;UACtC;UACA,MAAMwI,QAAQ,GAAGjH,gBAAgB,CAACW,IAAI,CAAC,CAACiG,GAAG,CAACM,OAAO,KAAK;YACtD,GAAGA,OAAO;YACVhF,QAAQ,EAAE0D,QAAQ,CAACsB,OAAO,CAAChF,QAAQ,CAAC,IAAIT,kBAAkB,CAACyF,OAAO,CAACtF,KAAK,CAACuF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAED,OAAO,CAACtF,KAAK,CAACuF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACrH,CAAC,CAAC,CAAC;UACHJ,gBAAgB,CAACK,IAAI,CAAC,GAAGH,QAAQ,CAAC;QACpC;MACF;;MAEA;MACAjF,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3D,MAAMoF,eAAe,GAAGN,gBAAgB,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEL,OAAO,KAAK;QAChE,IAAI,CAACK,GAAG,CAACL,OAAO,CAACtF,KAAK,CAAC,EAAE;UACvB2F,GAAG,CAACL,OAAO,CAACtF,KAAK,CAAC,GAAG,EAAE;QACzB;QACA2F,GAAG,CAACL,OAAO,CAACtF,KAAK,CAAC,CAACwF,IAAI,CAACF,OAAO,CAAC;QAChC,OAAOK,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;MAENzB,MAAM,CAAC0B,OAAO,CAACH,eAAe,CAAC,CAACjD,OAAO,CAAC,CAAC,CAACxC,KAAK,EAAEqF,QAAQ,CAAC,KAAK;QAC7DjF,OAAO,CAACC,GAAG,CAAC,WAAWL,KAAK,GAAG,CAAC;QAChCqF,QAAQ,CAAC7C,OAAO,CAAC8C,OAAO,IAAI;UAC1BlF,OAAO,CAACC,GAAG,CAAC,SAASiF,OAAO,CAACO,EAAE,EAAE,CAAC;UAClCzF,OAAO,CAACC,GAAG,CAAC,WAAWiF,OAAO,CAACvG,IAAI,EAAE,CAAC;UACtCqB,OAAO,CAACC,GAAG,CAAC,qBAAqBiF,OAAO,CAACQ,OAAO,CAACC,CAAC,OAAOT,OAAO,CAACQ,OAAO,CAACE,CAAC,OAAOV,OAAO,CAACQ,OAAO,CAACG,CAAC,EAAE,CAAC;QACvG,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACA,MAAMC,eAAe,GAAGf,gBAAgB,CAACH,GAAG,CAACM,OAAO,IAClDa,KAAK,CAAC,sEAAsEb,OAAO,CAACO,EAAE,EAAE,EAAE;QACxFO,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,uBAAuB,EAAErJ;QAC3B;MACF,CAAC,CACH,CAAC;;MAED;MACA,IAAI,CAAC4H,oBAAoB,EAAE;QACzB,MAAM0B,WAAW,GAAG5B,YAAY,CAAC6B,IAAI,CAAC,GAAG,CAAC;;QAE1C;QACA,IAAIC,GAAG,GAAG,qEAAqEF,WAAW,EAAE;QAC5F,IAAI7H,SAAS,EAAE;UACb,MAAMgI,aAAa,GAAGlK,KAAK,CAACkC,SAAS,CAAC,CAACW,MAAM,CAAC,YAAY,CAAC;UAC3DoH,GAAG,IAAI,cAAcC,aAAa,EAAE;QACtC;QAEA,MAAMC,oBAAoB,GAAG,MAAMN,KAAK,CACtCI,GAAG,EACH;UACEG,MAAM,EAAE,KAAK;UACbN,OAAO,EAAE;YACP,QAAQ,EAAE,kBAAkB;YAC5B,uBAAuB,EAAErJ;UAC3B;QACF,CACF,CAAC;QAED,IAAI0J,oBAAoB,CAACE,EAAE,EAAE;UAC3B,MAAMC,kBAAkB,GAAG,MAAMH,oBAAoB,CAACI,IAAI,CAAC,CAAC;;UAE5D;UACA,MAAMC,qBAAqB,GAAG,CAAC,CAAC;;UAEhC;UACA,MAAMC,cAAc,GAAG,CAAC,CAAC;UACzBH,kBAAkB,CAACpE,OAAO,CAACwE,IAAI,IAAI;YACjC,MAAMC,GAAG,GAAG,GAAGD,IAAI,CAACjI,IAAI,IAAIiI,IAAI,CAACE,aAAa,IAAIF,IAAI,CAACG,kBAAkB,EAAE;YAC3E,IAAI,CAACJ,cAAc,CAACE,GAAG,CAAC,EAAE;cACxBF,cAAc,CAACE,GAAG,CAAC,GAAG,EAAE;YAC1B;YACAF,cAAc,CAACE,GAAG,CAAC,CAACzB,IAAI,CAACwB,IAAI,CAAC;UAChC,CAAC,CAAC;;UAEF;UACA9C,MAAM,CAACC,MAAM,CAAC4C,cAAc,CAAC,CAACvE,OAAO,CAAC4E,OAAO,IAAI;YAC/C;YACA,MAAMC,cAAc,GAAG;cAAEC,MAAM,EAAE,CAAC;cAAEC,QAAQ,EAAE,CAAC;cAAEC,SAAS,EAAE,CAAC;cAAEC,QAAQ,EAAE;YAAE,CAAC;YAC5EL,OAAO,CAACM,IAAI,CAAC,CAACjI,CAAC,EAAEkI,CAAC,KAAKN,cAAc,CAAC5H,CAAC,CAACmI,MAAM,CAAC,GAAGP,cAAc,CAACM,CAAC,CAACC,MAAM,CAAC,CAAC;;YAE3E;YACA,MAAMC,YAAY,GAAG;cAAE,GAAGT,OAAO,CAAC,CAAC;YAAE,CAAC;YACtC,MAAMU,OAAO,GAAGD,YAAY,CAAC9I,IAAI;;YAEjC;YACA,MAAMgJ,eAAe,GAAIC,UAAU,IAAK;cACtC,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;cAC1B,OAAOA,UAAU,CAACzC,KAAK,CAAC,GAAG,CAAC,CAACP,GAAG,CAACvF,CAAC,IAAIA,CAAC,CAACwI,IAAI,CAAC,CAAC,CAAC,CAACrG,MAAM,CAACsG,OAAO,CAAC,CAAC5B,IAAI,CAAC,GAAG,CAAC;YAC3E,CAAC;;YAED;YACAc,OAAO,CAAC5E,OAAO,CAAC2F,MAAM,IAAI;cACxB;cACA,IAAIA,MAAM,CAACP,MAAM,KAAK,WAAW,EAAE;gBAAA,IAAAQ,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;gBACjCH,MAAM,CAACI,eAAe,GAAGR,eAAe,EAAAK,qBAAA,GAACD,MAAM,CAACI,eAAe,cAAAH,qBAAA,uBAAtBA,qBAAA,CAAwBxI,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;gBACxFuI,MAAM,CAACK,eAAe,GAAGT,eAAe,EAAAM,qBAAA,GAACF,MAAM,CAACK,eAAe,cAAAH,qBAAA,uBAAtBA,qBAAA,CAAwBzI,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;gBACxFuI,MAAM,CAACM,eAAe,GAAGV,eAAe,EAAAO,qBAAA,GAACH,MAAM,CAACM,eAAe,cAAAH,qBAAA,uBAAtBA,qBAAA,CAAwB1I,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;cAC1F,CAAC,MAAM,IAAIuI,MAAM,CAACP,MAAM,KAAK,QAAQ,EAAE;gBAAA,IAAAc,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;gBACrCT,MAAM,CAACI,eAAe,GAAGR,eAAe,EAAAW,sBAAA,GAACP,MAAM,CAACI,eAAe,cAAAG,sBAAA,uBAAtBA,sBAAA,CAAwB9I,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;gBACxFuI,MAAM,CAACK,eAAe,GAAGT,eAAe,EAAAY,sBAAA,GAACR,MAAM,CAACK,eAAe,cAAAG,sBAAA,uBAAtBA,sBAAA,CAAwB/I,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;gBACxFuI,MAAM,CAACM,eAAe,GAAGV,eAAe,EAAAa,sBAAA,GAACT,MAAM,CAACM,eAAe,cAAAG,sBAAA,uBAAtBA,sBAAA,CAAwBhJ,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;cAC1F;;cAEA;cACAuI,MAAM,CAACU,OAAO,GAAG,CAAC,CAACV,MAAM,CAACI,eAAe;cACzCJ,MAAM,CAACW,OAAO,GAAG,CAAC,CAACX,MAAM,CAACK,eAAe;cACzCL,MAAM,CAACY,OAAO,GAAG,CAAC,CAACZ,MAAM,CAACM,eAAe;cAEzCrI,OAAO,CAACC,GAAG,CAAC,eAAe8H,MAAM,CAACP,MAAM,UAAU,EAAE;gBAClDW,eAAe,EAAEJ,MAAM,CAACI,eAAe;gBACvCC,eAAe,EAAEL,MAAM,CAACK,eAAe;gBACvCC,eAAe,EAAEN,MAAM,CAACM,eAAe;gBACvCI,OAAO,EAAEV,MAAM,CAACU,OAAO;gBACvBC,OAAO,EAAEX,MAAM,CAACW,OAAO;gBACvBC,OAAO,EAAEZ,MAAM,CAACY;cAClB,CAAC,CAAC;YACJ,CAAC,CAAC;;YAEF;YACA,MAAMC,cAAc,GAAG;cACrBjD,CAAC,EAAE,IAAIkD,GAAG,CAAC,CAAC;cACZjD,CAAC,EAAE,IAAIiD,GAAG,CAAC,CAAC;cACZhD,CAAC,EAAE,IAAIgD,GAAG,CAAC;YACb,CAAC;YAED,IAAIC,WAAW,GAAG,IAAI;YACtB,IAAIC,WAAW,GAAG,IAAI;YACtB,IAAIC,WAAW,GAAG,IAAI;YAEtBhC,OAAO,CAAC5E,OAAO,CAAC2F,MAAM,IAAI;cACxB,MAAMkB,WAAW,GAAGA,CAACrB,UAAU,EAAEsB,GAAG,KAAK;gBACvC,IAAItB,UAAU,EAAE;kBACdA,UAAU,CAACzC,KAAK,CAAC,GAAG,CAAC,CAAC/C,OAAO,CAACjD,OAAO,IAAI;oBACvC,MAAMgK,OAAO,GAAGhK,OAAO,CAAC0I,IAAI,CAAC,CAAC;oBAC9B,IAAIsB,OAAO,EAAED,GAAG,CAAC/E,GAAG,CAACgF,OAAO,CAAC;kBAC/B,CAAC,CAAC;gBACJ;cACF,CAAC;cAED,IAAIpB,MAAM,CAACU,OAAO,IAAIV,MAAM,CAACI,eAAe,EAAE;gBAC5C,MAAMiB,QAAQ,GAAGR,cAAc,CAACjD,CAAC,CAAC0D,IAAI;gBACtCJ,WAAW,CAAClB,MAAM,CAACI,eAAe,EAAES,cAAc,CAACjD,CAAC,CAAC;gBACrD,IAAIiD,cAAc,CAACjD,CAAC,CAAC0D,IAAI,GAAGD,QAAQ,EAAEN,WAAW,GAAGf,MAAM,CAACtC,EAAE;cAC/D;cACA,IAAIsC,MAAM,CAACW,OAAO,IAAIX,MAAM,CAACK,eAAe,EAAE;gBAC5C,MAAMgB,QAAQ,GAAGR,cAAc,CAAChD,CAAC,CAACyD,IAAI;gBACtCJ,WAAW,CAAClB,MAAM,CAACK,eAAe,EAAEQ,cAAc,CAAChD,CAAC,CAAC;gBACrD,IAAIgD,cAAc,CAAChD,CAAC,CAACyD,IAAI,GAAGD,QAAQ,EAAEL,WAAW,GAAGhB,MAAM,CAACtC,EAAE;cAC/D;cACA,IAAIsC,MAAM,CAACY,OAAO,IAAIZ,MAAM,CAACM,eAAe,EAAE;gBAC5C,MAAMe,QAAQ,GAAGR,cAAc,CAAC/C,CAAC,CAACwD,IAAI;gBACtCJ,WAAW,CAAClB,MAAM,CAACM,eAAe,EAAEO,cAAc,CAAC/C,CAAC,CAAC;gBACrD,IAAI+C,cAAc,CAAC/C,CAAC,CAACwD,IAAI,GAAGD,QAAQ,EAAEJ,WAAW,GAAGjB,MAAM,CAACtC,EAAE;cAC/D;YACF,CAAC,CAAC;;YAEF;YACAgC,YAAY,CAACU,eAAe,GAAGmB,KAAK,CAAC5J,IAAI,CAACkJ,cAAc,CAACjD,CAAC,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC;YACrEuB,YAAY,CAACW,eAAe,GAAGkB,KAAK,CAAC5J,IAAI,CAACkJ,cAAc,CAAChD,CAAC,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC;YACrEuB,YAAY,CAACY,eAAe,GAAGiB,KAAK,CAAC5J,IAAI,CAACkJ,cAAc,CAAC/C,CAAC,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC;YACrEuB,YAAY,CAACgB,OAAO,GAAGG,cAAc,CAACjD,CAAC,CAAC0D,IAAI,GAAG,CAAC;YAChD5B,YAAY,CAACiB,OAAO,GAAGE,cAAc,CAAChD,CAAC,CAACyD,IAAI,GAAG,CAAC;YAChD5B,YAAY,CAACkB,OAAO,GAAGC,cAAc,CAAC/C,CAAC,CAACwD,IAAI,GAAG,CAAC;YAChD5B,YAAY,CAACqB,WAAW,GAAGA,WAAW;YACtCrB,YAAY,CAACsB,WAAW,GAAGA,WAAW;YACtCtB,YAAY,CAACuB,WAAW,GAAGA,WAAW;YAEtChJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE;cAC9BkI,eAAe,EAAEV,YAAY,CAACU,eAAe;cAC7CC,eAAe,EAAEX,YAAY,CAACW,eAAe;cAC7CC,eAAe,EAAEZ,YAAY,CAACY,eAAe;cAC7CI,OAAO,EAAEhB,YAAY,CAACgB,OAAO;cAC7BC,OAAO,EAAEjB,YAAY,CAACiB,OAAO;cAC7BC,OAAO,EAAElB,YAAY,CAACkB,OAAO;cAC7BG,WAAW;cACXC,WAAW;cACXC;YACF,CAAC,CAAC;YAEF,IAAI,CAACtC,qBAAqB,CAACgB,OAAO,CAAC,EAAE;cACnChB,qBAAqB,CAACgB,OAAO,CAAC,GAAG,EAAE;YACrC;YAEAhB,qBAAqB,CAACgB,OAAO,CAAC,CAACtC,IAAI,CAAC;cAClCxF,KAAK,EAAE,GAAG6H,YAAY,CAACX,aAAa,IAAIW,YAAY,CAACV,kBAAkB,EAAE;cACzErB,OAAO,EAAE;gBACPC,CAAC,EAAE8B,YAAY,CAACgB,OAAO;gBACvB7C,CAAC,EAAE6B,YAAY,CAACiB,OAAO;gBACvB7C,CAAC,EAAE4B,YAAY,CAACkB;cAClB,CAAC;cACDlD,EAAE,EAAEgC,YAAY,CAAChC,EAAE;cACnBqD,WAAW,EAAErB,YAAY,CAACqB,WAAW;cACrCC,WAAW,EAAEtB,YAAY,CAACsB,WAAW;cACrCC,WAAW,EAAEvB,YAAY,CAACuB,WAAW;cACrC9I,QAAQ,EAAEuH,YAAY,CAACvH,QAAQ;cAC/BvB,IAAI,EAAE8I,YAAY,CAAC9I,IAAI;cACvB4K,MAAM,EAAE9B,YAAY,CAACD,MAAM;cAC3BW,eAAe,EAAEV,YAAY,CAACU,eAAe;cAC7CC,eAAe,EAAEX,YAAY,CAACW,eAAe;cAC7CC,eAAe,EAAEZ,YAAY,CAACY;YAChC,CAAC,CAAC;UACJ,CAAC,CAAC;UAEFpK,mBAAmB,CAACyI,qBAAqB,CAAC;QAC5C;MACF;;MAEA;MACA,MAAM8C,oBAAoB,GAAG,EAAE;MAC/B,MAAM,CAACpL,SAAS,EAAEqL,OAAO,CAAC,GAAGhN,aAAa;MAC1C,MAAMiC,QAAQ,GAAGxC,KAAK,CAACkC,SAAS,CAAC,CAACW,MAAM,CAAC,YAAY,CAAC;MAEtDiB,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAC1D,IAAIqE,YAAY,EAAE;QAChBtE,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE;UAC/ByJ,OAAO,EAAEpF,YAAY,CAACoF,OAAO;UAC7BC,IAAI,EAAErF,YAAY,CAACqF;QACrB,CAAC,CAAC;MACJ;MAEA3J,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5CD,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE;QACzBqB,KAAK,EAAEpF,KAAK,CAACkC,SAAS,CAAC,CAACW,MAAM,CAAC,YAAY,CAAC;QAC5CwC,GAAG,EAAErF,KAAK,CAACuN,OAAO,CAAC,CAAC1K,MAAM,CAAC,YAAY;MACzC,CAAC,CAAC;MAEF,IAAI;QACF;QACA,KAAK,IAAI6K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvF,YAAY,CAAChD,MAAM,GAAG,CAAC,EAAEuI,CAAC,EAAE,EAAE;UAChD,MAAMlK,IAAI,GAAG2E,YAAY,CAACuF,CAAC,CAAC;UAC5B,MAAMjK,EAAE,GAAG0E,YAAY,CAACuF,CAAC,GAAG,CAAC,CAAC;UAE9B5J,OAAO,CAACC,GAAG,CAAC,iBAAiB2J,CAAC,GAAG,CAAC,KAAKlK,IAAI,IAAIC,EAAE,MAAM,CAAC;UAExD,IAAIW,UAAU,GAAG,IAAI;UACrB,MAAMuJ,KAAK,GAAG,IAAIhB,GAAG,CAAC,CAAC;UAEvB,IAAIe,CAAC,KAAK,CAAC,EAAE;YACX;YACA,MAAME,QAAQ,GAAG5N,KAAK,CAACkC,SAAS,CAAC,CAAC2L,OAAO,CAAC,KAAK,CAAC;YAChD,MAAMC,MAAM,GAAG9N,KAAK,CAACuN,OAAO,CAAC,CAACQ,KAAK,CAAC,KAAK,CAAC;YAE1CjK,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;YAC9CD,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;YACrED,OAAO,CAACC,GAAG,CAAC,SAAS6J,QAAQ,CAAC/K,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC;YAC3DiB,OAAO,CAACC,GAAG,CAAC,OAAO+J,MAAM,CAACjL,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC;;YAEvD;YACA,KAAK,IAAImL,CAAC,GAAGJ,QAAQ,EAAEI,CAAC,CAACC,OAAO,CAAC,CAAC,IAAIH,MAAM,CAACG,OAAO,CAAC,CAAC,EAAED,CAAC,GAAGA,CAAC,CAAC/F,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE;cAC3E0F,KAAK,CAAC1F,GAAG,CAAC+F,CAAC,CAACnL,MAAM,CAAC,YAAY,CAAC,CAAC;YACnC;UACF,CAAC,MAAM;YACL;YACA,MAAMqL,WAAW,GAAGZ,oBAAoB,CAACI,CAAC,GAAG,CAAC,CAAC;YAE/C,IAAI,CAACQ,WAAW,IAAIA,WAAW,CAACpJ,OAAO,CAACK,MAAM,KAAK,CAAC,EAAE;cACpD;cACA,MAAMyI,QAAQ,GAAG5N,KAAK,CAACkC,SAAS,CAAC,CAAC2L,OAAO,CAAC,KAAK,CAAC;cAChD,MAAMC,MAAM,GAAG9N,KAAK,CAACuN,OAAO,CAAC,CAACQ,KAAK,CAAC,KAAK,CAAC;cAC1C,KAAK,IAAIC,CAAC,GAAGJ,QAAQ,EAAEI,CAAC,CAACC,OAAO,CAAC,CAAC,IAAIH,MAAM,CAACG,OAAO,CAAC,CAAC,EAAED,CAAC,GAAGA,CAAC,CAAC/F,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE;gBAC3E0F,KAAK,CAAC1F,GAAG,CAAC+F,CAAC,CAACnL,MAAM,CAAC,YAAY,CAAC,CAAC;cACnC;cACAiB,OAAO,CAACC,GAAG,CAAC,mEAAmE,CAAC;YAClF,CAAC,MAAM;cACL;cACA,MAAMoK,QAAQ,GAAGD,WAAW,CAACpJ,OAAO,CAAC4D,GAAG,CAACC,CAAC,IAAI3I,KAAK,CAAC2I,CAAC,CAACjD,SAAS,CAAC,CAAC;cACjEyI,QAAQ,CAAC/C,IAAI,CAAC,CAACjI,CAAC,EAAEkI,CAAC,KAAKlI,CAAC,CAAC8K,OAAO,CAAC,CAAC,GAAG5C,CAAC,CAAC4C,OAAO,CAAC,CAAC,CAAC;cAElDnK,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;cACtDD,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,GAAGoE,YAAY,CAACuF,CAAC,GAAC,CAAC,CAAC,IAAIvF,YAAY,CAACuF,CAAC,CAAC,EAAE,CAAC;cAClE5J,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEwE,IAAI,CAACC,SAAS,CAACJ,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;cACpEtE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEoE,YAAY,CAACuF,CAAC,CAAC,CAAC;cAChD5J,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEoE,YAAY,CAACuF,CAAC,GAAC,CAAC,CAAC,CAAC;cACnD5J,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEqE,YAAY,IAAID,YAAY,CAACuF,CAAC,CAAC,KAAKtF,YAAY,CAACoF,OAAO,CAAC;;cAE7F;cACA,IAAIpF,YAAY,IAAID,YAAY,CAACuF,CAAC,CAAC,KAAKtF,YAAY,CAACoF,OAAO,EAAE;gBAC5D1J,OAAO,CAACC,GAAG,CAAC,0BAA0BqE,YAAY,CAACqF,IAAI,YAAYrF,YAAY,CAACoF,OAAO,EAAE,CAAC;gBAC1FpJ,UAAU,GAAG;kBACXgB,KAAK,EAAE+I,QAAQ,CAAC,CAAC,CAAC,CAAClG,GAAG,CAACG,YAAY,CAACqF,IAAI,EAAE,MAAM,CAAC;kBACjDpI,GAAG,EAAE8I,QAAQ,CAACA,QAAQ,CAAChJ,MAAM,GAAG,CAAC,CAAC,CAAC8C,GAAG,CAACG,YAAY,CAACqF,IAAI,EAAE,MAAM,CAAC,CAACxF,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC;kBAClFmG,UAAU,EAAE,IAAI;kBAChBC,YAAY,EAAEjG,YAAY,CAACqF;gBAC7B,CAAC;cACH,CAAC,MAAM;gBACLrJ,UAAU,GAAG;kBACXgB,KAAK,EAAE+I,QAAQ,CAAC,CAAC,CAAC;kBAClB9I,GAAG,EAAE8I,QAAQ,CAACA,QAAQ,CAAChJ,MAAM,GAAG,CAAC,CAAC,CAAC8C,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC;kBACnDmG,UAAU,EAAE,KAAK;kBACjBC,YAAY,EAAE;gBAChB,CAAC;cACH;cAEAvK,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE;gBAC5BqB,KAAK,EAAEhB,UAAU,CAACgB,KAAK,CAACvC,MAAM,CAAC,kBAAkB,CAAC;gBAClDwC,GAAG,EAAEjB,UAAU,CAACiB,GAAG,CAACxC,MAAM,CAAC,kBAAkB,CAAC;gBAC9CuL,UAAU,EAAEhK,UAAU,CAACgK,UAAU;gBACjCC,YAAY,EAAEjK,UAAU,CAACiK;cAC3B,CAAC,CAAC;;cAEF;cACA,KAAK,IAAIL,CAAC,GAAGhO,KAAK,CAACoE,UAAU,CAACgB,KAAK,CAAC,EAAE4I,CAAC,CAACC,OAAO,CAAC,CAAC,IAAI7J,UAAU,CAACiB,GAAG,CAAC4I,OAAO,CAAC,CAAC,EAAED,CAAC,GAAGA,CAAC,CAAC/F,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE;gBAClG0F,KAAK,CAAC1F,GAAG,CAAC+F,CAAC,CAACnL,MAAM,CAAC,YAAY,CAAC,CAAC;cACnC;YACF;UACF;;UAEA;UACA,MAAMyL,UAAU,GAAG,EAAE;UACrB,KAAK,MAAM7L,IAAI,IAAIkL,KAAK,EAAE;YACxB;YACA,MAAMY,eAAe,GAAGzM,gBAAgB,CAACW,IAAI,CAAC,IAAI,EAAE;YACpD,MAAMiB,KAAK,GAAG6K,eAAe,CAACrL,IAAI,CAACS,CAAC,IAClCA,CAAC,CAACD,KAAK,KAAK,GAAGF,IAAI,IAAIC,EAAE,EAC3B,CAAC;YAED,IAAI,CAACC,KAAK,EAAE;cACVI,OAAO,CAACC,GAAG,CAAC,sBAAsBP,IAAI,IAAIC,EAAE,OAAOhB,IAAI,EAAE,CAAC;cAC1D;YACF;YAEAqB,OAAO,CAACC,GAAG,CAAC,cAAcP,IAAI,IAAIC,EAAE,QAAQhB,IAAI,GAAG,CAAC;YACpDqB,OAAO,CAACC,GAAG,CAAC,eAAeL,KAAK,CAAC6F,EAAE,EAAE,CAAC;YAEtC,IAAI;cACF,MAAMiF,QAAQ,GAAG,MAAM3E,KAAK,CAAC,8DAA8DnG,KAAK,CAAC6F,EAAE,EAAE,EAAE;gBACrGa,MAAM,EAAE,KAAK;gBACbN,OAAO,EAAE;kBACP,QAAQ,EAAE,kBAAkB;kBAC5B,uBAAuB,EAAErJ,MAAM;kBAC/B,YAAY,EAAEiD,KAAK,CAAC6F;gBACtB;cACF,CAAC,CAAC;cAEF,IAAI,CAACiF,QAAQ,CAACnE,EAAE,EAAE;gBAChBvG,OAAO,CAACC,GAAG,CAAC,qBAAqBP,IAAI,IAAIC,EAAE,SAASC,KAAK,CAAC6F,EAAE,GAAG,CAAC;gBAChE;cACF;cAEA,MAAMpF,IAAI,GAAG,MAAMqK,QAAQ,CAACjE,IAAI,CAAC,CAAC;cAClC,MAAM7I,gBAAgB,GAAGwC,iBAAiB,CAACC,IAAI,EAAEC,UAAU,EAAEsJ,CAAC,CAAC;cAC/D5J,OAAO,CAACC,GAAG,CAAC,WAAWrC,gBAAgB,CAACyD,MAAM,gBAAgB,CAAC;cAC/DmJ,UAAU,CAACpF,IAAI,CAAC,GAAGxH,gBAAgB,CAAC;YACtC,CAAC,CAAC,OAAO+M,KAAK,EAAE;cACd3K,OAAO,CAAC2K,KAAK,CAAC,oBAAoBjL,IAAI,IAAIC,EAAE,QAAQhB,IAAI,GAAG,EAAEgM,KAAK,CAAC;YACrE;UACF;UAEA3K,OAAO,CAACC,GAAG,CAAC,6BAA6BP,IAAI,IAAIC,EAAE,KAAK6K,UAAU,CAACnJ,MAAM,EAAE,CAAC;;UAE5E;UACAmI,oBAAoB,CAACI,CAAC,CAAC,GAAG;YACxBhK,KAAK,EAAE,GAAGF,IAAI,IAAIC,EAAE,EAAE;YACtBqB,OAAO,EAAEwJ,UAAU;YACnBI,WAAW,EAAEf,KAAK;YAAE;YACpBgB,eAAe,EAAEL,UAAU,CAACnJ,MAAM,GAAG,CAAC,GAAGnF,KAAK,CAACsO,UAAU,CAAC,CAAC,CAAC,CAAC5I,SAAS,CAAC,GAAG,IAAI;YAC9EkJ,aAAa,EAAEN,UAAU,CAACnJ,MAAM,GAAG,CAAC,GAAGnF,KAAK,CAACsO,UAAU,CAACA,UAAU,CAACnJ,MAAM,GAAG,CAAC,CAAC,CAACO,SAAS,CAAC,GAAG;UAC9F,CAAC;;UAED;UACA,IAAI4I,UAAU,CAACnJ,MAAM,KAAK,CAAC,IAAIuI,CAAC,GAAG,CAAC,IAAIJ,oBAAoB,CAACI,CAAC,GAAC,CAAC,CAAC,CAAC5I,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;YACpFrB,OAAO,CAACC,GAAG,CAAC,kCAAkCP,IAAI,IAAIC,EAAE,oCAAoC,CAAC;YAC7FK,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;YAC1C;UACF;QACF;;QAEA;QACA,IAAIuJ,oBAAoB,CAACnI,MAAM,IAAI,CAAC,EAAE;UACpC;UACArB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;UAC1CuJ,oBAAoB,CAACpH,OAAO,CAAC,CAAC8C,OAAO,EAAE6F,KAAK,KAAK;YAC/C,IAAI7F,OAAO,CAAClE,OAAO,IAAIkE,OAAO,CAAClE,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;cACjDrB,OAAO,CAACC,GAAG,CAAC,aAAa8K,KAAK,KAAK7F,OAAO,CAACtF,KAAK,IAAI,CAAC;cACrDsF,OAAO,CAAClE,OAAO,CACZsG,IAAI,CAAC,CAACjI,CAAC,EAAEkI,CAAC,KAAKrL,KAAK,CAACmD,CAAC,CAAC6B,SAAS,CAAC,CAACiJ,OAAO,CAAC,CAAC,GAAGjO,KAAK,CAACqL,CAAC,CAACrG,SAAS,CAAC,CAACiJ,OAAO,CAAC,CAAC,CAAC,CAC3E/H,OAAO,CAAC4I,MAAM,IAAI;gBACjBhL,OAAO,CAACC,GAAG,CAAC,KAAK+K,MAAM,CAAC1I,YAAY,KAAKpG,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,MAAM7C,KAAK,CAAC8O,MAAM,CAACpJ,SAAS,CAAC,CAAC7C,MAAM,CAAC,aAAa,CAAC,KAAKiM,MAAM,CAAC1H,QAAQ,EAAE,CAAC;cAClK,CAAC,CAAC;YACN,CAAC,MAAM;cACLtD,OAAO,CAACC,GAAG,CAAC,aAAa8K,KAAK,KAAK7F,OAAO,CAACtF,KAAK,qBAAqB,CAAC;YACxE;UACF,CAAC,CAAC;UAEFI,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;;UAE5C;UACA,MAAMgL,uBAAuB,GAAGzB,oBAAoB,CAAC0B,SAAS,CAC5DhG,OAAO,IAAIA,OAAO,CAAClE,OAAO,IAAIkE,OAAO,CAAClE,OAAO,CAACK,MAAM,GAAG,CACzD,CAAC;UAED,MAAM8J,sBAAsB,GAAG,CAAC,GAAG3B,oBAAoB,CAAC,CAAC4B,OAAO,CAAC,CAAC,CAACF,SAAS,CAC1EhG,OAAO,IAAIA,OAAO,CAAClE,OAAO,IAAIkE,OAAO,CAAClE,OAAO,CAACK,MAAM,GAAG,CACzD,CAAC;UACD,MAAMgK,gBAAgB,GAAG7B,oBAAoB,CAACnI,MAAM,GAAG,CAAC,GAAG8J,sBAAsB;UAEjFnL,OAAO,CAACC,GAAG,CAAC,+BAA+BgL,uBAAuB,EAAE,CAAC;UACrEjL,OAAO,CAACC,GAAG,CAAC,8BAA8BoL,gBAAgB,EAAE,CAAC;;UAE7D;UACA,MAAMC,qBAAqB,GAAGA,CAACC,WAAW,GAAG,EAAE,EAAEhL,YAAY,GAAG0K,uBAAuB,KAAK;YAC1F;YACA,IAAI1K,YAAY,GAAG8K,gBAAgB,EAAE;cACnC,OAAO,CAACE,WAAW,CAAC;YACtB;YAEA,MAAMC,WAAW,GAAG,EAAE;YACtB,MAAMC,cAAc,GAAGjC,oBAAoB,CAACjJ,YAAY,CAAC;;YAEzD;YACA,IAAI,EAACkL,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEzK,OAAO,KAAIyK,cAAc,CAACzK,OAAO,CAACK,MAAM,KAAK,CAAC,EAAE;cACnE,OAAOiK,qBAAqB,CAACC,WAAW,EAAEhL,YAAY,GAAG,CAAC,CAAC;YAC7D;;YAEA;YACA,IAAIgL,WAAW,CAAClK,MAAM,KAAK,CAAC,EAAE;cAC5BoK,cAAc,CAACzK,OAAO,CAACoB,OAAO,CAAC4I,MAAM,IAAI;gBACvC,MAAMU,MAAM,GAAGJ,qBAAqB,CAAC,CAACN,MAAM,CAAC,EAAEzK,YAAY,GAAG,CAAC,CAAC;gBAChEiL,WAAW,CAACpG,IAAI,CAAC,GAAGsG,MAAM,CAAC;cAC7B,CAAC,CAAC;YACJ,CAAC,MAAM;cACL;cACA,MAAMC,UAAU,GAAGJ,WAAW,CAACA,WAAW,CAAClK,MAAM,GAAG,CAAC,CAAC;cACtD,MAAMuK,WAAW,GAAG1P,KAAK,CAACyP,UAAU,CAAC/J,SAAS,CAAC;cAC/C,MAAMiK,eAAe,GAAGvH,YAAY,IACbD,YAAY,CAAC9D,YAAY,CAAC,KAAK+D,YAAY,CAACoF,OAAO;cAE1E+B,cAAc,CAACzK,OAAO,CAACoB,OAAO,CAAC4I,MAAM,IAAI;gBACvC,MAAMc,SAAS,GAAG5P,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC;gBACzC,MAAM6K,cAAc,GAAGD,SAAS,CAACnJ,IAAI,CAACiJ,WAAW,EAAE,SAAS,CAAC;gBAE7D,IAAIC,eAAe,EAAE;kBACnB;kBACA,MAAMG,eAAe,GAAG1H,YAAY,CAACqF,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;kBACrD,MAAMsC,eAAe,GAAG,CAAC3H,YAAY,CAACqF,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;;kBAE3D,IAAIoC,cAAc,IAAIC,eAAe,IAAID,cAAc,IAAIE,eAAe,EAAE;oBAC1E,MAAMP,MAAM,GAAGJ,qBAAqB,CAAC,CAAC,GAAGC,WAAW,EAAEP,MAAM,CAAC,EAAEzK,YAAY,GAAG,CAAC,CAAC;oBAChFiL,WAAW,CAACpG,IAAI,CAAC,GAAGsG,MAAM,CAAC;kBAC7B;gBACF,CAAC,MAAM;kBACL;kBACA,IAAIK,cAAc,IAAI,EAAE,IAAIA,cAAc,IAAI,EAAE,GAAG,EAAE,EAAE;oBACrD,MAAML,MAAM,GAAGJ,qBAAqB,CAAC,CAAC,GAAGC,WAAW,EAAEP,MAAM,CAAC,EAAEzK,YAAY,GAAG,CAAC,CAAC;oBAChFiL,WAAW,CAACpG,IAAI,CAAC,GAAGsG,MAAM,CAAC;kBAC7B;gBACF;cACF,CAAC,CAAC;YACJ;YAEA,OAAOF,WAAW;UACpB,CAAC;;UAED;UACA,MAAMU,eAAe,GAAGZ,qBAAqB,CAAC,CAAC;;UAE/C;UACAhN,eAAe,CAAC6N,OAAO,GAAGD,eAAe;;UAEzC;UACAlM,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;UAC3C,IAAIiM,eAAe,CAAC7K,MAAM,KAAK,CAAC,EAAE;YAChCrB,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;UAClE,CAAC,MAAM;YACLD,OAAO,CAACC,GAAG,CAAC,SAASiM,eAAe,CAAC7K,MAAM,qBAAqB,CAAC;YACjE6K,eAAe,CAAC9J,OAAO,CAACgK,KAAK,IAAI;cAC/B,MAAMC,UAAU,GAAGD,KAAK,CAACxH,GAAG,CAAC,CAACoG,MAAM,EAAEsB,GAAG,KAAK;gBAC5C,IAAIA,GAAG,KAAK,CAAC,EAAE;kBACb,OAAO,GAAGtB,MAAM,CAAC1I,YAAY,KAAKpG,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,GAAG;gBACpF;gBAEA,MAAM4M,UAAU,GAAGS,KAAK,CAACE,GAAG,GAAG,CAAC,CAAC;gBACjC,MAAMP,cAAc,GAAG7P,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAACyB,IAAI,CAACzG,KAAK,CAACyP,UAAU,CAAC/J,SAAS,CAAC,EAAE,SAAS,CAAC;gBAC3F,MAAM2K,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACV,cAAc,GAAG,EAAE,CAAC;gBAC7C,MAAMW,OAAO,GAAGX,cAAc,GAAG,EAAE;gBACnC,OAAO,GAAGf,MAAM,CAAC1I,YAAY,KAAKpG,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,MAAMwN,KAAK,IAAIG,OAAO,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG;cACtI,CAAC,CAAC;cAEF5M,OAAO,CAACC,GAAG,CAACoM,UAAU,CAACnG,IAAI,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC,CAAC;UACJ;;UAEA;UACA,MAAM2G,qBAAqB,GAAG,IAAIC,GAAG,CAAC,CAAC;UACvCZ,eAAe,CAAC9J,OAAO,CAACgK,KAAK,IAAI;YAC/BA,KAAK,CAAChK,OAAO,CAAC4I,MAAM,IAAI;cACtB,MAAM+B,UAAU,GAAG/B,MAAM,CAACzK,YAAY;cACtC,IAAI,CAACsM,qBAAqB,CAACG,GAAG,CAACD,UAAU,CAAC,EAAE;gBAC1CF,qBAAqB,CAAC3D,GAAG,CAAC6D,UAAU,EAAE,IAAIlE,GAAG,CAAC,CAAC,CAAC;cAClD;cACAgE,qBAAqB,CAACI,GAAG,CAACF,UAAU,CAAC,CAAC5I,GAAG,CACvC,GAAG6G,MAAM,CAAC1I,YAAY,IAAIpG,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAACnC,MAAM,CAAC,kBAAkB,CAAC,EAC9E,CAAC;YACH,CAAC,CAAC;UACJ,CAAC,CAAC;;UAEF;UACA,MAAMmO,eAAe,GAAG,EAAE;UAC1B,KAAK,IAAItD,CAAC,GAAGqB,uBAAuB,EAAErB,CAAC,IAAIyB,gBAAgB,EAAEzB,CAAC,EAAE,EAAE;YAChE,MAAM1E,OAAO,GAAGsE,oBAAoB,CAACI,CAAC,CAAC;YACvC,IAAI,CAAC1E,OAAO,IAAI,CAACA,OAAO,CAAClE,OAAO,EAAE;YAElC,MAAMmM,sBAAsB,GAAGN,qBAAqB,CAACI,GAAG,CAACrD,CAAC,CAAC,IAAI,IAAIf,GAAG,CAAC,CAAC;;YAExE;YACA3D,OAAO,CAAClE,OAAO,CAACoB,OAAO,CAAC4I,MAAM,IAAI;cAChC,MAAMoC,SAAS,GAAG,GAAGpC,MAAM,CAAC1I,YAAY,IAAIpG,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAACnC,MAAM,CAAC,kBAAkB,CAAC,EAAE;cAChG,IAAIoO,sBAAsB,CAACH,GAAG,CAACI,SAAS,CAAC,EAAE;gBACzCF,eAAe,CAAC9H,IAAI,CAAC;kBACnB,GAAG4F,MAAM;kBACTrH,UAAU,EAAE,KAAK;kBACjBpD,YAAY,EAAEqJ;gBAChB,CAAC,CAAC;cACJ;YACF,CAAC,CAAC;UACJ;UAEA5M,iBAAiB,CAACkQ,eAAe,CAAC;UAClC5P,oBAAoB,CAAC4O,eAAe,CAAC;;UAErC;UACAlM,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;UAC3C,KAAK,IAAI2J,CAAC,GAAGqB,uBAAuB,EAAErB,CAAC,IAAIyB,gBAAgB,EAAEzB,CAAC,EAAE,EAAE;YAChE,MAAMyD,cAAc,GAAGH,eAAe,CAAC1L,MAAM,CAACqD,CAAC,IAAIA,CAAC,CAACtE,YAAY,KAAKqJ,CAAC,CAAC;YACxE,IAAIyD,cAAc,CAAChM,MAAM,GAAG,CAAC,EAAE;cAC7BrB,OAAO,CAACC,GAAG,CAAC,aAAa2J,CAAC,KAAKyD,cAAc,CAAC,CAAC,CAAC,CAAC3N,IAAI,IAAI2N,cAAc,CAAC,CAAC,CAAC,CAAC1N,EAAE,IAAI,CAAC;cAClF0N,cAAc,CACX/F,IAAI,CAAC,CAACjI,CAAC,EAAEkI,CAAC,KAAKrL,KAAK,CAACmD,CAAC,CAAC6B,SAAS,CAAC,CAACiJ,OAAO,CAAC,CAAC,GAAGjO,KAAK,CAACqL,CAAC,CAACrG,SAAS,CAAC,CAACiJ,OAAO,CAAC,CAAC,CAAC,CAC3E/H,OAAO,CAAC4I,MAAM,IAAI;gBACjBhL,OAAO,CAACC,GAAG,CAAC,KAAK+K,MAAM,CAAC1I,YAAY,KAAKpG,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC;cAC5F,CAAC,CAAC;YACN;UACF;UAEAiB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACzC,CAAC,MAAM;UACLjD,iBAAiB,CAACwM,oBAAoB,CAAC8D,OAAO,CAAC,CAACpI,OAAO,EAAE6F,KAAK,KAC5D7F,OAAO,CAAClE,OAAO,CAAC4D,GAAG,CAACoG,MAAM,KAAK;YAC7B,GAAGA,MAAM;YACTrH,UAAU,EAAE,KAAK;YACjBpD,YAAY,EAAEwK;UAChB,CAAC,CAAC,CACJ,CAAC,CAAC;UACFzN,oBAAoB,CAAC,EAAE,CAAC;QAC1B;MACF,CAAC,CAAC,OAAOqN,KAAK,EAAE;QACd3K,OAAO,CAAC2K,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd3K,OAAO,CAAC2K,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,SAAS;MACRzN,oBAAoB,CAAC,KAAK,CAAC;IAC7B;EACF,CAAC;EAED,MAAMqQ,oBAAoB,GAAG,MAAOlJ,YAAY,IAAK;IACnD,IAAI,CAACA,YAAY,IAAI,CAAC1H,MAAM,EAAE;IAE9BwB,wBAAwB,CAAC,IAAI,CAAC;IAE9B,IAAI;MACF;MACA,MAAM8H,WAAW,GAAG5B,YAAY,CAAC6B,IAAI,CAAC,GAAG,CAAC;;MAE1C;MACA,IAAIC,GAAG,GAAG,qEAAqEF,WAAW,EAAE;MAC5F,IAAI7H,SAAS,EAAE;QACb,MAAMgI,aAAa,GAAGlK,KAAK,CAACkC,SAAS,CAAC,CAACW,MAAM,CAAC,YAAY,CAAC;QAC3DoH,GAAG,IAAI,cAAcC,aAAa,EAAE;QACpCpG,OAAO,CAACC,GAAG,CAAC,qBAAqBmG,aAAa,0BAA0B,CAAC;MAC3E;MAEApG,OAAO,CAACC,GAAG,CAAC,oCAAoCkG,GAAG,EAAE,CAAC;MAEtD,MAAME,oBAAoB,GAAG,MAAMN,KAAK,CACtCI,GAAG,EACH;QACEG,MAAM,EAAE,KAAK;QACbN,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,uBAAuB,EAAErJ;QAC3B;MACF,CACF,CAAC;MAED,IAAI0J,oBAAoB,CAACE,EAAE,EAAE;QAC3B,MAAMC,kBAAkB,GAAG,MAAMH,oBAAoB,CAACI,IAAI,CAAC,CAAC;QAC5DzG,OAAO,CAACC,GAAG,CAAC,YAAYuG,kBAAkB,CAACnF,MAAM,uBAAuB,CAAC;;QAEzE;QACA,MAAMqF,qBAAqB,GAAG,CAAC,CAAC;;QAEhC;QACA,MAAMC,cAAc,GAAG,CAAC,CAAC;QACzBH,kBAAkB,CAACpE,OAAO,CAACwE,IAAI,IAAI;UACjC,MAAMC,GAAG,GAAG,GAAGD,IAAI,CAACjI,IAAI,IAAIiI,IAAI,CAACE,aAAa,IAAIF,IAAI,CAACG,kBAAkB,EAAE;UAC3E,IAAI,CAACJ,cAAc,CAACE,GAAG,CAAC,EAAE;YACxBF,cAAc,CAACE,GAAG,CAAC,GAAG,EAAE;UAC1B;UACAF,cAAc,CAACE,GAAG,CAAC,CAACzB,IAAI,CAACwB,IAAI,CAAC;QAChC,CAAC,CAAC;;QAEF;QACA9C,MAAM,CAACC,MAAM,CAAC4C,cAAc,CAAC,CAACvE,OAAO,CAAC4E,OAAO,IAAI;UAC/C;UACA,MAAMC,cAAc,GAAG;YAAEC,MAAM,EAAE,CAAC;YAAEC,QAAQ,EAAE,CAAC;YAAEC,SAAS,EAAE,CAAC;YAAEC,QAAQ,EAAE;UAAE,CAAC;UAC5EL,OAAO,CAACM,IAAI,CAAC,CAACjI,CAAC,EAAEkI,CAAC,KAAKN,cAAc,CAAC5H,CAAC,CAACmI,MAAM,CAAC,GAAGP,cAAc,CAACM,CAAC,CAACC,MAAM,CAAC,CAAC;;UAE3E;UACA,MAAMC,YAAY,GAAG;YAAE,GAAGT,OAAO,CAAC,CAAC;UAAE,CAAC;UACtC,MAAMU,OAAO,GAAGD,YAAY,CAAC9I,IAAI;;UAEjC;UACA,MAAMgJ,eAAe,GAAIC,UAAU,IAAK;YACtC,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;YAC1B,OAAOA,UAAU,CAACzC,KAAK,CAAC,GAAG,CAAC,CAACP,GAAG,CAACvF,CAAC,IAAIA,CAAC,CAACwI,IAAI,CAAC,CAAC,CAAC,CAACrG,MAAM,CAACsG,OAAO,CAAC,CAAC5B,IAAI,CAAC,GAAG,CAAC;UAC3E,CAAC;;UAED;UACAc,OAAO,CAAC5E,OAAO,CAAC2F,MAAM,IAAI;YACxB;YACA,IAAIA,MAAM,CAACP,MAAM,KAAK,WAAW,EAAE;cAAA,IAAAgG,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;cACjC3F,MAAM,CAACI,eAAe,GAAGR,eAAe,EAAA6F,sBAAA,GAACzF,MAAM,CAACI,eAAe,cAAAqF,sBAAA,uBAAtBA,sBAAA,CAAwBhO,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;cACxFuI,MAAM,CAACK,eAAe,GAAGT,eAAe,EAAA8F,sBAAA,GAAC1F,MAAM,CAACK,eAAe,cAAAqF,sBAAA,uBAAtBA,sBAAA,CAAwBjO,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;cACxFuI,MAAM,CAACM,eAAe,GAAGV,eAAe,EAAA+F,sBAAA,GAAC3F,MAAM,CAACM,eAAe,cAAAqF,sBAAA,uBAAtBA,sBAAA,CAAwBlO,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC1F,CAAC,MAAM,IAAIuI,MAAM,CAACP,MAAM,KAAK,QAAQ,EAAE;cAAA,IAAAmG,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;cACrC9F,MAAM,CAACI,eAAe,GAAGR,eAAe,EAAAgG,sBAAA,GAAC5F,MAAM,CAACI,eAAe,cAAAwF,sBAAA,uBAAtBA,sBAAA,CAAwBnO,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;cACxFuI,MAAM,CAACK,eAAe,GAAGT,eAAe,EAAAiG,sBAAA,GAAC7F,MAAM,CAACK,eAAe,cAAAwF,sBAAA,uBAAtBA,sBAAA,CAAwBpO,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;cACxFuI,MAAM,CAACM,eAAe,GAAGV,eAAe,EAAAkG,sBAAA,GAAC9F,MAAM,CAACM,eAAe,cAAAwF,sBAAA,uBAAtBA,sBAAA,CAAwBrO,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC1F;;YAEA;YACAuI,MAAM,CAACU,OAAO,GAAG,CAAC,CAACV,MAAM,CAACI,eAAe;YACzCJ,MAAM,CAACW,OAAO,GAAG,CAAC,CAACX,MAAM,CAACK,eAAe;YACzCL,MAAM,CAACY,OAAO,GAAG,CAAC,CAACZ,MAAM,CAACM,eAAe;YAEzCrI,OAAO,CAACC,GAAG,CAAC,eAAe8H,MAAM,CAACP,MAAM,UAAU,EAAE;cAClDW,eAAe,EAAEJ,MAAM,CAACI,eAAe;cACvCC,eAAe,EAAEL,MAAM,CAACK,eAAe;cACvCC,eAAe,EAAEN,MAAM,CAACM,eAAe;cACvCI,OAAO,EAAEV,MAAM,CAACU,OAAO;cACvBC,OAAO,EAAEX,MAAM,CAACW,OAAO;cACvBC,OAAO,EAAEZ,MAAM,CAACY;YAClB,CAAC,CAAC;UACJ,CAAC,CAAC;;UAEF;UACA,MAAMC,cAAc,GAAG;YACrBjD,CAAC,EAAE,IAAIkD,GAAG,CAAC,CAAC;YACZjD,CAAC,EAAE,IAAIiD,GAAG,CAAC,CAAC;YACZhD,CAAC,EAAE,IAAIgD,GAAG,CAAC;UACb,CAAC;UAED,IAAIC,WAAW,GAAG,IAAI;UACtB,IAAIC,WAAW,GAAG,IAAI;UACtB,IAAIC,WAAW,GAAG,IAAI;UAEtBhC,OAAO,CAAC5E,OAAO,CAAC2F,MAAM,IAAI;YACxB,MAAMkB,WAAW,GAAGA,CAACrB,UAAU,EAAEsB,GAAG,KAAK;cACvC,IAAItB,UAAU,EAAE;gBACdA,UAAU,CAACzC,KAAK,CAAC,GAAG,CAAC,CAAC/C,OAAO,CAACjD,OAAO,IAAI;kBACvC,MAAMgK,OAAO,GAAGhK,OAAO,CAAC0I,IAAI,CAAC,CAAC;kBAC9B,IAAIsB,OAAO,EAAED,GAAG,CAAC/E,GAAG,CAACgF,OAAO,CAAC;gBAC/B,CAAC,CAAC;cACJ;YACF,CAAC;YAED,IAAIpB,MAAM,CAACU,OAAO,IAAIV,MAAM,CAACI,eAAe,EAAE;cAC5C,MAAMiB,QAAQ,GAAGR,cAAc,CAACjD,CAAC,CAAC0D,IAAI;cACtCJ,WAAW,CAAClB,MAAM,CAACI,eAAe,EAAES,cAAc,CAACjD,CAAC,CAAC;cACrD,IAAIiD,cAAc,CAACjD,CAAC,CAAC0D,IAAI,GAAGD,QAAQ,EAAEN,WAAW,GAAGf,MAAM,CAACtC,EAAE;YAC/D;YACA,IAAIsC,MAAM,CAACW,OAAO,IAAIX,MAAM,CAACK,eAAe,EAAE;cAC5C,MAAMgB,QAAQ,GAAGR,cAAc,CAAChD,CAAC,CAACyD,IAAI;cACtCJ,WAAW,CAAClB,MAAM,CAACK,eAAe,EAAEQ,cAAc,CAAChD,CAAC,CAAC;cACrD,IAAIgD,cAAc,CAAChD,CAAC,CAACyD,IAAI,GAAGD,QAAQ,EAAEL,WAAW,GAAGhB,MAAM,CAACtC,EAAE;YAC/D;YACA,IAAIsC,MAAM,CAACY,OAAO,IAAIZ,MAAM,CAACM,eAAe,EAAE;cAC5C,MAAMe,QAAQ,GAAGR,cAAc,CAAC/C,CAAC,CAACwD,IAAI;cACtCJ,WAAW,CAAClB,MAAM,CAACM,eAAe,EAAEO,cAAc,CAAC/C,CAAC,CAAC;cACrD,IAAI+C,cAAc,CAAC/C,CAAC,CAACwD,IAAI,GAAGD,QAAQ,EAAEJ,WAAW,GAAGjB,MAAM,CAACtC,EAAE;YAC/D;UACF,CAAC,CAAC;;UAEF;UACAgC,YAAY,CAACU,eAAe,GAAGmB,KAAK,CAAC5J,IAAI,CAACkJ,cAAc,CAACjD,CAAC,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC;UACrEuB,YAAY,CAACW,eAAe,GAAGkB,KAAK,CAAC5J,IAAI,CAACkJ,cAAc,CAAChD,CAAC,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC;UACrEuB,YAAY,CAACY,eAAe,GAAGiB,KAAK,CAAC5J,IAAI,CAACkJ,cAAc,CAAC/C,CAAC,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC;UACrEuB,YAAY,CAACgB,OAAO,GAAGG,cAAc,CAACjD,CAAC,CAAC0D,IAAI,GAAG,CAAC;UAChD5B,YAAY,CAACiB,OAAO,GAAGE,cAAc,CAAChD,CAAC,CAACyD,IAAI,GAAG,CAAC;UAChD5B,YAAY,CAACkB,OAAO,GAAGC,cAAc,CAAC/C,CAAC,CAACwD,IAAI,GAAG,CAAC;UAChD5B,YAAY,CAACqB,WAAW,GAAGA,WAAW;UACtCrB,YAAY,CAACsB,WAAW,GAAGA,WAAW;UACtCtB,YAAY,CAACuB,WAAW,GAAGA,WAAW;UAEtChJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE;YAC9BkI,eAAe,EAAEV,YAAY,CAACU,eAAe;YAC7CC,eAAe,EAAEX,YAAY,CAACW,eAAe;YAC7CC,eAAe,EAAEZ,YAAY,CAACY,eAAe;YAC7CI,OAAO,EAAEhB,YAAY,CAACgB,OAAO;YAC7BC,OAAO,EAAEjB,YAAY,CAACiB,OAAO;YAC7BC,OAAO,EAAElB,YAAY,CAACkB,OAAO;YAC7BG,WAAW;YACXC,WAAW;YACXC;UACF,CAAC,CAAC;UAEF,IAAI,CAACtC,qBAAqB,CAACgB,OAAO,CAAC,EAAE;YACnChB,qBAAqB,CAACgB,OAAO,CAAC,GAAG,EAAE;UACrC;UAEAhB,qBAAqB,CAACgB,OAAO,CAAC,CAACtC,IAAI,CAAC;YAClCxF,KAAK,EAAE,GAAG6H,YAAY,CAACX,aAAa,IAAIW,YAAY,CAACV,kBAAkB,EAAE;YACzErB,OAAO,EAAE;cACPC,CAAC,EAAE8B,YAAY,CAACgB,OAAO;cACvB7C,CAAC,EAAE6B,YAAY,CAACiB,OAAO;cACvB7C,CAAC,EAAE4B,YAAY,CAACkB;YAClB,CAAC;YACDlD,EAAE,EAAEgC,YAAY,CAAChC,EAAE;YACnBqD,WAAW,EAAErB,YAAY,CAACqB,WAAW;YACrCC,WAAW,EAAEtB,YAAY,CAACsB,WAAW;YACrCC,WAAW,EAAEvB,YAAY,CAACuB,WAAW;YACrC9I,QAAQ,EAAEuH,YAAY,CAACvH,QAAQ;YAC/BvB,IAAI,EAAE8I,YAAY,CAAC9I,IAAI;YACvB4K,MAAM,EAAE9B,YAAY,CAACD,MAAM;YAC3BW,eAAe,EAAEV,YAAY,CAACU,eAAe;YAC7CC,eAAe,EAAEX,YAAY,CAACW,eAAe;YAC7CC,eAAe,EAAEZ,YAAY,CAACY;UAChC,CAAC,CAAC;QACJ,CAAC,CAAC;QAEFpK,mBAAmB,CAACyI,qBAAqB,CAAC;MAC5C,CAAC,MAAM;QACL1G,OAAO,CAAC2K,KAAK,CAAC,oCAAoC,EAAEtE,oBAAoB,CAACyH,MAAM,CAAC;MAClF;IACF,CAAC,CAAC,OAAOnD,KAAK,EAAE;MACd3K,OAAO,CAAC2K,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D,CAAC,SAAS;MACRxM,wBAAwB,CAAC,KAAK,CAAC;IACjC;EACF,CAAC;EAED,MAAM4P,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA/Q,iBAAiB,CAAC,EAAE,CAAC;IACrBE,oBAAoB,CAAC,KAAK,CAAC;IAC3BE,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACtBE,oBAAoB,CAAC,EAAE,CAAC;IACxBE,oBAAoB,CAAC,EAAE,CAAC;IACxBE,kBAAkB,CAAC,IAAI,CAAC;IACxBG,mBAAmB,CAAC,IAAI,CAAC;IACzBE,iBAAiB,CAAC,IAAI,CAAC;IACvBE,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACvBE,wBAAwB,CAAC,KAAK,CAAC;IAC/BE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEpB;;IAEA;IACAC,eAAe,CAAC6N,OAAO,GAAG,EAAE;;IAE5B;IACA,IAAI6B,MAAM,CAACC,iBAAiB,IAAI,OAAOD,MAAM,CAACC,iBAAiB,KAAK,UAAU,EAAE;MAC9ED,MAAM,CAACC,iBAAiB,CAAC,CAAC;IAC5B;;IAEA;IACA,IAAID,MAAM,CAACE,YAAY,IAAI,OAAOF,MAAM,CAACE,YAAY,KAAK,UAAU,EAAE;MACpEF,MAAM,CAACE,YAAY,CAAC,CAAC;IACvB;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAACnD,MAAM,EAAEzK,YAAY,KAAK;IACnD,MAAM6M,SAAS,GAAG,GAAGpC,MAAM,CAAC1I,YAAY,IAAIpG,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAACnC,MAAM,CAAC,kBAAkB,CAAC,EAAE;IAChGiB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEmN,SAAS,EAAE,aAAa,EAAE7M,YAAY,CAAC;IAEvFnD,kBAAkB,CAACgR,YAAY,IAAI;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MACjC,MAAMC,WAAW,GAAG;QAAE,GAAGH;MAAa,CAAC;;MAEvC;MACA,MAAMI,mBAAmB,IAAAH,qBAAA,GAAGE,WAAW,CAAChO,YAAY,CAAC,cAAA8N,qBAAA,wBAAAC,sBAAA,GAAzBD,qBAAA,CAA2BI,IAAI,cAAAH,sBAAA,uBAA/BA,sBAAA,CAAAI,IAAA,CAAAL,qBAAA,EAAkCxJ,CAAC,IAAI;QACjE,MAAM8J,OAAO,GAAG9J,CAAC,CAACvC,YAAY,KAAK0I,MAAM,CAAC1I,YAAY,IACvCpG,KAAK,CAAC2I,CAAC,CAAC3D,SAAS,CAAC,CAAC0N,MAAM,CAAC1S,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAAC;QACjE,IAAIyN,OAAO,EAAE;UACX3O,OAAO,CAACC,GAAG,CAAC,6BAA6B4E,CAAC,CAACvC,YAAY,KAAKpG,KAAK,CAAC2I,CAAC,CAAC3D,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,gBAAgBwB,YAAY,EAAE,CAAC;QACrI;QACA,OAAOoO,OAAO;MAChB,CAAC,CAAC;MAEF,IAAIH,mBAAmB,EAAE;QACvB;QACAxO,OAAO,CAACC,GAAG,CAAC,kBAAkB+K,MAAM,CAAC1I,YAAY,KAAKpG,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,kBAAkBwB,YAAY,EAAE,CAAC;QACpIgO,WAAW,CAAChO,YAAY,CAAC,GAAGgO,WAAW,CAAChO,YAAY,CAAC,CAACiB,MAAM,CAACqD,CAAC,IAAI;UAChE,MAAMgK,IAAI,GAAG,EAAEhK,CAAC,CAACvC,YAAY,KAAK0I,MAAM,CAAC1I,YAAY,IACvCpG,KAAK,CAAC2I,CAAC,CAAC3D,SAAS,CAAC,CAAC0N,MAAM,CAAC1S,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAAC,CAAC;UACjE,IAAI,CAAC2N,IAAI,EAAE;YACT7O,OAAO,CAACC,GAAG,CAAC,mBAAmB4E,CAAC,CAACvC,YAAY,KAAKpG,KAAK,CAAC2I,CAAC,CAAC3D,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC;UAChG;UACA,OAAO8P,IAAI;QACb,CAAC,CAAC;QACF,IAAIN,WAAW,CAAChO,YAAY,CAAC,CAACc,MAAM,KAAK,CAAC,EAAE;UAC1CrB,OAAO,CAACC,GAAG,CAAC,0BAA0BM,YAAY,EAAE,CAAC;UACrD,OAAOgO,WAAW,CAAChO,YAAY,CAAC;QAClC;MACF,CAAC,MAAM;QACL;QACA,IAAI,CAACgO,WAAW,CAAChO,YAAY,CAAC,EAAE;UAC9BgO,WAAW,CAAChO,YAAY,CAAC,GAAG,EAAE;QAChC;QACAgO,WAAW,CAAChO,YAAY,CAAC,CAAC6E,IAAI,CAAC4F,MAAM,CAAC;QACtChL,OAAO,CAACC,GAAG,CAAC,gBAAgB+K,MAAM,CAAC1I,YAAY,KAAKpG,KAAK,CAAC8O,MAAM,CAAC9J,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,gBAAgBwB,YAAY,EAAE,CAAC;MAClI;;MAEA;MACAP,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACxC6D,MAAM,CAAC0B,OAAO,CAAC+I,WAAW,CAAC,CAACnM,OAAO,CAAC,CAAC,CAACkK,GAAG,EAAEtL,OAAO,CAAC,KAAK;QACtD,IAAIsI,KAAK,CAACwF,OAAO,CAAC9N,OAAO,CAAC,EAAE;UAC1BA,OAAO,CAACoB,OAAO,CAACyC,CAAC,IAAI;YACnB7E,OAAO,CAACC,GAAG,CAAC,WAAWqM,GAAG,KAAKzH,CAAC,CAACvC,YAAY,KAAKpG,KAAK,CAAC2I,CAAC,CAAC3D,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC;UAChG,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;;MAEF;MACA,MAAMgQ,aAAa,GAAGzQ,eAAe,CAAC6N,OAAO;MAC7C,MAAMlB,uBAAuB,GAAGuB,IAAI,CAACwC,GAAG,CAAC,GAAGjS,cAAc,CACvDyE,MAAM,CAACqD,CAAC,IAAI,CAACA,CAAC,CAACC,MAAM,CAAC,CACtBF,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACtE,YAAY,CAAC,CAAC;MAE5BP,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE8O,aAAa,CAACnK,GAAG,CAACwH,KAAK,IAC7DA,KAAK,CAACxH,GAAG,CAACC,CAAC,IAAI,GAAGA,CAAC,CAACvC,YAAY,KAAKpG,KAAK,CAAC2I,CAAC,CAAC3D,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAACmH,IAAI,CAAC,KAAK,CAC9F,CAAC,CAAC;;MAEF;MACA,MAAMsF,WAAW,GAAGuD,aAAa,CAACvN,MAAM,CAAC4K,KAAK,IAAI;QAChD;QACA,IAAItI,MAAM,CAACkB,IAAI,CAACuJ,WAAW,CAAC,CAAClN,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;;QAEtD;QACA,MAAMY,OAAO,GAAG6B,MAAM,CAAC0B,OAAO,CAAC+I,WAAW,CAAC,CAACU,KAAK,CAAC,CAAC,CAACC,MAAM,EAAElO,OAAO,CAAC,KAAK;UACvE,MAAMmO,cAAc,GAAGnO,OAAO,CAAC,CAAC,CAAC;UACjC;UACA,MAAMoO,UAAU,GAAGxL,QAAQ,CAACsL,MAAM,EAAE,EAAE,CAAC,GAAGjE,uBAAuB;UACjE,MAAMoE,WAAW,GAAGjD,KAAK,CAACgD,UAAU,CAAC;UAErC,MAAMT,OAAO,GAAG,CAAAU,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE/M,YAAY,MAAK6M,cAAc,CAAC7M,YAAY,IAC1DpG,KAAK,CAACmT,WAAW,CAACnO,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,KAClD7C,KAAK,CAACiT,cAAc,CAACjO,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC;UAEpEiB,OAAO,CAACC,GAAG,CAAC,oCAAoCiP,MAAM,GAAG,EAAE;YACzDI,QAAQ,EAAE,GAAGH,cAAc,CAAC7M,YAAY,KAAKpG,KAAK,CAACiT,cAAc,CAACjO,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,GAAG;YACrGqN,KAAK,EAAEiD,WAAW,GAAG,GAAGA,WAAW,CAAC/M,YAAY,KAAKpG,KAAK,CAACmT,WAAW,CAACnO,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,GAAG,GAAG,MAAM;YACnHqQ,UAAU;YACVT;UACF,CAAC,CAAC;UAEF,OAAOA,OAAO;QAChB,CAAC,CAAC;QAEF,OAAO1M,OAAO;MAChB,CAAC,CAAC;MAEFjC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEuL,WAAW,CAAC5G,GAAG,CAACwH,KAAK,IACxDA,KAAK,CAACxH,GAAG,CAACC,CAAC,IAAI,GAAGA,CAAC,CAACvC,YAAY,KAAKpG,KAAK,CAAC2I,CAAC,CAAC3D,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAACmH,IAAI,CAAC,KAAK,CAC9F,CAAC,CAAC;;MAEF;MACA,MAAMqJ,YAAY,GAAG,IAAI1G,GAAG,CAAC,CAAC;MAC9B2C,WAAW,CAACpJ,OAAO,CAACgK,KAAK,IAAI;QAC3BA,KAAK,CAAChK,OAAO,CAACyC,CAAC,IAAI;UACjB,IAAI,CAACA,CAAC,EAAE;UACR,MAAMgC,GAAG,GAAG,GAAGhC,CAAC,CAACvC,YAAY,IAAIpG,KAAK,CAAC2I,CAAC,CAAC3D,SAAS,CAAC,CAACnC,MAAM,CAAC,kBAAkB,CAAC,EAAE;UAChFwQ,YAAY,CAACpL,GAAG,CAAC0C,GAAG,CAAC;QACvB,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACA7J,iBAAiB,CAAC2H,WAAW,IAC3BA,WAAW,CAACC,GAAG,CAACC,CAAC,IAAI;QAAA,IAAA2K,qBAAA;QACnB,MAAMpC,SAAS,GAAG,GAAGvI,CAAC,CAACvC,YAAY,IAAIpG,KAAK,CAAC2I,CAAC,CAAC3D,SAAS,CAAC,CAACnC,MAAM,CAAC,kBAAkB,CAAC,EAAE;QACtF,MAAM4E,UAAU,GAAG,EAAA6L,qBAAA,GAAAjB,WAAW,CAAC1J,CAAC,CAACtE,YAAY,CAAC,cAAAiP,qBAAA,uBAA3BA,qBAAA,CAA6Bf,IAAI,CAACgB,EAAE,IACrDA,EAAE,CAACnN,YAAY,KAAKuC,CAAC,CAACvC,YAAY,IAClCpG,KAAK,CAACuT,EAAE,CAACvO,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CAAC,KAAK7C,KAAK,CAAC2I,CAAC,CAAC3D,SAAS,CAAC,CAACnC,MAAM,CAAC,aAAa,CACvF,CAAC,KAAI,KAAK;QAEV,OAAO;UACL,GAAG8F,CAAC;UACJlB,UAAU;UACVmB,MAAM,EAAEhB,MAAM,CAACkB,IAAI,CAACuJ,WAAW,CAAC,CAAClN,MAAM,GAAG,CAAC,IAAI,CAACsC,UAAU,IAAI,CAAC4L,YAAY,CAACvC,GAAG,CAACI,SAAS;QAC3F,CAAC;MACH,CAAC,CACH,CAAC;MAED,OAAOmB,WAAW;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMmB,OAAO,GAAGzT,OAAO,CAAC,MAAM;IAC5B,IAAI,CAACQ,aAAa,EAAE,OAAOH,UAAU,CAAC6R,kBAAkB,CAAC;IACzD,MAAM,CAAC/P,SAAS,CAAC,GAAG3B,aAAa;IACjC,OAAOH,UAAU,CAAC6R,kBAAkB,EAAEjS,KAAK,CAACkC,SAAS,CAAC,CAAC2L,OAAO,CAAC,KAAK,CAAC,CAAC;EACxE,CAAC,EAAE,CAACoE,kBAAkB,EAAE1R,aAAa,EAAEH,UAAU,CAAC,CAAC;;EAEnD;EACAP,SAAS,CAAC,MAAM;IACd,IAAIQ,mBAAmB,CAAC8E,MAAM,GAAG,CAAC,EAAE;MAClC,MAAMmJ,UAAU,GAAGjO,mBAAmB,CAAC+Q,OAAO,CAAC,CAAClB,KAAK,EAAEgD,UAAU,KAC/DhD,KAAK,CAACxH,GAAG,CAAC,CAACC,CAAC,EAAEyH,GAAG,MAAM;QACrB,GAAGzH,CAAC;QACJlB,UAAU,EAAE,KAAK;QACjBpD,YAAY,EAAE+L;MAChB,CAAC,CAAC,CACJ,CAAC;MAED,MAAMqD,aAAa,GAAGrG,KAAK,CAAC5J,IAAI,CAC9B,IAAIoN,GAAG,CAACtC,UAAU,CAAC5F,GAAG,CAACC,CAAC,IAAI,CAC1B,GAAGA,CAAC,CAACvC,YAAY,IAAIuC,CAAC,CAACtE,YAAY,IAAIrE,KAAK,CAAC2I,CAAC,CAAC3D,SAAS,CAAC,CAACnC,MAAM,CAAC,kBAAkB,CAAC,EAAE,EACtF8F,CAAC,CACF,CAAC,CAAC,CAACd,MAAM,CAAC,CACb,CAAC;MAED/G,iBAAiB,CAAC2S,aAAa,CAAC;IAClC;EACF,CAAC,EAAE,CAACpT,mBAAmB,CAAC,CAAC;EAEzB,OAAO;IACLE,aAAa;IACbC,gBAAgB;IAChBC,MAAM;IACNC,SAAS;IACTG,cAAc;IACdE,iBAAiB;IACjBmH,gBAAgB;IAChBmJ,oBAAoB;IACpBQ,YAAY;IACZ2B,OAAO;IACPvS,eAAe;IACfa,gBAAgB;IAChBE,qBAAqB;IACrBE,SAAS;IACTC;EACF,CAAC;AACH;AAAC7B,EAAA,CAzpCuBH,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}