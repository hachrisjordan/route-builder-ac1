{"ast":null,"code":"var _jsxFileName = \"/Users/hanguyen/Desktop/route-builder-ac/src/components/FlightSearch/FlightDetailsModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { Modal, Input, Spin, Table, Button, Typography, Pagination } from 'antd';\nimport dayjs from 'dayjs';\nimport { getSegmentColumns } from './segmentColumns';\nimport useFlightDetails from './hooks/useFlightDetails';\nimport FlightAvailabilityCalendar from './FlightAvailabilityCalendar';\nimport airlines from './data/airlines';\nimport { airports } from './data/airports';\nimport pricingData from './data/pricing.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FlightDetailsModal = ({\n  isVisible,\n  currentRoute,\n  onClose,\n  startDay\n}) => {\n  _s();\n  // State for tracking errors (used in handlers)\n  const {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData\n  } = useFlightDetails(getSegmentColumns, startDay);\n\n  // Add pagination state with sorting\n  const [paginationState, setPaginationState] = useState({});\n\n  // Add pagination config\n  const paginationConfig = {\n    pageSize: 5,\n    showSizeChanger: true,\n    pageSizeOptions: ['5', '10', '20', '50']\n  };\n\n  // Function to handle pagination change\n  const handlePaginationChange = (segmentIndex, page, pageSize) => {\n    setPaginationState(prev => ({\n      ...prev,\n      [segmentIndex]: {\n        ...prev[segmentIndex],\n        // Preserve sorting if it exists\n        page,\n        pageSize\n      }\n    }));\n  };\n\n  // Placeholder for pagination implementation\n\n  // COMMENT OUT THIS ENTIRE EFFECT TO STOP INFINITE LOOP\n  /*\n  useEffect(() => {\n    if (!isVisible) {\n      resetDetails();\n      setSelectedDates(null);\n      setApiKey('');\n    }\n  }, [isVisible, resetDetails, setSelectedDates, setApiKey]);\n  */\n\n  // DateSearch and close handlers - STOPS INFINITE LOOP\n  const dateSelectRef = useRef(false);\n  const handleCalendarDateSelect = dateRange => {\n    if (JSON.stringify(dateRange) !== JSON.stringify(selectedDates)) {\n      setSelectedDates(dateRange);\n    }\n  };\n  const handleCalendarSearchClick = (stopoverInfo, preserveCalendarData = false, clearSelections = false) => {\n    if (!selectedDates) {\n      return;\n    }\n\n    // Pass the clearSelections flag to handleDateSearch\n    handleDateSearch(currentRoute, stopoverInfo, preserveCalendarData, clearSelections);\n  };\n\n  // Function to group flights by segment with safety checks\n  const getSegmentTables = () => {\n    if (!segmentDetails || segmentDetails.length === 0) return [];\n\n    // Group flights by segment and filter out hidden flights\n    const segments = segmentDetails.reduce((acc, flight) => {\n      if (flight.hidden) return acc; // Skip hidden flights\n\n      if (!acc[flight.segmentIndex]) {\n        acc[flight.segmentIndex] = {\n          index: flight.segmentIndex,\n          route: `${flight.from}-${flight.to}`,\n          flights: []\n        };\n      }\n      acc[flight.segmentIndex].flights.push(flight);\n      return acc;\n    }, {});\n    return Object.entries(segments).sort(([a], [b]) => parseInt(a) - parseInt(b)).map(([segmentIndex, flights]) => {\n      var _flights$flights$, _flights$flights$2;\n      // Create a deep copy of flights to avoid modifying the original data\n      const flightsCopy = JSON.parse(JSON.stringify(flights.flights));\n\n      // Get pagination state for this segment\n      const {\n        page = 1,\n        pageSize = paginationConfig.pageSize,\n        sortField,\n        sortOrder\n      } = paginationState[segmentIndex] || {};\n\n      // Sort the entire dataset if sorting is applied\n      if (sortField && sortOrder) {\n        flightsCopy.sort((a, b) => {\n          let aValue, bValue;\n\n          // Special handling for cabin class columns\n          if (sortField === 'economy' || sortField === 'business' || sortField === 'first') {\n            // For cabin classes, true sorts before false\n            aValue = a[sortField] === true ? 1 : 0;\n            bValue = b[sortField] === true ? 1 : 0;\n          } else {\n            aValue = a[sortField];\n            bValue = b[sortField];\n          }\n\n          // Handle different data types\n          if (typeof aValue === 'string' && typeof bValue === 'string') {\n            return sortOrder === 'ascend' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n          } else if (sortField === 'duration') {\n            // For duration, convert to minutes if it's a string like \"2h 30m\"\n            if (typeof aValue === 'string' && aValue.includes('h')) {\n              const [aHours, aMinutes] = aValue.split('h').map(part => parseInt(part) || 0);\n              aValue = aHours * 60 + aMinutes;\n            }\n            if (typeof bValue === 'string' && bValue.includes('h')) {\n              const [bHours, bMinutes] = bValue.split('h').map(part => parseInt(part) || 0);\n              bValue = bHours * 60 + bMinutes;\n            }\n            return sortOrder === 'ascend' ? aValue - bValue : bValue - aValue;\n          } else {\n            // For numbers and other types\n            return sortOrder === 'ascend' ? aValue > bValue ? 1 : -1 : bValue > aValue ? 1 : -1;\n          }\n        });\n      }\n\n      // Calculate pagination\n      const start = (page - 1) * pageSize;\n      const end = start + pageSize;\n      const paginatedFlights = flightsCopy.slice(start, end);\n      return {\n        index: parseInt(segmentIndex),\n        route: `${((_flights$flights$ = flights.flights[0]) === null || _flights$flights$ === void 0 ? void 0 : _flights$flights$.from) || '?'}-${((_flights$flights$2 = flights.flights[0]) === null || _flights$flights$2 === void 0 ? void 0 : _flights$flights$2.to) || '?'}`,\n        flights: paginatedFlights,\n        allFlights: flightsCopy,\n        // Keep the full sorted dataset\n        total: flightsCopy.length\n      };\n    });\n  };\n\n  // Update the handleTableChange function to handle sorting\n  const handleTableChange = (segmentIndex, pagination, filters, sorter) => {\n    setPaginationState(prev => ({\n      ...prev,\n      [segmentIndex]: {\n        page: pagination.current,\n        pageSize: pagination.pageSize,\n        sortField: sorter.field,\n        sortOrder: sorter.order\n      }\n    }));\n  };\n\n  // Modal close logic implemented in onCancel handler\n\n  // Calculate total journey duration by summing segment durations and layovers\n  const calculateTotalDuration = segments => {\n    try {\n      let totalMinutes = 0;\n\n      // Add each segment's flight duration\n      segments.forEach(segmentIndex => {\n        var _selectedFlights$segm;\n        const flight = (_selectedFlights$segm = selectedFlights[segmentIndex]) === null || _selectedFlights$segm === void 0 ? void 0 : _selectedFlights$segm[0];\n        if (flight) {\n          // Convert duration string (e.g., \"6:25\" or \"6h 25m\") to minutes\n          if (typeof flight.duration === 'string') {\n            if (flight.duration.includes('h')) {\n              // Format: \"6h 25m\"\n              const [hours, minutes] = flight.duration.split('h').map(part => parseInt(part.replace(/[^0-9]/g, '') || 0));\n              totalMinutes += hours * 60 + minutes;\n            } else if (flight.duration.includes(':')) {\n              // Format: \"6:25\"\n              const [hours, minutes] = flight.duration.split(':').map(Number);\n              totalMinutes += hours * 60 + minutes;\n            } else {\n              // Try to parse as number\n              totalMinutes += parseInt(flight.duration) || 0;\n            }\n          } else if (typeof flight.duration === 'number') {\n            totalMinutes += flight.duration;\n          }\n        }\n      });\n\n      // Add layover durations between segments\n      for (let i = 0; i < segments.length - 1; i++) {\n        var _selectedFlights$segm2, _selectedFlights$segm3;\n        const currentSegment = (_selectedFlights$segm2 = selectedFlights[segments[i]]) === null || _selectedFlights$segm2 === void 0 ? void 0 : _selectedFlights$segm2[0];\n        const nextSegment = (_selectedFlights$segm3 = selectedFlights[segments[i + 1]]) === null || _selectedFlights$segm3 === void 0 ? void 0 : _selectedFlights$segm3[0];\n        if (currentSegment && nextSegment) {\n          const arrivalTime = dayjs(currentSegment.ArrivesAt);\n          const departureTime = dayjs(nextSegment.DepartsAt);\n          const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n          totalMinutes += layoverMinutes;\n        }\n      }\n\n      // Format the total duration\n      const hours = Math.floor(totalMinutes / 60);\n      const minutes = totalMinutes % 60;\n      return `${hours}h ${minutes}m`;\n    } catch (error) {\n      console.error('Error calculating total duration:', error);\n      return 'N/A';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: \"Flight Details\",\n    open: isVisible,\n    onCancel: () => {\n      // Clear all flight details and selections but keep API key\n      if (resetDetails) resetDetails();\n      if (setSelectedDates) setSelectedDates(null);\n\n      // Clear window selections if available\n      if (window.clearStopoverInfo) {\n        window.clearStopoverInfo();\n      }\n\n      // Clear date selections by directly manipulating DOM\n      try {\n        // Clear any highlighted dates in the calendar\n        const highlightedDates = document.querySelectorAll('.calendar-container [style*=\"background-color: rgb(230, 244, 255)\"]');\n        highlightedDates.forEach(el => {\n          el.style.backgroundColor = \"white\";\n          el.style.border = \"none\";\n        });\n\n        // Clear any date borders\n        const borderDates = document.querySelectorAll('.calendar-container [style*=\"border: 2px solid rgb(24, 144, 255)\"]');\n        borderDates.forEach(el => {\n          el.style.border = \"none\";\n        });\n      } catch (e) {\n        console.log(\"Error clearing date selections:\", e);\n      }\n\n      // Finally close the modal\n      onClose();\n    },\n    footer: null,\n    width: 1600,\n    styles: {\n      body: {\n        padding: '12px',\n        maxWidth: '100%'\n      },\n      wrapper: {\n        top: '-80px' // Position the modal 16px from the top\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 16\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '8px',\n          marginBottom: 16\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '8px',\n            flex: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Enter your yapping password (Under Development)\",\n            value: apiKey,\n            onChange: e => setApiKey(e.target.value),\n            style: {\n              flex: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            disabled: !apiKey || !apiKey.toLowerCase().startsWith('pro'),\n            onClick: () => {\n              // First fetch the data\n              handleCalendarSearch(currentRoute);\n\n              // Then after a short delay, show the calendar\n              setTimeout(() => {\n                if (window.showCalendar) {\n                  window.showCalendar();\n                }\n              }, 100);\n            },\n            children: \"Apply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlightAvailabilityCalendar, {\n      flightData: availabilityData,\n      currentRoute: currentRoute,\n      onDateRangeSelect: handleCalendarDateSelect,\n      selectedRange: selectedDates,\n      onSearch: handleCalendarSearchClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), isLoadingSegments ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        margin: '20px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this) : (segmentDetails === null || segmentDetails === void 0 ? void 0 : segmentDetails.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n        level: 4,\n        style: {\n          marginBottom: 16\n        },\n        children: \"Flights By Segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 13\n      }, this), getSegmentTables().map((segment, index) => {\n        var _paginationState$segm, _paginationState$segm2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 16\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              marginBottom: 12\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n              level: 5,\n              style: {\n                margin: 0\n              },\n              children: [\"Segment \", segment.index + 1, \" (\", segment.route, \"):\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Pagination, {\n                size: \"small\",\n                total: segment.total,\n                pageSize: ((_paginationState$segm = paginationState[segment.index]) === null || _paginationState$segm === void 0 ? void 0 : _paginationState$segm.pageSize) || paginationConfig.pageSize,\n                current: ((_paginationState$segm2 = paginationState[segment.index]) === null || _paginationState$segm2 === void 0 ? void 0 : _paginationState$segm2.page) || 1,\n                onChange: (page, pageSize) => handlePaginationChange(segment.index, page, pageSize),\n                showSizeChanger: true,\n                showTotal: (total, range) => `${range[0]}-${range[1]} of ${total}`,\n                style: {\n                  display: 'inline-block',\n                  marginBottom: 0\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Table, {\n            columns: columns,\n            dataSource: segment.flights,\n            pagination: false,\n            size: \"small\",\n            onChange: (pagination, filters, sorter) => handleTableChange(segment.index, pagination, filters, sorter)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 17\n          }, this), index < getSegmentTables().length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: '0px',\n              margin: '16px',\n              textAlign: 'center',\n              fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography.Text, {\n              strong: true,\n              children: (() => {\n                const currentSegmentFlights = selectedFlights[segment.index];\n                const nextSegmentFlights = selectedFlights[segment.index + 1];\n                if (!(currentSegmentFlights !== null && currentSegmentFlights !== void 0 && currentSegmentFlights[0]) || !(nextSegmentFlights !== null && nextSegmentFlights !== void 0 && nextSegmentFlights[0])) {\n                  return 'Select flights to see connection time';\n                }\n                const currentFlight = currentSegmentFlights[0];\n                const nextFlight = nextSegmentFlights[0];\n                const arrivalTime = dayjs(currentFlight.ArrivesAt);\n                const departureTime = dayjs(nextFlight.DepartsAt);\n                const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n\n                // If layover is more than 24 hours, show as stopover\n                if (layoverMinutes >= 24 * 60) {\n                  const days = Math.floor(layoverMinutes / (24 * 60));\n                  const remainingHours = Math.floor(layoverMinutes % (24 * 60) / 60);\n                  const remainingMinutes = layoverMinutes % 60;\n                  return `Stopover duration: ${days} day${days > 1 ? 's' : ''} ${remainingHours}h ${remainingMinutes}m`;\n                } else {\n                  // Regular layover display\n                  const hours = Math.floor(layoverMinutes / 60);\n                  const minutes = layoverMinutes % 60;\n                  return `Layover duration: ${hours}h ${minutes}m`;\n                }\n              })()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 19\n          }, this)]\n        }, segment.index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 24,\n        display: Object.keys(selectedFlights).length > 0 ? 'block' : 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n        level: 4,\n        children: \"Journey Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        columns: [{\n          title: 'From',\n          dataIndex: 'from',\n          key: 'from'\n        }, {\n          title: 'To',\n          dataIndex: 'to',\n          key: 'to'\n        }, {\n          title: 'Airlines',\n          dataIndex: 'airlines',\n          key: 'airlines',\n          render: airlinesList => {\n            // More thorough safety checks\n            if (!airlinesList || airlinesList === '-') return '-';\n            try {\n              const airlineArray = Array.isArray(airlinesList) ? airlinesList : airlinesList.split(', ');\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  flexDirection: 'column',\n                  gap: '4px'\n                },\n                children: airlineArray.map((airlineName, index) => {\n                  if (!airlineName) return null;\n                  const airline = airlines.find(a => {\n                    var _a$label;\n                    return airlineName.startsWith((_a$label = a.label) === null || _a$label === void 0 ? void 0 : _a$label.replace(` (${a.value})`, ''));\n                  });\n                  const airlineCode = airline === null || airline === void 0 ? void 0 : airline.value;\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: '8px'\n                    },\n                    children: [airlineCode && /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: `${process.env.PUBLIC_URL}/${airlineCode}.png`,\n                      alt: airlineCode,\n                      style: {\n                        width: '24px',\n                        height: '24px',\n                        objectFit: 'contain',\n                        borderRadius: '4px'\n                      },\n                      onError: e => {\n                        e.target.style.display = 'none';\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 453,\n                      columnNumber: 31\n                    }, this), airlineName]\n                  }, `${airlineCode}-${index}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 451,\n                    columnNumber: 27\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 21\n              }, this);\n            } catch (error) {\n              console.error('Error rendering airlines:', error);\n              return '-';\n            }\n          }\n        }, {\n          title: 'Duration',\n          dataIndex: 'duration',\n          key: 'duration'\n        }, {\n          title: 'Departs',\n          dataIndex: 'departs',\n          key: 'departs'\n        }, {\n          title: 'Arrives',\n          dataIndex: 'arrives',\n          key: 'arrives'\n        }, {\n          title: 'Economy Price',\n          dataIndex: 'economyPrice',\n          key: 'economyPrice',\n          onCell: (_, index) => ({\n            rowSpan: index === 0 ? 2 : 0 // Show only in first row\n          })\n        }, {\n          title: 'Business Price (Max %)',\n          dataIndex: 'businessPrice',\n          key: 'businessPrice',\n          onCell: (_, index) => ({\n            rowSpan: index === 0 ? 2 : 0 // Show only in first row\n          }),\n          render: text => {\n            if (!text || text === 'N/A') return text;\n            try {\n              const [price, percentage] = text.split(' (');\n              if (!percentage) return text;\n              return `${price} (${percentage}`;\n            } catch (error) {\n              return text;\n            }\n          }\n        }, {\n          title: 'First Price (Max %)',\n          dataIndex: 'firstPrice',\n          key: 'firstPrice',\n          onCell: (_, index) => ({\n            rowSpan: index === 0 ? 2 : 0 // Show only in first row\n          }),\n          render: text => {\n            if (!text || text === 'N/A') return text;\n            try {\n              const [price, percentage] = text.split(' (');\n              if (!percentage) return text;\n              return `${price} (${percentage}`;\n            } catch (error) {\n              return text;\n            }\n          }\n        }],\n        dataSource: useMemo(() => {\n          try {\n            var _selectedFlights$firs7, _selectedFlights$firs8, _selectedFlights$stop, _selectedFlights$stop2, _selectedFlights$firs9, _selectedFlights$firs10, _selectedFlights$stop3, _selectedFlights$stop4, _selectedFlights2, _selectedFlights2$, _selectedFlights$last7, _selectedFlights$last8, _selectedFlights3, _selectedFlights3$, _selectedFlights$last9, _selectedFlights$last10;\n            if (Object.keys(selectedFlights).length === 0) return [];\n            const segments = Object.keys(selectedFlights).map(Number).sort((a, b) => a - b);\n            if (segments.length === 0) return [];\n            const firstSegmentIndex = Math.min(...segments);\n            const lastSegmentIndex = Math.max(...segments);\n\n            // Helper function to get airlines string\n            const getAirlinesString = segmentRange => {\n              try {\n                const airlineSet = new Set(segmentRange.flatMap(i => {\n                  var _selectedFlights$i;\n                  return (_selectedFlights$i = selectedFlights[i]) === null || _selectedFlights$i === void 0 ? void 0 : _selectedFlights$i.map(f => f.airlines);\n                }).filter(Boolean));\n                return Array.from(airlineSet).join(', ') || '-';\n              } catch (error) {\n                console.error('Error getting airlines string:', error);\n                return '-';\n              }\n            };\n\n            // Removed debug logging to prevent console spam\n\n            // Calculate prices for the ENTIRE journey (origin to final destination)\n            const calculatePrices = hasStopover => {\n              try {\n                // Get origin and destination airports\n                const originAirport = airports.find(a => {\n                  var _selectedFlights$firs, _selectedFlights$firs2;\n                  return a.IATA === ((_selectedFlights$firs = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs === void 0 ? void 0 : (_selectedFlights$firs2 = _selectedFlights$firs[0]) === null || _selectedFlights$firs2 === void 0 ? void 0 : _selectedFlights$firs2.from);\n                });\n                const destAirport = airports.find(a => {\n                  var _selectedFlights$last, _selectedFlights$last2;\n                  return a.IATA === ((_selectedFlights$last = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last === void 0 ? void 0 : (_selectedFlights$last2 = _selectedFlights$last[0]) === null || _selectedFlights$last2 === void 0 ? void 0 : _selectedFlights$last2.to);\n                });\n                if (!originAirport || !destAirport) return {\n                  economyPrice: '-',\n                  businessPrice: '-',\n                  firstPrice: '-'\n                };\n\n                // Calculate total distance and cabin class distances\n                let totalDistance = 0;\n                let businessDistance = 0;\n                let firstDistance = 0;\n                let businessOnlyDistance = 0; // New: for segments with only business (no first)\n\n                Object.entries(selectedFlights).forEach(([_, flights]) => {\n                  flights.forEach(flight => {\n                    const distance = parseInt(flight.distance || 0);\n                    totalDistance += distance;\n\n                    // For Business Price: Include all segments with business class\n                    if (flight.business) businessDistance += distance;\n\n                    // For First Price: Only count business from segments without first\n                    if (flight.business && !flight.first) businessOnlyDistance += distance;\n                    if (flight.first) firstDistance += distance;\n                  });\n                });\n\n                // Find matching price in pricing data\n                const pricing = pricingData.find(p => p[\"From Region\"] === originAirport.Zone && p[\"To Region\"] === destAirport.Zone && totalDistance >= p[\"Min Distance\"] && totalDistance <= p[\"Max Distance\"]);\n                if (!pricing) return {\n                  economyPrice: '-',\n                  businessPrice: '-',\n                  firstPrice: '-'\n                };\n\n                // Calculate percentages\n                const businessPercentage = Math.round(businessDistance / totalDistance * 100);\n                const firstPercentage = Math.round(firstDistance / totalDistance * 100);\n                const businessOnlyPercentage = Math.round(businessOnlyDistance / totalDistance * 100);\n\n                // Add stopover fee if applicable\n                const stopoverExtra = hasStopover ? 5000 : 0;\n                return {\n                  economyPrice: pricing.Economy ? (pricing.Economy + stopoverExtra).toLocaleString() : '-',\n                  // If business percentage is 0, show \"-\" instead of price\n                  businessPrice: pricing.Business && businessPercentage > 0 ? `${(pricing.Business + stopoverExtra).toLocaleString()} (${businessPercentage}% J)` : '-',\n                  // If first percentage is 0, show \"-\" instead of price\n                  firstPrice: pricing.First && firstPercentage > 0 ? `${(pricing.First + stopoverExtra).toLocaleString()} (${firstPercentage > 0 && businessOnlyPercentage > 0 ? `${firstPercentage}% F, ${businessOnlyPercentage}% J` : firstPercentage > 0 ? `${firstPercentage}% F` : '0%'})` : '-'\n                };\n              } catch (error) {\n                console.error('Error calculating prices:', error);\n                return {\n                  economyPrice: '-',\n                  businessPrice: '-',\n                  firstPrice: '-'\n                };\n              }\n            };\n\n            // Find stopover point\n            let stopoverIndex = null;\n            for (let i = firstSegmentIndex; i < lastSegmentIndex; i++) {\n              var _selectedFlights$i2, _selectedFlights;\n              const currentFlight = (_selectedFlights$i2 = selectedFlights[i]) === null || _selectedFlights$i2 === void 0 ? void 0 : _selectedFlights$i2[0];\n              const nextFlight = (_selectedFlights = selectedFlights[i + 1]) === null || _selectedFlights === void 0 ? void 0 : _selectedFlights[0];\n              if (currentFlight && nextFlight) {\n                const arrivalTime = dayjs(currentFlight.ArrivesAt);\n                const departureTime = dayjs(nextFlight.DepartsAt);\n                const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n                if (layoverMinutes >= 24 * 60) {\n                  stopoverIndex = i;\n                  break;\n                }\n              }\n            }\n\n            // Calculate prices once for the entire journey\n            const prices = calculatePrices(stopoverIndex !== null);\n\n            // Calculate total journey duration by summing segment durations and layovers\n            const totalDuration = calculateTotalDuration(segments);\n\n            // If no stopover found, return single row\n            if (stopoverIndex === null) {\n              var _selectedFlights$firs3, _selectedFlights$firs4, _selectedFlights$last3, _selectedFlights$last4, _selectedFlights$firs5, _selectedFlights$firs6, _selectedFlights$last5, _selectedFlights$last6;\n              return [{\n                key: '1',\n                from: ((_selectedFlights$firs3 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs3 === void 0 ? void 0 : (_selectedFlights$firs4 = _selectedFlights$firs3[0]) === null || _selectedFlights$firs4 === void 0 ? void 0 : _selectedFlights$firs4.from) || '-',\n                to: ((_selectedFlights$last3 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last3 === void 0 ? void 0 : (_selectedFlights$last4 = _selectedFlights$last3[0]) === null || _selectedFlights$last4 === void 0 ? void 0 : _selectedFlights$last4.to) || '-',\n                airlines: getAirlinesString(segments),\n                duration: totalDuration,\n                departs: dayjs((_selectedFlights$firs5 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs5 === void 0 ? void 0 : (_selectedFlights$firs6 = _selectedFlights$firs5[0]) === null || _selectedFlights$firs6 === void 0 ? void 0 : _selectedFlights$firs6.DepartsAt).format('HH:mm MM-DD'),\n                arrives: dayjs((_selectedFlights$last5 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last5 === void 0 ? void 0 : (_selectedFlights$last6 = _selectedFlights$last5[0]) === null || _selectedFlights$last6 === void 0 ? void 0 : _selectedFlights$last6.ArrivesAt).format('HH:mm MM-DD'),\n                ...prices\n              }];\n            }\n\n            // Split journey at stopover with merged price cells\n            return [{\n              key: '1',\n              from: ((_selectedFlights$firs7 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs7 === void 0 ? void 0 : (_selectedFlights$firs8 = _selectedFlights$firs7[0]) === null || _selectedFlights$firs8 === void 0 ? void 0 : _selectedFlights$firs8.from) || '-',\n              to: ((_selectedFlights$stop = selectedFlights[stopoverIndex]) === null || _selectedFlights$stop === void 0 ? void 0 : (_selectedFlights$stop2 = _selectedFlights$stop[0]) === null || _selectedFlights$stop2 === void 0 ? void 0 : _selectedFlights$stop2.to) || '-',\n              airlines: getAirlinesString(segments.filter(i => i <= stopoverIndex)),\n              duration: calculateTotalDuration(segments.filter(i => i <= stopoverIndex)),\n              departs: dayjs((_selectedFlights$firs9 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs9 === void 0 ? void 0 : (_selectedFlights$firs10 = _selectedFlights$firs9[0]) === null || _selectedFlights$firs10 === void 0 ? void 0 : _selectedFlights$firs10.DepartsAt).format('HH:mm MM-DD'),\n              arrives: dayjs((_selectedFlights$stop3 = selectedFlights[stopoverIndex]) === null || _selectedFlights$stop3 === void 0 ? void 0 : (_selectedFlights$stop4 = _selectedFlights$stop3[0]) === null || _selectedFlights$stop4 === void 0 ? void 0 : _selectedFlights$stop4.ArrivesAt).format('HH:mm MM-DD'),\n              ...prices // Same prices for first row\n            }, {\n              key: '2',\n              from: ((_selectedFlights2 = selectedFlights[stopoverIndex + 1]) === null || _selectedFlights2 === void 0 ? void 0 : (_selectedFlights2$ = _selectedFlights2[0]) === null || _selectedFlights2$ === void 0 ? void 0 : _selectedFlights2$.from) || '-',\n              to: ((_selectedFlights$last7 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last7 === void 0 ? void 0 : (_selectedFlights$last8 = _selectedFlights$last7[0]) === null || _selectedFlights$last8 === void 0 ? void 0 : _selectedFlights$last8.to) || '-',\n              airlines: getAirlinesString(segments.filter(i => i > stopoverIndex)),\n              duration: calculateTotalDuration(segments.filter(i => i > stopoverIndex)),\n              departs: dayjs((_selectedFlights3 = selectedFlights[stopoverIndex + 1]) === null || _selectedFlights3 === void 0 ? void 0 : (_selectedFlights3$ = _selectedFlights3[0]) === null || _selectedFlights3$ === void 0 ? void 0 : _selectedFlights3$.DepartsAt).format('HH:mm MM-DD'),\n              arrives: dayjs((_selectedFlights$last9 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last9 === void 0 ? void 0 : (_selectedFlights$last10 = _selectedFlights$last9[0]) === null || _selectedFlights$last10 === void 0 ? void 0 : _selectedFlights$last10.ArrivesAt).format('HH:mm MM-DD'),\n              economyPrice: null,\n              // Will be hidden by rowSpan\n              businessPrice: null,\n              // Will be hidden by rowSpan\n              firstPrice: null // Will be hidden by rowSpan\n            }];\n          } catch (error) {\n            console.error('Error generating dataSource:', error);\n            return [];\n          }\n        }, [selectedFlights, pricingData]),\n        pagination: false,\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 12,\n          fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography.Text, {\n          children: useMemo(() => {\n            if (Object.keys(selectedFlights).length === 0) return null;\n            try {\n              const segments = Object.keys(selectedFlights).map(Number);\n              if (segments.length === 0) return null;\n              const firstSegmentIndex = Math.min(...segments);\n              const lastSegmentIndex = Math.max(...segments);\n              const originAirport = airports.find(a => {\n                var _selectedFlights$firs11, _selectedFlights$firs12;\n                return a.IATA === ((_selectedFlights$firs11 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs11 === void 0 ? void 0 : (_selectedFlights$firs12 = _selectedFlights$firs11[0]) === null || _selectedFlights$firs12 === void 0 ? void 0 : _selectedFlights$firs12.from);\n              });\n              const destAirport = airports.find(a => {\n                var _selectedFlights$last11, _selectedFlights$last12;\n                return a.IATA === ((_selectedFlights$last11 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last11 === void 0 ? void 0 : (_selectedFlights$last12 = _selectedFlights$last11[0]) === null || _selectedFlights$last12 === void 0 ? void 0 : _selectedFlights$last12.to);\n              });\n              if (!originAirport || !destAirport) return 'Unable to validate route: airport data missing';\n\n              // Haversine formula\n              const R = 3959; // Earth's radius in miles\n              const lat1 = originAirport.Latitude * Math.PI / 180;\n              const lat2 = destAirport.Latitude * Math.PI / 180;\n              const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n              const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n              const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n              const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n              const directDistance = Math.round(R * c);\n\n              // Calculate total segment distance\n              let totalSegmentDistance = 0;\n              Object.values(selectedFlights).forEach(flights => {\n                flights.forEach(flight => {\n                  totalSegmentDistance += parseInt(flight.distance || 0);\n                });\n              });\n              const isValid = totalSegmentDistance <= 2 * directDistance;\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    marginTop: 8,\n                    fontSize: '16px',\n                    fontWeight: 'bold',\n                    color: isValid ? '#52c41a' : '#f5222d',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    gap: '8px',\n                    width: '100%'\n                  },\n                  children: isValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"\\u2713\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 774,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"ROUTING VALIDATED\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 775,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"\\u2717\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 779,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"THIS ROUTING IS INVALID\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 780,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 761,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false);\n            } catch (error) {\n              console.error('Error in route validation:', error);\n              return null;\n            }\n          }, [selectedFlights, airports])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        :global(.ant-table) {\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 795,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n};\n\n// End of modal component\n_s(FlightDetailsModal, \"swavzPzFfNliXtO/XPXtHRpwNWk=\", false, function () {\n  return [useFlightDetails];\n});\n_c = FlightDetailsModal;\nexport default FlightDetailsModal;\nvar _c;\n$RefreshReg$(_c, \"FlightDetailsModal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","Modal","Input","Spin","Table","Button","Typography","Pagination","dayjs","getSegmentColumns","useFlightDetails","FlightAvailabilityCalendar","airlines","airports","pricingData","jsxDEV","_jsxDEV","Fragment","_Fragment","FlightDetailsModal","isVisible","currentRoute","onClose","startDay","_s","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","isLoadingSegments","handleDateSearch","handleCalendarSearch","resetDetails","columns","selectedFlights","availabilityData","paginationState","setPaginationState","paginationConfig","pageSize","showSizeChanger","pageSizeOptions","handlePaginationChange","segmentIndex","page","prev","dateSelectRef","handleCalendarDateSelect","dateRange","JSON","stringify","handleCalendarSearchClick","stopoverInfo","preserveCalendarData","clearSelections","getSegmentTables","length","segments","reduce","acc","flight","hidden","index","route","from","to","flights","push","Object","entries","sort","a","b","parseInt","map","_flights$flights$","_flights$flights$2","flightsCopy","parse","sortField","sortOrder","aValue","bValue","localeCompare","includes","aHours","aMinutes","split","part","bHours","bMinutes","start","end","paginatedFlights","slice","allFlights","total","handleTableChange","pagination","filters","sorter","current","field","order","calculateTotalDuration","totalMinutes","forEach","_selectedFlights$segm","duration","hours","minutes","replace","Number","i","_selectedFlights$segm2","_selectedFlights$segm3","currentSegment","nextSegment","arrivalTime","ArrivesAt","departureTime","DepartsAt","layoverMinutes","diff","Math","floor","error","console","title","open","onCancel","window","clearStopoverInfo","highlightedDates","document","querySelectorAll","el","style","backgroundColor","border","borderDates","e","log","footer","width","styles","body","padding","maxWidth","wrapper","top","children","marginBottom","display","gap","flex","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","type","disabled","toLowerCase","startsWith","onClick","setTimeout","showCalendar","flightData","onDateRangeSelect","selectedRange","onSearch","textAlign","margin","marginTop","Title","level","segment","_paginationState$segm","_paginationState$segm2","justifyContent","alignItems","size","showTotal","range","dataSource","fontFamily","Text","strong","currentSegmentFlights","nextSegmentFlights","currentFlight","nextFlight","days","remainingHours","remainingMinutes","keys","dataIndex","key","render","airlinesList","airlineArray","Array","isArray","flexDirection","airlineName","airline","find","_a$label","label","airlineCode","src","process","env","PUBLIC_URL","alt","height","objectFit","borderRadius","onError","onCell","_","rowSpan","text","price","percentage","_selectedFlights$firs7","_selectedFlights$firs8","_selectedFlights$stop","_selectedFlights$stop2","_selectedFlights$firs9","_selectedFlights$firs10","_selectedFlights$stop3","_selectedFlights$stop4","_selectedFlights2","_selectedFlights2$","_selectedFlights$last7","_selectedFlights$last8","_selectedFlights3","_selectedFlights3$","_selectedFlights$last9","_selectedFlights$last10","firstSegmentIndex","min","lastSegmentIndex","max","getAirlinesString","segmentRange","airlineSet","Set","flatMap","_selectedFlights$i","f","filter","Boolean","join","calculatePrices","hasStopover","originAirport","_selectedFlights$firs","_selectedFlights$firs2","IATA","destAirport","_selectedFlights$last","_selectedFlights$last2","economyPrice","businessPrice","firstPrice","totalDistance","businessDistance","firstDistance","businessOnlyDistance","distance","business","first","pricing","p","Zone","businessPercentage","round","firstPercentage","businessOnlyPercentage","stopoverExtra","Economy","toLocaleString","Business","First","stopoverIndex","_selectedFlights$i2","_selectedFlights","prices","totalDuration","_selectedFlights$firs3","_selectedFlights$firs4","_selectedFlights$last3","_selectedFlights$last4","_selectedFlights$firs5","_selectedFlights$firs6","_selectedFlights$last5","_selectedFlights$last6","departs","format","arrives","_selectedFlights$firs11","_selectedFlights$firs12","_selectedFlights$last11","_selectedFlights$last12","R","lat1","Latitude","PI","lat2","dLat","dLon","Longitude","sin","cos","c","atan2","sqrt","directDistance","totalSegmentDistance","values","isValid","fontSize","fontWeight","color","jsx","_c","$RefreshReg$"],"sources":["/Users/hanguyen/Desktop/route-builder-ac/src/components/FlightSearch/FlightDetailsModal.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { Modal, Input, Spin, Table, Button, Typography, Pagination } from 'antd';\nimport dayjs from 'dayjs';\nimport { getSegmentColumns } from './segmentColumns';\nimport useFlightDetails from './hooks/useFlightDetails';\nimport FlightAvailabilityCalendar from './FlightAvailabilityCalendar';\nimport airlines from './data/airlines';\nimport { airports } from './data/airports';\nimport pricingData from './data/pricing.json';\n\nconst FlightDetailsModal = ({ isVisible, currentRoute, onClose, startDay }) => {\n  // State for tracking errors (used in handlers)\n  const {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n  } = useFlightDetails(getSegmentColumns, startDay);\n\n  // Add pagination state with sorting\n  const [paginationState, setPaginationState] = useState({});\n  \n  // Add pagination config\n  const paginationConfig = {\n    pageSize: 5,\n    showSizeChanger: true,\n    pageSizeOptions: ['5', '10', '20', '50'],\n  };\n\n  // Function to handle pagination change\n  const handlePaginationChange = (segmentIndex, page, pageSize) => {\n    setPaginationState(prev => ({\n      ...prev,\n      [segmentIndex]: {\n        ...prev[segmentIndex], // Preserve sorting if it exists\n        page,\n        pageSize\n      }\n    }));\n  };\n\n  // Placeholder for pagination implementation\n\n  // COMMENT OUT THIS ENTIRE EFFECT TO STOP INFINITE LOOP\n  /*\n  useEffect(() => {\n    if (!isVisible) {\n      resetDetails();\n      setSelectedDates(null);\n      setApiKey('');\n    }\n  }, [isVisible, resetDetails, setSelectedDates, setApiKey]);\n  */\n\n  // DateSearch and close handlers - STOPS INFINITE LOOP\n  const dateSelectRef = useRef(false);\n\n  const handleCalendarDateSelect = (dateRange) => {\n    if (JSON.stringify(dateRange) !== JSON.stringify(selectedDates)) {\n      setSelectedDates(dateRange);\n    }\n  };\n\n  const handleCalendarSearchClick = (stopoverInfo, preserveCalendarData = false, clearSelections = false) => {\n    if (!selectedDates) {\n      return;\n    }\n    \n    // Pass the clearSelections flag to handleDateSearch\n    handleDateSearch(currentRoute, stopoverInfo, preserveCalendarData, clearSelections);\n  };\n\n  // Function to group flights by segment with safety checks\n  const getSegmentTables = () => {\n    if (!segmentDetails || segmentDetails.length === 0) return [];\n\n    // Group flights by segment and filter out hidden flights\n    const segments = segmentDetails.reduce((acc, flight) => {\n      if (flight.hidden) return acc; // Skip hidden flights\n      \n      if (!acc[flight.segmentIndex]) {\n        acc[flight.segmentIndex] = {\n          index: flight.segmentIndex,\n          route: `${flight.from}-${flight.to}`,\n          flights: []\n        };\n      }\n      acc[flight.segmentIndex].flights.push(flight);\n      return acc;\n    }, {});\n\n    return Object.entries(segments)\n      .sort(([a], [b]) => parseInt(a) - parseInt(b))\n      .map(([segmentIndex, flights]) => {\n        // Create a deep copy of flights to avoid modifying the original data\n        const flightsCopy = JSON.parse(JSON.stringify(flights.flights));\n        \n        // Get pagination state for this segment\n        const { page = 1, pageSize = paginationConfig.pageSize, sortField, sortOrder } = \n          paginationState[segmentIndex] || {};\n        \n        // Sort the entire dataset if sorting is applied\n        if (sortField && sortOrder) {\n          flightsCopy.sort((a, b) => {\n            let aValue, bValue;\n            \n            // Special handling for cabin class columns\n            if (sortField === 'economy' || sortField === 'business' || sortField === 'first') {\n              // For cabin classes, true sorts before false\n              aValue = a[sortField] === true ? 1 : 0;\n              bValue = b[sortField] === true ? 1 : 0;\n            } else {\n              aValue = a[sortField];\n              bValue = b[sortField];\n            }\n            \n            // Handle different data types\n            if (typeof aValue === 'string' && typeof bValue === 'string') {\n              return sortOrder === 'ascend' \n                ? aValue.localeCompare(bValue) \n                : bValue.localeCompare(aValue);\n            } else if (sortField === 'duration') {\n              // For duration, convert to minutes if it's a string like \"2h 30m\"\n              if (typeof aValue === 'string' && aValue.includes('h')) {\n                const [aHours, aMinutes] = aValue.split('h').map(part => parseInt(part) || 0);\n                aValue = aHours * 60 + aMinutes;\n              }\n              if (typeof bValue === 'string' && bValue.includes('h')) {\n                const [bHours, bMinutes] = bValue.split('h').map(part => parseInt(part) || 0);\n                bValue = bHours * 60 + bMinutes;\n              }\n              return sortOrder === 'ascend' ? aValue - bValue : bValue - aValue;\n            } else {\n              // For numbers and other types\n              return sortOrder === 'ascend' \n                ? (aValue > bValue ? 1 : -1) \n                : (bValue > aValue ? 1 : -1);\n            }\n          });\n        }\n        \n        // Calculate pagination\n        const start = (page - 1) * pageSize;\n        const end = start + pageSize;\n        const paginatedFlights = flightsCopy.slice(start, end);\n        \n        return {\n          index: parseInt(segmentIndex),\n          route: `${flights.flights[0]?.from || '?'}-${flights.flights[0]?.to || '?'}`,\n          flights: paginatedFlights,\n          allFlights: flightsCopy, // Keep the full sorted dataset\n          total: flightsCopy.length\n        };\n      });\n  };\n\n  // Update the handleTableChange function to handle sorting\n  const handleTableChange = (segmentIndex, pagination, filters, sorter) => {\n    setPaginationState(prev => ({\n      ...prev,\n      [segmentIndex]: {\n        page: pagination.current,\n        pageSize: pagination.pageSize,\n        sortField: sorter.field,\n        sortOrder: sorter.order\n      }\n    }));\n  };\n\n  // Modal close logic implemented in onCancel handler\n\n  // Calculate total journey duration by summing segment durations and layovers\n  const calculateTotalDuration = (segments) => {\n    try {\n      let totalMinutes = 0;\n      \n      // Add each segment's flight duration\n      segments.forEach(segmentIndex => {\n        const flight = selectedFlights[segmentIndex]?.[0];\n        if (flight) {\n          // Convert duration string (e.g., \"6:25\" or \"6h 25m\") to minutes\n          if (typeof flight.duration === 'string') {\n            if (flight.duration.includes('h')) {\n              // Format: \"6h 25m\"\n              const [hours, minutes] = flight.duration.split('h').map(part => \n                parseInt(part.replace(/[^0-9]/g, '') || 0)\n              );\n              totalMinutes += (hours * 60) + minutes;\n            } else if (flight.duration.includes(':')) {\n              // Format: \"6:25\"\n              const [hours, minutes] = flight.duration.split(':').map(Number);\n              totalMinutes += (hours * 60) + minutes;\n            } else {\n              // Try to parse as number\n              totalMinutes += parseInt(flight.duration) || 0;\n            }\n          } else if (typeof flight.duration === 'number') {\n            totalMinutes += flight.duration;\n          }\n        }\n      });\n      \n      // Add layover durations between segments\n      for (let i = 0; i < segments.length - 1; i++) {\n        const currentSegment = selectedFlights[segments[i]]?.[0];\n        const nextSegment = selectedFlights[segments[i + 1]]?.[0];\n        \n        if (currentSegment && nextSegment) {\n          const arrivalTime = dayjs(currentSegment.ArrivesAt);\n          const departureTime = dayjs(nextSegment.DepartsAt);\n          const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n          totalMinutes += layoverMinutes;\n        }\n      }\n      \n      // Format the total duration\n      const hours = Math.floor(totalMinutes / 60);\n      const minutes = totalMinutes % 60;\n      return `${hours}h ${minutes}m`;\n    } catch (error) {\n      console.error('Error calculating total duration:', error);\n      return 'N/A';\n    }\n  };\n\n  return (\n    <Modal\n      title=\"Flight Details\"\n      open={isVisible}\n      onCancel={() => {\n        // Clear all flight details and selections but keep API key\n        if (resetDetails) resetDetails();\n        if (setSelectedDates) setSelectedDates(null);\n        \n        // Clear window selections if available\n        if (window.clearStopoverInfo) {\n          window.clearStopoverInfo();\n        }\n        \n        // Clear date selections by directly manipulating DOM\n        try {\n          // Clear any highlighted dates in the calendar\n          const highlightedDates = document.querySelectorAll('.calendar-container [style*=\"background-color: rgb(230, 244, 255)\"]');\n          highlightedDates.forEach(el => {\n            el.style.backgroundColor = \"white\";\n            el.style.border = \"none\";\n          });\n          \n          // Clear any date borders\n          const borderDates = document.querySelectorAll('.calendar-container [style*=\"border: 2px solid rgb(24, 144, 255)\"]');\n          borderDates.forEach(el => {\n            el.style.border = \"none\";\n          });\n        } catch (e) {\n          console.log(\"Error clearing date selections:\", e);\n        }\n        \n        // Finally close the modal\n        onClose();\n      }}\n      footer={null}\n      width={1600}\n      styles={{\n        body: { \n          padding: '12px',\n          maxWidth: '100%'\n        },\n        wrapper: {\n          top: '-80px' // Position the modal 16px from the top\n        }\n      }}\n    >\n      <div style={{ marginBottom: 16 }}>\n        <div style={{ display: 'flex', gap: '8px', marginBottom: 16 }}>\n          <div style={{ display: 'flex', gap: '8px', flex: 1 }}>\n            <Input\n              placeholder=\"Enter your yapping password (Under Development)\"\n              value={apiKey}\n              onChange={(e) => setApiKey(e.target.value)}\n              style={{ flex: 1 }}\n            />\n            {/* Calendar start date picker removed as requested */}\n            <Button\n              type=\"primary\"\n              disabled={!apiKey || !apiKey.toLowerCase().startsWith('pro')}\n              onClick={() => {\n                // First fetch the data\n                handleCalendarSearch(currentRoute);\n                \n                // Then after a short delay, show the calendar\n                setTimeout(() => {\n                  if (window.showCalendar) {\n                    window.showCalendar();\n                  }\n                }, 100);\n              }}\n            >\n              Apply\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <FlightAvailabilityCalendar \n        flightData={availabilityData}\n        currentRoute={currentRoute}\n        onDateRangeSelect={handleCalendarDateSelect}\n        selectedRange={selectedDates}\n        onSearch={handleCalendarSearchClick}\n      />\n\n      {isLoadingSegments ? (\n        <div style={{ textAlign: 'center', margin: '20px 0' }}>\n          <Spin />\n        </div>\n      ) : (\n        segmentDetails?.length > 0 && (\n          <div style={{ marginTop: 0 }}>\n            <Typography.Title level={4} style={{ marginBottom: 16 }}>\n              Flights By Segment\n            </Typography.Title>\n            {getSegmentTables().map((segment, index) => (\n              <div key={segment.index} style={{ marginBottom: 16 }}>\n                <div style={{ \n                  display: 'flex', \n                  justifyContent: 'space-between', \n                  alignItems: 'center',\n                  marginBottom: 12 \n                }}>\n                  <Typography.Title level={5} style={{ margin: 0 }}>\n                    Segment {segment.index+1} ({segment.route}):\n                  </Typography.Title>\n                  <div>\n                    <Pagination\n                      size=\"small\"\n                      total={segment.total}\n                      pageSize={paginationState[segment.index]?.pageSize || paginationConfig.pageSize}\n                      current={paginationState[segment.index]?.page || 1}\n                      onChange={(page, pageSize) => handlePaginationChange(segment.index, page, pageSize)}\n                      showSizeChanger={true}\n                      showTotal={(total, range) => `${range[0]}-${range[1]} of ${total}`}\n                      style={{ \n                        display: 'inline-block',\n                        marginBottom: 0\n                      }}\n                    />\n                  </div>\n                </div>\n                <Table\n                  columns={columns}\n                  dataSource={segment.flights}\n                  pagination={false}\n                  size=\"small\"\n                  onChange={(pagination, filters, sorter) => \n                    handleTableChange(segment.index, pagination, filters, sorter)\n                  }\n                />\n                \n                {/* Add layover duration if there's a next segment and flights are selected */}\n                {index < getSegmentTables().length - 1 && (\n                  <div style={{ \n                    padding: '0px',\n                    margin: '16px',\n                    textAlign: 'center',\n                    fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\n                  }}>\n                    <Typography.Text strong>\n                      {(() => {\n                        const currentSegmentFlights = selectedFlights[segment.index];\n                        const nextSegmentFlights = selectedFlights[segment.index + 1];\n                        \n                        if (!currentSegmentFlights?.[0] || !nextSegmentFlights?.[0]) {\n                          return 'Select flights to see connection time';\n                        }\n\n                        const currentFlight = currentSegmentFlights[0];\n                        const nextFlight = nextSegmentFlights[0];\n                        \n                        const arrivalTime = dayjs(currentFlight.ArrivesAt);\n                        const departureTime = dayjs(nextFlight.DepartsAt);\n                        const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n                        \n                        // If layover is more than 24 hours, show as stopover\n                        if (layoverMinutes >= 24 * 60) {\n                          const days = Math.floor(layoverMinutes / (24 * 60));\n                          const remainingHours = Math.floor((layoverMinutes % (24 * 60)) / 60);\n                          const remainingMinutes = layoverMinutes % 60;\n                          \n                          return `Stopover duration: ${days} day${days > 1 ? 's' : ''} ${remainingHours}h ${remainingMinutes}m`;\n                        } else {\n                          // Regular layover display\n                          const hours = Math.floor(layoverMinutes / 60);\n                          const minutes = layoverMinutes % 60;\n                          return `Layover duration: ${hours}h ${minutes}m`;\n                        }\n                      })()}\n                    </Typography.Text>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )\n      )}\n\n      {/* Journey Summary Table - only rendered when there are selected flights */}\n      <div style={{ marginTop: 24, display: Object.keys(selectedFlights).length > 0 ? 'block' : 'none' }}>\n        <Typography.Title level={4}>Journey Summary</Typography.Title>\n        <Table\n          columns={[\n            {\n              title: 'From',\n              dataIndex: 'from',\n              key: 'from',\n            },\n            {\n              title: 'To',\n              dataIndex: 'to',\n              key: 'to',\n            },\n            {\n              title: 'Airlines',\n              dataIndex: 'airlines',\n              key: 'airlines',\n              render: (airlinesList) => {\n                // More thorough safety checks\n                if (!airlinesList || airlinesList === '-') return '-';\n                \n                try {\n                  const airlineArray = Array.isArray(airlinesList) ? airlinesList : airlinesList.split(', ');\n                  \n                  return (\n                    <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\n                      {airlineArray.map((airlineName, index) => {\n                        if (!airlineName) return null;\n                        \n                        const airline = airlines.find(a => \n                          airlineName.startsWith(a.label?.replace(` (${a.value})`, ''))\n                        );\n                        const airlineCode = airline?.value;\n                        \n                        return (\n                          <div key={`${airlineCode}-${index}`} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                            {airlineCode && (\n                              <img \n                                src={`${process.env.PUBLIC_URL}/${airlineCode}.png`}\n                                alt={airlineCode}\n                                style={{ \n                                  width: '24px', \n                                  height: '24px',\n                                  objectFit: 'contain',\n                                  borderRadius: '4px'\n                                }} \n                                onError={(e) => {\n                                  e.target.style.display = 'none';\n                                }}\n                              />\n                            )}\n                            {airlineName}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  );\n                } catch (error) {\n                  console.error('Error rendering airlines:', error);\n                  return '-';\n                }\n              },\n            },\n            {\n              title: 'Duration',\n              dataIndex: 'duration',\n              key: 'duration',\n            },\n            {\n              title: 'Departs',\n              dataIndex: 'departs',\n              key: 'departs',\n            },\n            {\n              title: 'Arrives',\n              dataIndex: 'arrives',\n              key: 'arrives',\n            },\n            {\n              title: 'Economy Price',\n              dataIndex: 'economyPrice',\n              key: 'economyPrice',\n              onCell: (_, index) => ({\n                rowSpan: index === 0 ? 2 : 0, // Show only in first row\n              }),\n            },\n            {\n              title: 'Business Price (Max %)',\n              dataIndex: 'businessPrice',\n              key: 'businessPrice',\n              onCell: (_, index) => ({\n                rowSpan: index === 0 ? 2 : 0, // Show only in first row\n              }),\n              render: (text) => {\n                if (!text || text === 'N/A') return text;\n                try {\n                  const [price, percentage] = text.split(' (');\n                  if (!percentage) return text;\n                  return `${price} (${percentage}`;\n                } catch (error) {\n                  return text;\n                }\n              }\n            },\n            {\n              title: 'First Price (Max %)',\n              dataIndex: 'firstPrice',\n              key: 'firstPrice',\n              onCell: (_, index) => ({\n                rowSpan: index === 0 ? 2 : 0, // Show only in first row\n              }),\n              render: (text) => {\n                if (!text || text === 'N/A') return text;\n                try {\n                  const [price, percentage] = text.split(' (');\n                  if (!percentage) return text;\n                  return `${price} (${percentage}`;\n                } catch (error) {\n                  return text;\n                }\n              }\n            },\n          ]}\n          dataSource={useMemo(() => {\n            try {\n              if (Object.keys(selectedFlights).length === 0) return [];\n              \n              const segments = Object.keys(selectedFlights).map(Number).sort((a, b) => a - b);\n              if (segments.length === 0) return [];\n              \n              const firstSegmentIndex = Math.min(...segments);\n              const lastSegmentIndex = Math.max(...segments);\n              \n              // Helper function to get airlines string\n              const getAirlinesString = (segmentRange) => {\n                try {\n                  const airlineSet = new Set(\n                    segmentRange\n                      .flatMap(i => selectedFlights[i]?.map(f => f.airlines))\n                      .filter(Boolean)\n                  );\n                  return Array.from(airlineSet).join(', ') || '-';\n                } catch (error) {\n                  console.error('Error getting airlines string:', error);\n                  return '-';\n                }\n              };\n\n              // Removed debug logging to prevent console spam\n              \n              // Calculate prices for the ENTIRE journey (origin to final destination)\n              const calculatePrices = (hasStopover) => {\n                try {\n                  // Get origin and destination airports\n                  const originAirport = airports.find(a => a.IATA === selectedFlights[firstSegmentIndex]?.[0]?.from);\n                  const destAirport = airports.find(a => a.IATA === selectedFlights[lastSegmentIndex]?.[0]?.to);\n                  \n                  if (!originAirport || !destAirport) return {\n                    economyPrice: '-',\n                    businessPrice: '-',\n                    firstPrice: '-'\n                  };\n\n                  // Calculate total distance and cabin class distances\n                  let totalDistance = 0;\n                  let businessDistance = 0;\n                  let firstDistance = 0;\n                  let businessOnlyDistance = 0;  // New: for segments with only business (no first)\n\n                  Object.entries(selectedFlights).forEach(([_, flights]) => {\n                    flights.forEach(flight => {\n                      const distance = parseInt(flight.distance || 0);\n                      totalDistance += distance;\n                      \n                      // For Business Price: Include all segments with business class\n                      if (flight.business) businessDistance += distance;\n                      \n                      // For First Price: Only count business from segments without first\n                      if (flight.business && !flight.first) businessOnlyDistance += distance;\n                      if (flight.first) firstDistance += distance;\n                    });\n                  });\n\n                  // Find matching price in pricing data\n                  const pricing = pricingData.find(p => \n                    p[\"From Region\"] === originAirport.Zone &&\n                    p[\"To Region\"] === destAirport.Zone &&\n                    totalDistance >= p[\"Min Distance\"] &&\n                    totalDistance <= p[\"Max Distance\"]\n                  );\n\n                  if (!pricing) return {\n                    economyPrice: '-',\n                    businessPrice: '-',\n                    firstPrice: '-'\n                  };\n\n                  // Calculate percentages\n                  const businessPercentage = Math.round((businessDistance / totalDistance) * 100);\n                  const firstPercentage = Math.round((firstDistance / totalDistance) * 100);\n                  const businessOnlyPercentage = Math.round((businessOnlyDistance / totalDistance) * 100);\n\n                  // Add stopover fee if applicable\n                  const stopoverExtra = hasStopover ? 5000 : 0;\n\n                  return {\n                    economyPrice: pricing.Economy ? (pricing.Economy + stopoverExtra).toLocaleString() : '-',\n                    // If business percentage is 0, show \"-\" instead of price\n                    businessPrice: pricing.Business && businessPercentage > 0 ? \n                      `${(pricing.Business + stopoverExtra).toLocaleString()} (${businessPercentage}% J)` : '-',\n                    // If first percentage is 0, show \"-\" instead of price\n                    firstPrice: pricing.First && firstPercentage > 0 ? \n                      `${(pricing.First + stopoverExtra).toLocaleString()} (${\n                        firstPercentage > 0 && businessOnlyPercentage > 0 \n                          ? `${firstPercentage}% F, ${businessOnlyPercentage}% J`\n                          : firstPercentage > 0 \n                            ? `${firstPercentage}% F`\n                            : '0%'\n                      })` : '-'\n                  };\n                } catch (error) {\n                  console.error('Error calculating prices:', error);\n                  return {\n                    economyPrice: '-',\n                    businessPrice: '-',\n                    firstPrice: '-'\n                  };\n                }\n              };\n\n              // Find stopover point\n              let stopoverIndex = null;\n              for (let i = firstSegmentIndex; i < lastSegmentIndex; i++) {\n                const currentFlight = selectedFlights[i]?.[0];\n                const nextFlight = selectedFlights[i + 1]?.[0];\n                \n                if (currentFlight && nextFlight) {\n                  const arrivalTime = dayjs(currentFlight.ArrivesAt);\n                  const departureTime = dayjs(nextFlight.DepartsAt);\n                  const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n                  \n                  if (layoverMinutes >= 24 * 60) {\n                    stopoverIndex = i;\n                    break;\n                  }\n                }\n              }\n\n              // Calculate prices once for the entire journey\n              const prices = calculatePrices(stopoverIndex !== null);\n\n              // Calculate total journey duration by summing segment durations and layovers\n              const totalDuration = calculateTotalDuration(segments);\n\n              // If no stopover found, return single row\n              if (stopoverIndex === null) {\n                return [{\n                  key: '1',\n                  from: selectedFlights[firstSegmentIndex]?.[0]?.from || '-',\n                  to: selectedFlights[lastSegmentIndex]?.[0]?.to || '-',\n                  airlines: getAirlinesString(segments),\n                  duration: totalDuration,\n                  departs: dayjs(selectedFlights[firstSegmentIndex]?.[0]?.DepartsAt).format('HH:mm MM-DD'),\n                  arrives: dayjs(selectedFlights[lastSegmentIndex]?.[0]?.ArrivesAt).format('HH:mm MM-DD'),\n                  ...prices\n                }];\n              }\n\n              // Split journey at stopover with merged price cells\n              return [\n                {\n                  key: '1',\n                  from: selectedFlights[firstSegmentIndex]?.[0]?.from || '-',\n                  to: selectedFlights[stopoverIndex]?.[0]?.to || '-',\n                  airlines: getAirlinesString(segments.filter(i => i <= stopoverIndex)),\n                  duration: calculateTotalDuration(segments.filter(i => i <= stopoverIndex)),\n                  departs: dayjs(selectedFlights[firstSegmentIndex]?.[0]?.DepartsAt).format('HH:mm MM-DD'),\n                  arrives: dayjs(selectedFlights[stopoverIndex]?.[0]?.ArrivesAt).format('HH:mm MM-DD'),\n                  ...prices  // Same prices for first row\n                },\n                {\n                  key: '2',\n                  from: selectedFlights[stopoverIndex + 1]?.[0]?.from || '-',\n                  to: selectedFlights[lastSegmentIndex]?.[0]?.to || '-',\n                  airlines: getAirlinesString(segments.filter(i => i > stopoverIndex)),\n                  duration: calculateTotalDuration(segments.filter(i => i > stopoverIndex)),\n                  departs: dayjs(selectedFlights[stopoverIndex + 1]?.[0]?.DepartsAt).format('HH:mm MM-DD'),\n                  arrives: dayjs(selectedFlights[lastSegmentIndex]?.[0]?.ArrivesAt).format('HH:mm MM-DD'),\n                  economyPrice: null,  // Will be hidden by rowSpan\n                  businessPrice: null, // Will be hidden by rowSpan\n                  firstPrice: null     // Will be hidden by rowSpan\n                }\n              ];\n            } catch (error) {\n              console.error('Error generating dataSource:', error);\n              return [];\n            }\n          }, [selectedFlights, pricingData])}\n          pagination={false}\n          size=\"small\"\n        />\n        \n        {/* Route Validation - always rendered but may be empty */}\n        <div style={{ marginTop: 12, fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace' }}>\n          <Typography.Text>\n            {useMemo(() => {\n              if (Object.keys(selectedFlights).length === 0) return null;\n              \n              try {\n                const segments = Object.keys(selectedFlights).map(Number);\n                if (segments.length === 0) return null;\n                \n                const firstSegmentIndex = Math.min(...segments);\n                const lastSegmentIndex = Math.max(...segments);\n                const originAirport = airports.find(a => a.IATA === selectedFlights[firstSegmentIndex]?.[0]?.from);\n                const destAirport = airports.find(a => a.IATA === selectedFlights[lastSegmentIndex]?.[0]?.to);\n\n                if (!originAirport || !destAirport) return 'Unable to validate route: airport data missing';\n\n                // Haversine formula\n                const R = 3959; // Earth's radius in miles\n                const lat1 = originAirport.Latitude * Math.PI / 180;\n                const lat2 = destAirport.Latitude * Math.PI / 180;\n                const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n                const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n\n                const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                          Math.cos(lat1) * Math.cos(lat2) *\n                          Math.sin(dLon/2) * Math.sin(dLon/2);\n                \n                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n                const directDistance = Math.round(R * c);\n\n                // Calculate total segment distance\n                let totalSegmentDistance = 0;\n                Object.values(selectedFlights).forEach(flights => {\n                  flights.forEach(flight => {\n                    totalSegmentDistance += parseInt(flight.distance || 0);\n                  });\n                });\n\n                const isValid = totalSegmentDistance <= (2 * directDistance);\n\n                return (\n                  <>\n                    <div style={{ \n                      marginTop: 8,\n                      fontSize: '16px',\n                      fontWeight: 'bold',\n                      color: isValid ? '#52c41a' : '#f5222d',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      gap: '8px',\n                      width: '100%'\n                    }}>\n                      {isValid ? (\n                        <>\n                          <span>✓</span>\n                          <span>ROUTING VALIDATED</span>\n                        </>\n                      ) : (\n                        <>\n                          <span>✗</span>\n                          <span>THIS ROUTING IS INVALID</span>\n                        </>\n                      )}\n                    </div>\n                  </>\n                );\n              } catch (error) {\n                console.error('Error in route validation:', error);\n                return null;\n              }\n            }, [selectedFlights, airports])}\n          </Typography.Text>\n        </div>\n      </div>\n\n      <style jsx>{`\n        :global(.ant-table) {\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n        }\n      `}</style>\n    </Modal>\n  );\n};\n\n// End of modal component\n\nexport default FlightDetailsModal; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}