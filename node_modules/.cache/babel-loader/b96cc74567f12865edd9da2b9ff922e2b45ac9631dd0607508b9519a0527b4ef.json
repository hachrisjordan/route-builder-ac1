{"ast":null,"code":"import dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\ndayjs.extend(utc);\ndayjs.extend(timezone);\nexport const calculateTimeWindow = (prevSegment, from, to, baseDate) => {\n  if (!prevSegment) {\n    return {\n      start: dayjs(baseDate).startOf('day'),\n      end: dayjs(baseDate).endOf('day')\n    };\n  }\n\n  // Get the last flight's arrival time from previous segment\n  const lastFlight = prevSegment.flights[prevSegment.flights.length - 1];\n  const minConnectionTime = getMinConnectionTime(from);\n  const earliestDeparture = dayjs(lastFlight.arrivalTime).add(minConnectionTime, 'minutes');\n  return {\n    start: earliestDeparture,\n    end: earliestDeparture.add(24, 'hours')\n  };\n};\nexport const getMinConnectionTime = airport => {\n  // Minimum connection times for different airports\n  const connectionTimes = {\n    'JFK': 90,\n    'LHR': 120,\n    'CDG': 90,\n    'DXB': 75,\n    // Add more airports as needed\n    'default': 60\n  };\n  return connectionTimes[airport] || connectionTimes.default;\n};\nexport const isValidConnection = (arrival, departure, airport) => {\n  const minConnectionTime = getMinConnectionTime(airport);\n  const connectionTime = dayjs(departure).diff(dayjs(arrival), 'minute');\n  return connectionTime >= minConnectionTime;\n};\nexport const calculateTotalDuration = segments => {\n  if (!segments || segments.length === 0) return 0;\n  const firstDeparture = dayjs(segments[0].departureTime);\n  const lastArrival = dayjs(segments[segments.length - 1].arrivalTime);\n  return lastArrival.diff(firstDeparture, 'minute');\n};\nexport const formatTotalDuration = minutes => {\n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  return `${hours}h ${mins}m`;\n};","map":{"version":3,"names":["dayjs","utc","timezone","extend","calculateTimeWindow","prevSegment","from","to","baseDate","start","startOf","end","endOf","lastFlight","flights","length","minConnectionTime","getMinConnectionTime","earliestDeparture","arrivalTime","add","airport","connectionTimes","default","isValidConnection","arrival","departure","connectionTime","diff","calculateTotalDuration","segments","firstDeparture","departureTime","lastArrival","formatTotalDuration","minutes","hours","Math","floor","mins"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/utils/timeCalculations.js"],"sourcesContent":["import dayjs from 'dayjs';\r\nimport utc from 'dayjs/plugin/utc';\r\nimport timezone from 'dayjs/plugin/timezone';\r\n\r\ndayjs.extend(utc);\r\ndayjs.extend(timezone);\r\n\r\nexport const calculateTimeWindow = (prevSegment, from, to, baseDate) => {\r\n  if (!prevSegment) {\r\n    return {\r\n      start: dayjs(baseDate).startOf('day'),\r\n      end: dayjs(baseDate).endOf('day')\r\n    };\r\n  }\r\n\r\n  // Get the last flight's arrival time from previous segment\r\n  const lastFlight = prevSegment.flights[prevSegment.flights.length - 1];\r\n  const minConnectionTime = getMinConnectionTime(from);\r\n  \r\n  const earliestDeparture = dayjs(lastFlight.arrivalTime)\r\n    .add(minConnectionTime, 'minutes');\r\n\r\n  return {\r\n    start: earliestDeparture,\r\n    end: earliestDeparture.add(24, 'hours')\r\n  };\r\n};\r\n\r\nexport const getMinConnectionTime = (airport) => {\r\n  // Minimum connection times for different airports\r\n  const connectionTimes = {\r\n    'JFK': 90,\r\n    'LHR': 120,\r\n    'CDG': 90,\r\n    'DXB': 75,\r\n    // Add more airports as needed\r\n    'default': 60\r\n  };\r\n\r\n  return connectionTimes[airport] || connectionTimes.default;\r\n};\r\n\r\nexport const isValidConnection = (arrival, departure, airport) => {\r\n  const minConnectionTime = getMinConnectionTime(airport);\r\n  const connectionTime = dayjs(departure).diff(dayjs(arrival), 'minute');\r\n  return connectionTime >= minConnectionTime;\r\n};\r\n\r\nexport const calculateTotalDuration = (segments) => {\r\n  if (!segments || segments.length === 0) return 0;\r\n\r\n  const firstDeparture = dayjs(segments[0].departureTime);\r\n  const lastArrival = dayjs(segments[segments.length - 1].arrivalTime);\r\n  \r\n  return lastArrival.diff(firstDeparture, 'minute');\r\n};\r\n\r\nexport const formatTotalDuration = (minutes) => {\r\n  const hours = Math.floor(minutes / 60);\r\n  const mins = minutes % 60;\r\n  return `${hours}h ${mins}m`;\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,kBAAkB;AAClC,OAAOC,QAAQ,MAAM,uBAAuB;AAE5CF,KAAK,CAACG,MAAM,CAACF,GAAG,CAAC;AACjBD,KAAK,CAACG,MAAM,CAACD,QAAQ,CAAC;AAEtB,OAAO,MAAME,mBAAmB,GAAGA,CAACC,WAAW,EAAEC,IAAI,EAAEC,EAAE,EAAEC,QAAQ,KAAK;EACtE,IAAI,CAACH,WAAW,EAAE;IAChB,OAAO;MACLI,KAAK,EAAET,KAAK,CAACQ,QAAQ,CAAC,CAACE,OAAO,CAAC,KAAK,CAAC;MACrCC,GAAG,EAAEX,KAAK,CAACQ,QAAQ,CAAC,CAACI,KAAK,CAAC,KAAK;IAClC,CAAC;EACH;;EAEA;EACA,MAAMC,UAAU,GAAGR,WAAW,CAACS,OAAO,CAACT,WAAW,CAACS,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC;EACtE,MAAMC,iBAAiB,GAAGC,oBAAoB,CAACX,IAAI,CAAC;EAEpD,MAAMY,iBAAiB,GAAGlB,KAAK,CAACa,UAAU,CAACM,WAAW,CAAC,CACpDC,GAAG,CAACJ,iBAAiB,EAAE,SAAS,CAAC;EAEpC,OAAO;IACLP,KAAK,EAAES,iBAAiB;IACxBP,GAAG,EAAEO,iBAAiB,CAACE,GAAG,CAAC,EAAE,EAAE,OAAO;EACxC,CAAC;AACH,CAAC;AAED,OAAO,MAAMH,oBAAoB,GAAII,OAAO,IAAK;EAC/C;EACA,MAAMC,eAAe,GAAG;IACtB,KAAK,EAAE,EAAE;IACT,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,EAAE;IACT,KAAK,EAAE,EAAE;IACT;IACA,SAAS,EAAE;EACb,CAAC;EAED,OAAOA,eAAe,CAACD,OAAO,CAAC,IAAIC,eAAe,CAACC,OAAO;AAC5D,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,OAAO,EAAEC,SAAS,EAAEL,OAAO,KAAK;EAChE,MAAML,iBAAiB,GAAGC,oBAAoB,CAACI,OAAO,CAAC;EACvD,MAAMM,cAAc,GAAG3B,KAAK,CAAC0B,SAAS,CAAC,CAACE,IAAI,CAAC5B,KAAK,CAACyB,OAAO,CAAC,EAAE,QAAQ,CAAC;EACtE,OAAOE,cAAc,IAAIX,iBAAiB;AAC5C,CAAC;AAED,OAAO,MAAMa,sBAAsB,GAAIC,QAAQ,IAAK;EAClD,IAAI,CAACA,QAAQ,IAAIA,QAAQ,CAACf,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EAEhD,MAAMgB,cAAc,GAAG/B,KAAK,CAAC8B,QAAQ,CAAC,CAAC,CAAC,CAACE,aAAa,CAAC;EACvD,MAAMC,WAAW,GAAGjC,KAAK,CAAC8B,QAAQ,CAACA,QAAQ,CAACf,MAAM,GAAG,CAAC,CAAC,CAACI,WAAW,CAAC;EAEpE,OAAOc,WAAW,CAACL,IAAI,CAACG,cAAc,EAAE,QAAQ,CAAC;AACnD,CAAC;AAED,OAAO,MAAMG,mBAAmB,GAAIC,OAAO,IAAK;EAC9C,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;EACtC,MAAMI,IAAI,GAAGJ,OAAO,GAAG,EAAE;EACzB,OAAO,GAAGC,KAAK,KAAKG,IAAI,GAAG;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}