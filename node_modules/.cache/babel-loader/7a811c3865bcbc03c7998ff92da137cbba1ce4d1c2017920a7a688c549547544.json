{"ast":null,"code":"var _jsxFileName = \"/Users/hanguyen/Desktop/route-builder-ac/src/components/FlightSearch/SearchForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Select, InputNumber, Button, Card } from 'antd';\nimport { SearchOutlined, SwapOutlined } from '@ant-design/icons';\nimport { airports } from '../../data/airports';\nimport airlines from '../../data/airlines';\n\n// Helper function to parse search input\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst parseSearchInput = inputValue => {\n  if (!inputValue) return '';\n  try {\n    if (typeof inputValue === 'object' && inputValue !== null) {\n      if (inputValue._searchText) {\n        return String(inputValue._searchText).toLowerCase();\n      } else if (inputValue.input) {\n        return String(inputValue.input).toLowerCase();\n      } else if (inputValue.searchText) {\n        return String(inputValue.searchText).toLowerCase();\n      } else if (inputValue.value) {\n        return String(inputValue.value).toLowerCase();\n      } else if (inputValue.searchValue) {\n        return String(inputValue.searchValue).toLowerCase();\n      } else {\n        // Try to extract searchValue from JSON string\n        const str = String(inputValue);\n        if (str.startsWith('{') && str.includes('searchValue')) {\n          try {\n            const parsed = JSON.parse(str);\n            if (parsed.searchValue) {\n              return String(parsed.searchValue).toLowerCase();\n            }\n          } catch (e) {\n            // Parsing error, continue to fallback\n          }\n        }\n        // If we get here, we couldn't extract a searchValue\n        return '';\n      }\n    } else {\n      return String(inputValue || '').toLowerCase();\n    }\n  } catch (error) {\n    console.error('Error parsing input value:', error);\n    return '';\n  }\n};\nconst SearchForm = ({\n  onSearch,\n  isLoading,\n  errors\n}) => {\n  _s();\n  const [departure, setDeparture] = useState(null);\n  const [arrival, setArrival] = useState(null);\n  const [selectedAirlines, setSelectedAirlines] = useState([]);\n  const [maxSegments, setMaxSegments] = useState(4);\n\n  // Sort airlines alphabetically\n  const sortedAirlines = [...airlines].map(airline => ({\n    ...airline,\n    searchStr: `${airline.value} ${airline.label}`.toLowerCase()\n  })).sort((a, b) => a.label.localeCompare(b.label));\n\n  // Add debug logging to check initialization\n  console.log('SearchForm component initialized');\n  const airportSelectProps = {\n    showSearch: true,\n    allowClear: true,\n    suffixIcon: null,\n    options: airports.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`,\n      iata: airport.IATA,\n      name: airport.Name\n    })),\n    optionRender: option => {\n      // Extract the parts of the label\n      const iataCode = option.value;\n      const label = option.label;\n      const restOfLabel = label.substring(iataCode.length);\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: iataCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), restOfLabel]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this);\n    },\n    filterOption: (input, option) => {\n      console.log('AIRPORT filterOption called with input:', input);\n      if (!input) return true;\n\n      // Use the helper function to extract search text\n      const searchText = parseSearchInput(input);\n      const iata = String(option.value || '').toLowerCase();\n      const label = String(option.label || '').toLowerCase();\n\n      // Always include options where IATA matches, then name matches\n      return iata.includes(searchText) || label.includes(searchText);\n    },\n    filterSort: (optionA, optionB, inputValue) => {\n      // Handle case when inputValue is undefined or null\n      if (!inputValue) return String(optionA.value || '').localeCompare(String(optionB.value || ''));\n\n      // Use the helper function to extract input\n      const input = parseSearchInput(inputValue);\n\n      // Only log for 'ha' or 'h' searches\n      if (input === 'ha' || input === 'h') {\n        console.log(`Airport search for: \"${input}\"`);\n      }\n\n      // Get IATA codes\n      const iataA = String(optionA.value || '').toLowerCase();\n      const iataB = String(optionB.value || '').toLowerCase();\n\n      // SCORING SYSTEM - higher scores come first\n      let scoreA = 0;\n      let scoreB = 0;\n\n      // Priority 1 (Highest): IATA code exactly matches input\n      if (iataA === input) scoreA = 1000;\n      if (iataB === input) scoreB = 1000;\n\n      // Priority 2: IATA code starts with input\n      if (iataA.startsWith(input) && iataA !== input) scoreA = 500;\n      if (iataB.startsWith(input) && iataB !== input) scoreB = 500;\n\n      // Priority 3: IATA code contains input\n      if (iataA.includes(input) && !iataA.startsWith(input)) scoreA = 200;\n      if (iataB.includes(input) && !iataB.startsWith(input)) scoreB = 200;\n\n      // Priority 4: Label contains input - separated by giving a special score\n      // Now check if the labels contain the input\n      const labelA = String(optionA.label || '').toLowerCase();\n      const labelB = String(optionB.label || '').toLowerCase();\n      if (scoreA === 0 && labelA.includes(input)) scoreA = 10;\n      if (scoreB === 0 && labelB.includes(input)) scoreB = 10;\n\n      // Always log - for debugging\n      console.log(`★★★★ AIRPORT SEARCH: \"${input}\" comparing ${iataA}(${scoreA}) vs ${iataB}(${scoreB}) ★★★★`);\n\n      // Compare scores (higher score first)\n      if (scoreA !== scoreB) {\n        return scoreB - scoreA;\n      }\n\n      // If tied on score, sort alphabetically by IATA code\n      return String(iataA).localeCompare(String(iataB));\n    },\n    listHeight: 256,\n    virtual: true,\n    dropdownStyle: {\n      maxHeight: 400\n    }\n  };\n  const airlineSelectProps = {\n    showSearch: true,\n    allowClear: true,\n    optionRender: option => {\n      // Bold the airline code part\n      const airlineCode = option.value;\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: airlineCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), \" - \", option.label]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this);\n    },\n    filterOption: (input, option) => {\n      if (!input) return true;\n\n      // Extract search input from various possible formats\n      let searchText;\n      try {\n        if (typeof input === 'object' && input !== null) {\n          if (input._searchText) {\n            searchText = String(input._searchText).toLowerCase();\n          } else if (input.input) {\n            searchText = String(input.input).toLowerCase();\n          } else if (input.searchText) {\n            searchText = String(input.searchText).toLowerCase();\n          } else if (input.value) {\n            searchText = String(input.value).toLowerCase();\n          } else {\n            // Safely stringify the object\n            searchText = JSON.stringify(input).toLowerCase();\n          }\n        } else {\n          searchText = String(input).toLowerCase();\n        }\n      } catch (error) {\n        // Fallback in case of any error\n        searchText = '';\n        console.error('Error parsing input value:', error);\n      }\n      const code = String(option.value || '').toLowerCase();\n      const label = String(option.label || '').toLowerCase();\n      return code.includes(searchText) || label.includes(searchText);\n    },\n    filterSort: (optionA, optionB, inputValue) => {\n      // Handle case when inputValue is undefined or null\n      if (!inputValue) return String(optionA.value || '').localeCompare(String(optionB.value || ''));\n\n      // Extract search input from various possible formats\n      let input;\n      try {\n        if (typeof inputValue === 'object' && inputValue !== null) {\n          if (inputValue._searchText) {\n            input = String(inputValue._searchText).toLowerCase();\n          } else if (inputValue.input) {\n            input = String(inputValue.input).toLowerCase();\n          } else if (inputValue.searchText) {\n            input = String(inputValue.searchText).toLowerCase();\n          } else if (inputValue.value) {\n            input = String(inputValue.value).toLowerCase();\n          } else {\n            // Safely stringify the object\n            input = JSON.stringify(inputValue).toLowerCase();\n          }\n        } else {\n          input = String(inputValue || '').toLowerCase();\n        }\n      } catch (error) {\n        // Fallback in case of any error\n        input = '';\n        console.error('Error parsing input value:', error);\n      }\n\n      // Only log for specific searches\n      if (input === 'ha' || input === 'h') {\n        console.log(`Airline search for: \"${input}\"`);\n      }\n\n      // Get airline codes\n      const codeA = String(optionA.value || '').toLowerCase();\n      const codeB = String(optionB.value || '').toLowerCase();\n\n      // SCORING SYSTEM - higher scores come first\n      let scoreA = 0;\n      let scoreB = 0;\n\n      // Priority 1 (Highest): Airline code exactly matches input\n      if (codeA === input) scoreA = 1000;\n      if (codeB === input) scoreB = 1000;\n\n      // Priority 2: Airline code starts with input\n      if (codeA.startsWith(input) && codeA !== input) scoreA = 500;\n      if (codeB.startsWith(input) && codeB !== input) scoreB = 500;\n\n      // Priority 3: Airline code contains input\n      if (codeA.includes(input) && !codeA.startsWith(input)) scoreA = 200;\n      if (codeB.includes(input) && !codeB.startsWith(input)) scoreB = 200;\n\n      // Priority 4: Label contains input - separated by giving a special score\n      // Now check if the labels contain the input\n      const labelA = String(optionA.label || '').toLowerCase();\n      const labelB = String(optionB.label || '').toLowerCase();\n      if (scoreA === 0 && labelA.includes(input)) scoreA = 10;\n      if (scoreB === 0 && labelB.includes(input)) scoreB = 10;\n\n      // Always log for debugging\n      console.log(`★★★★ AIRLINE SEARCH: \"${input}\" comparing ${codeA}(${scoreA}) vs ${codeB}(${scoreB}) ★★★★`);\n\n      // Compare scores (higher score first)\n      if (scoreA !== scoreB) {\n        return scoreB - scoreA;\n      }\n\n      // If tied on score, sort alphabetically by airline code\n      return String(codeA).localeCompare(String(codeB));\n    },\n    listHeight: 400,\n    virtual: false,\n    menuItemSelectedIcon: null,\n    dropdownStyle: {\n      maxHeight: 400\n    }\n  };\n  const handleSubmit = () => {\n    console.log('Search submitted with departure:', departure, 'arrival:', arrival);\n    onSearch({\n      departure,\n      arrival,\n      selectedAirlines,\n      maxSegments\n    });\n  };\n\n  // Function to swap departure and arrival airports\n  const swapAirports = () => {\n    const temp = departure;\n    setDeparture(arrival);\n    setArrival(temp);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"search-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flight-search-element\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"element-label\",\n        children: \"Departure Airport: *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        ...airportSelectProps,\n        value: departure,\n        onChange: value => {\n          console.log('Departure airport changed to:', value);\n          setDeparture(value);\n        },\n        onSearch: text => console.log('★★★★ SEARCHING DEPARTURE FOR:', text, '★★★★'),\n        placeholder: \"Select departure airport...\",\n        className: \"airport-select\",\n        status: errors.departure ? 'error' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swap-button-container\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        icon: /*#__PURE__*/_jsxDEV(SwapOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 17\n        }, this),\n        onClick: swapAirports,\n        type: \"text\",\n        className: \"swap-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flight-search-element\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"element-label\",\n        children: \"Arrival Airport: *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        ...airportSelectProps,\n        value: arrival,\n        onChange: value => {\n          console.log('Arrival airport changed to:', value);\n          setArrival(value);\n        },\n        onSearch: text => console.log('★★★★ SEARCHING ARRIVAL FOR:', text, '★★★★'),\n        placeholder: \"Select arrival airport...\",\n        className: \"airport-select\",\n        status: errors.arrival ? 'error' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flight-search-element\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"element-label\",\n        children: \"Airlines Excluded:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        ...airlineSelectProps,\n        mode: \"multiple\",\n        value: selectedAirlines,\n        onChange: setSelectedAirlines,\n        options: sortedAirlines,\n        placeholder: \"Select airlines...\",\n        className: \"airline-select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"segments-element\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"element-label\",\n        children: \"Maximum Segments *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputNumber, {\n        min: 1,\n        max: 5,\n        value: maxSegments,\n        onChange: setMaxSegments,\n        status: errors.maxSegments ? 'error' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      icon: /*#__PURE__*/_jsxDEV(SearchOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 15\n      }, this),\n      onClick: handleSubmit,\n      loading: isLoading,\n      className: \"search-button\",\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchForm, \"rj7xvfnG1MRr4orQHUgEvkQ3l1c=\");\n_c = SearchForm;\nexport default SearchForm;\nvar _c;\n$RefreshReg$(_c, \"SearchForm\");","map":{"version":3,"names":["React","useState","Select","InputNumber","Button","Card","SearchOutlined","SwapOutlined","airports","airlines","jsxDEV","_jsxDEV","parseSearchInput","inputValue","_searchText","String","toLowerCase","input","searchText","value","searchValue","str","startsWith","includes","parsed","JSON","parse","e","error","console","SearchForm","onSearch","isLoading","errors","_s","departure","setDeparture","arrival","setArrival","selectedAirlines","setSelectedAirlines","maxSegments","setMaxSegments","sortedAirlines","map","airline","searchStr","label","sort","a","b","localeCompare","log","airportSelectProps","showSearch","allowClear","suffixIcon","options","airport","IATA","Name","Country","iata","name","optionRender","option","iataCode","restOfLabel","substring","length","children","style","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","filterOption","filterSort","optionA","optionB","iataA","iataB","scoreA","scoreB","labelA","labelB","listHeight","virtual","dropdownStyle","maxHeight","airlineSelectProps","airlineCode","stringify","code","codeA","codeB","menuItemSelectedIcon","handleSubmit","swapAirports","temp","className","onChange","text","placeholder","status","icon","onClick","type","mode","min","max","loading","_c","$RefreshReg$"],"sources":["/Users/hanguyen/Desktop/route-builder-ac/src/components/FlightSearch/SearchForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Select, InputNumber, Button, Card } from 'antd';\nimport { SearchOutlined, SwapOutlined } from '@ant-design/icons';\nimport { airports } from '../../data/airports';\nimport airlines from '../../data/airlines';\n\n// Helper function to parse search input\nconst parseSearchInput = (inputValue) => {\n  if (!inputValue) return '';\n  \n  try {\n    if (typeof inputValue === 'object' && inputValue !== null) {\n      if (inputValue._searchText) {\n        return String(inputValue._searchText).toLowerCase();\n      } else if (inputValue.input) {\n        return String(inputValue.input).toLowerCase();\n      } else if (inputValue.searchText) {\n        return String(inputValue.searchText).toLowerCase();\n      } else if (inputValue.value) {\n        return String(inputValue.value).toLowerCase();\n      } else if (inputValue.searchValue) {\n        return String(inputValue.searchValue).toLowerCase();\n      } else {\n        // Try to extract searchValue from JSON string\n        const str = String(inputValue);\n        if (str.startsWith('{') && str.includes('searchValue')) {\n          try {\n            const parsed = JSON.parse(str);\n            if (parsed.searchValue) {\n              return String(parsed.searchValue).toLowerCase();\n            }\n          } catch (e) {\n            // Parsing error, continue to fallback\n          }\n        }\n        // If we get here, we couldn't extract a searchValue\n        return '';\n      }\n    } else {\n      return String(inputValue || '').toLowerCase();\n    }\n  } catch (error) {\n    console.error('Error parsing input value:', error);\n    return '';\n  }\n};\n\nconst SearchForm = ({ onSearch, isLoading, errors }) => {\n  const [departure, setDeparture] = useState(null);\n  const [arrival, setArrival] = useState(null);\n  const [selectedAirlines, setSelectedAirlines] = useState([]);\n  const [maxSegments, setMaxSegments] = useState(4);\n\n  // Sort airlines alphabetically\n  const sortedAirlines = [...airlines]\n    .map(airline => ({\n      ...airline,\n      searchStr: `${airline.value} ${airline.label}`.toLowerCase()\n    }))\n    .sort((a, b) => a.label.localeCompare(b.label));\n\n  // Add debug logging to check initialization\n  console.log('SearchForm component initialized');\n  \n  const airportSelectProps = {\n    showSearch: true,\n    allowClear: true,\n    suffixIcon: null,\n    options: airports.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`,\n      iata: airport.IATA,\n      name: airport.Name\n    })),\n    optionRender: (option) => {\n      // Extract the parts of the label\n      const iataCode = option.value;\n      const label = option.label;\n      const restOfLabel = label.substring(iataCode.length);\n      \n      return (\n        <span>\n          <span style={{ fontWeight: 'bold' }}>{iataCode}</span>\n          {restOfLabel}\n        </span>\n      );\n    },\n    filterOption: (input, option) => {\n      console.log('AIRPORT filterOption called with input:', input);\n      if (!input) return true;\n      \n      // Use the helper function to extract search text\n      const searchText = parseSearchInput(input);\n      \n      const iata = String(option.value || '').toLowerCase();\n      const label = String(option.label || '').toLowerCase();\n      \n      // Always include options where IATA matches, then name matches\n      return iata.includes(searchText) || label.includes(searchText);\n    },\n    filterSort: (optionA, optionB, inputValue) => {\n      // Handle case when inputValue is undefined or null\n      if (!inputValue) return String(optionA.value || '').localeCompare(String(optionB.value || ''));\n      \n      // Use the helper function to extract input\n      const input = parseSearchInput(inputValue);\n      \n      // Only log for 'ha' or 'h' searches\n      if (input === 'ha' || input === 'h') {\n        console.log(`Airport search for: \"${input}\"`);\n      }\n      \n      // Get IATA codes\n      const iataA = String(optionA.value || '').toLowerCase();\n      const iataB = String(optionB.value || '').toLowerCase();\n      \n      // SCORING SYSTEM - higher scores come first\n      let scoreA = 0;\n      let scoreB = 0;\n      \n      // Priority 1 (Highest): IATA code exactly matches input\n      if (iataA === input) scoreA = 1000;\n      if (iataB === input) scoreB = 1000;\n      \n      // Priority 2: IATA code starts with input\n      if (iataA.startsWith(input) && iataA !== input) scoreA = 500;\n      if (iataB.startsWith(input) && iataB !== input) scoreB = 500;\n      \n      // Priority 3: IATA code contains input\n      if (iataA.includes(input) && !iataA.startsWith(input)) scoreA = 200;\n      if (iataB.includes(input) && !iataB.startsWith(input)) scoreB = 200;\n      \n      // Priority 4: Label contains input - separated by giving a special score\n      // Now check if the labels contain the input\n      const labelA = String(optionA.label || '').toLowerCase();\n      const labelB = String(optionB.label || '').toLowerCase();\n      \n      if (scoreA === 0 && labelA.includes(input)) scoreA = 10;\n      if (scoreB === 0 && labelB.includes(input)) scoreB = 10;\n      \n      // Always log - for debugging\n      console.log(`★★★★ AIRPORT SEARCH: \"${input}\" comparing ${iataA}(${scoreA}) vs ${iataB}(${scoreB}) ★★★★`);\n      \n      // Compare scores (higher score first)\n      if (scoreA !== scoreB) {\n        return scoreB - scoreA;\n      }\n      \n      // If tied on score, sort alphabetically by IATA code\n      return String(iataA).localeCompare(String(iataB));\n    },\n    listHeight: 256,\n    virtual: true,\n    dropdownStyle: { maxHeight: 400 }\n  };\n\n  const airlineSelectProps = {\n    showSearch: true,\n    allowClear: true,\n    optionRender: (option) => {\n      // Bold the airline code part\n      const airlineCode = option.value;\n      return (\n        <span>\n          <span style={{ fontWeight: 'bold' }}>{airlineCode}</span> - {option.label}\n        </span>\n      );\n    },\n    filterOption: (input, option) => {\n      if (!input) return true;\n      \n      // Extract search input from various possible formats\n      let searchText;\n      try {\n        if (typeof input === 'object' && input !== null) {\n          if (input._searchText) {\n            searchText = String(input._searchText).toLowerCase();\n          } else if (input.input) {\n            searchText = String(input.input).toLowerCase();\n          } else if (input.searchText) {\n            searchText = String(input.searchText).toLowerCase();\n          } else if (input.value) {\n            searchText = String(input.value).toLowerCase();\n          } else {\n            // Safely stringify the object\n            searchText = JSON.stringify(input).toLowerCase();\n          }\n        } else {\n          searchText = String(input).toLowerCase();\n        }\n      } catch (error) {\n        // Fallback in case of any error\n        searchText = '';\n        console.error('Error parsing input value:', error);\n      }\n      \n      const code = String(option.value || '').toLowerCase();\n      const label = String(option.label || '').toLowerCase();\n      \n      return code.includes(searchText) || label.includes(searchText);\n    },\n    filterSort: (optionA, optionB, inputValue) => {\n      // Handle case when inputValue is undefined or null\n      if (!inputValue) return String(optionA.value || '').localeCompare(String(optionB.value || ''));\n      \n      // Extract search input from various possible formats\n      let input;\n      try {\n        if (typeof inputValue === 'object' && inputValue !== null) {\n          if (inputValue._searchText) {\n            input = String(inputValue._searchText).toLowerCase();\n          } else if (inputValue.input) {\n            input = String(inputValue.input).toLowerCase();\n          } else if (inputValue.searchText) {\n            input = String(inputValue.searchText).toLowerCase();\n          } else if (inputValue.value) {\n            input = String(inputValue.value).toLowerCase();\n          } else {\n            // Safely stringify the object\n            input = JSON.stringify(inputValue).toLowerCase();\n          }\n        } else {\n          input = String(inputValue || '').toLowerCase();\n        }\n      } catch (error) {\n        // Fallback in case of any error\n        input = '';\n        console.error('Error parsing input value:', error);\n      }\n      \n      // Only log for specific searches\n      if (input === 'ha' || input === 'h') {\n        console.log(`Airline search for: \"${input}\"`);\n      }\n      \n      // Get airline codes\n      const codeA = String(optionA.value || '').toLowerCase();\n      const codeB = String(optionB.value || '').toLowerCase();\n      \n      // SCORING SYSTEM - higher scores come first\n      let scoreA = 0;\n      let scoreB = 0;\n      \n      // Priority 1 (Highest): Airline code exactly matches input\n      if (codeA === input) scoreA = 1000;\n      if (codeB === input) scoreB = 1000;\n      \n      // Priority 2: Airline code starts with input\n      if (codeA.startsWith(input) && codeA !== input) scoreA = 500;\n      if (codeB.startsWith(input) && codeB !== input) scoreB = 500;\n      \n      // Priority 3: Airline code contains input\n      if (codeA.includes(input) && !codeA.startsWith(input)) scoreA = 200;\n      if (codeB.includes(input) && !codeB.startsWith(input)) scoreB = 200;\n      \n      // Priority 4: Label contains input - separated by giving a special score\n      // Now check if the labels contain the input\n      const labelA = String(optionA.label || '').toLowerCase();\n      const labelB = String(optionB.label || '').toLowerCase();\n      \n      if (scoreA === 0 && labelA.includes(input)) scoreA = 10;\n      if (scoreB === 0 && labelB.includes(input)) scoreB = 10;\n      \n      // Always log for debugging\n      console.log(`★★★★ AIRLINE SEARCH: \"${input}\" comparing ${codeA}(${scoreA}) vs ${codeB}(${scoreB}) ★★★★`);\n      \n      // Compare scores (higher score first)\n      if (scoreA !== scoreB) {\n        return scoreB - scoreA;\n      }\n      \n      // If tied on score, sort alphabetically by airline code\n      return String(codeA).localeCompare(String(codeB));\n    },\n    listHeight: 400,\n    virtual: false,\n    menuItemSelectedIcon: null,\n    dropdownStyle: { maxHeight: 400 }\n  };\n\n  const handleSubmit = () => {\n    console.log('Search submitted with departure:', departure, 'arrival:', arrival);\n    onSearch({\n      departure,\n      arrival,\n      selectedAirlines,\n      maxSegments\n    });\n  };\n\n  // Function to swap departure and arrival airports\n  const swapAirports = () => {\n    const temp = departure;\n    setDeparture(arrival);\n    setArrival(temp);\n  };\n\n  return (\n    <Card className=\"search-form\">\n      <div className=\"flight-search-element\">\n        <div className=\"element-label\">Departure Airport: *</div>\n        <Select\n          {...airportSelectProps}\n          value={departure}\n          onChange={(value) => {\n            console.log('Departure airport changed to:', value);\n            setDeparture(value);\n          }}\n          onSearch={(text) => console.log('★★★★ SEARCHING DEPARTURE FOR:', text, '★★★★')}\n          placeholder=\"Select departure airport...\"\n          className=\"airport-select\"\n          status={errors.departure ? 'error' : ''}\n        />\n      </div>\n\n      <div className=\"swap-button-container\">\n        <Button \n          icon={<SwapOutlined />} \n          onClick={swapAirports}\n          type=\"text\"\n          className=\"swap-button\"\n        />\n      </div>\n\n      <div className=\"flight-search-element\">\n        <div className=\"element-label\">Arrival Airport: *</div>\n        <Select\n          {...airportSelectProps}\n          value={arrival}\n          onChange={(value) => {\n            console.log('Arrival airport changed to:', value);\n            setArrival(value);\n          }}\n          onSearch={(text) => console.log('★★★★ SEARCHING ARRIVAL FOR:', text, '★★★★')}\n          placeholder=\"Select arrival airport...\"\n          className=\"airport-select\"\n          status={errors.arrival ? 'error' : ''}\n        />\n      </div>\n\n      <div className=\"flight-search-element\">\n        <div className=\"element-label\">Airlines Excluded:</div>\n        <Select\n          {...airlineSelectProps}\n          mode=\"multiple\"\n          value={selectedAirlines}\n          onChange={setSelectedAirlines}\n          options={sortedAirlines}\n          placeholder=\"Select airlines...\"\n          className=\"airline-select\"\n        />\n      </div>\n\n      <div className=\"segments-element\">\n        <div className=\"element-label\">Maximum Segments *</div>\n        <InputNumber\n          min={1}\n          max={5}\n          value={maxSegments}\n          onChange={setMaxSegments}\n          status={errors.maxSegments ? 'error' : ''}\n        />\n      </div>\n\n      <Button \n        type=\"primary\"\n        icon={<SearchOutlined />}\n        onClick={handleSubmit}\n        loading={isLoading}\n        className=\"search-button\"\n      >\n        Search\n      </Button>\n\n      {/* Search form styles moved to global CSS */}\n    </Card>\n  );\n};\n\nexport default SearchForm; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}