{"ast":null,"code":"var _jsxFileName = \"/Users/hanguyen/Desktop/route-builder-ac/src/components/FlightSearch/FlightDetailsModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Modal, DatePicker, Input, Spin, Table, Button, Typography, Pagination, Space } from 'antd';\nimport dayjs from 'dayjs';\nimport { getSegmentColumns } from './segmentColumns';\nimport useFlightDetails from './hooks/useFlightDetails';\nimport FlightAvailabilityCalendar from './FlightAvailabilityCalendar';\nimport airlines from './data/airlines';\nimport { airports } from './data/airports';\nimport pricingData from './data/pricing.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  RangePicker\n} = DatePicker;\nconst FlightDetailsModal = ({\n  isVisible,\n  currentRoute,\n  onClose,\n  startDay\n}) => {\n  _s();\n  const [dateRangeError, setDateRangeError] = useState(false);\n  const {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n    setStartDate,\n    startDate\n  } = useFlightDetails(getSegmentColumns, startDay);\n\n  // Add pagination state with sorting\n  const [paginationState, setPaginationState] = useState({});\n\n  // Add pagination config\n  const paginationConfig = {\n    pageSize: 5,\n    showSizeChanger: true,\n    pageSizeOptions: ['5', '10', '20', '50']\n  };\n\n  // Function to handle pagination change\n  const handlePaginationChange = (segmentIndex, page, pageSize) => {\n    setPaginationState(prev => ({\n      ...prev,\n      [segmentIndex]: {\n        ...prev[segmentIndex],\n        // Preserve sorting if it exists\n        page,\n        pageSize\n      }\n    }));\n  };\n\n  // Function to get paginated data for a segment\n  const getPaginatedData = (flights, segmentIndex) => {\n    const {\n      page = 1,\n      pageSize = paginationConfig.pageSize\n    } = paginationState[segmentIndex] || {};\n    const start = (page - 1) * pageSize;\n    const end = start + pageSize;\n    return flights.slice(start, end);\n  };\n\n  // Clear data when modal closes\n  useEffect(() => {\n    if (!isVisible) {\n      resetDetails();\n      setDateRangeError(false);\n      setSelectedDates(null);\n      setApiKey('');\n    }\n  }, [isVisible]);\n  const handleOk = () => {\n    handleDateSearch(currentRoute);\n  };\n  const handleCancel = () => {\n    onClose();\n  };\n  const handleCalendarDateSelect = dateRange => {\n    setSelectedDates(dateRange);\n    setDateRangeError(false);\n  };\n  const handleCalendarSearchClick = (stopoverInfo, preserveCalendarData = false, clearSelections = false) => {\n    if (!selectedDates) {\n      setDateRangeError(true);\n      return;\n    }\n    setDateRangeError(false);\n\n    // Pass the clearSelections flag to handleDateSearch\n    handleDateSearch(currentRoute, stopoverInfo, preserveCalendarData, clearSelections);\n  };\n\n  // Function to group flights by segment with safety checks\n  const getSegmentTables = () => {\n    if (!segmentDetails || segmentDetails.length === 0) return [];\n\n    // Group flights by segment and filter out hidden flights\n    const segments = segmentDetails.reduce((acc, flight) => {\n      if (flight.hidden) return acc; // Skip hidden flights\n\n      if (!acc[flight.segmentIndex]) {\n        acc[flight.segmentIndex] = {\n          index: flight.segmentIndex,\n          route: `${flight.from}-${flight.to}`,\n          flights: []\n        };\n      }\n      acc[flight.segmentIndex].flights.push(flight);\n      return acc;\n    }, {});\n    return Object.entries(segments).sort(([a], [b]) => parseInt(a) - parseInt(b)).map(([segmentIndex, flights]) => {\n      var _flights$flights$, _flights$flights$2;\n      // Create a deep copy of flights to avoid modifying the original data\n      const flightsCopy = JSON.parse(JSON.stringify(flights.flights));\n\n      // Get pagination state for this segment\n      const {\n        page = 1,\n        pageSize = paginationConfig.pageSize,\n        sortField,\n        sortOrder\n      } = paginationState[segmentIndex] || {};\n\n      // Sort the entire dataset if sorting is applied\n      if (sortField && sortOrder) {\n        flightsCopy.sort((a, b) => {\n          let aValue, bValue;\n\n          // Special handling for cabin class columns\n          if (sortField === 'economy' || sortField === 'business' || sortField === 'first') {\n            // For cabin classes, true sorts before false\n            aValue = a[sortField] === true ? 1 : 0;\n            bValue = b[sortField] === true ? 1 : 0;\n          } else {\n            aValue = a[sortField];\n            bValue = b[sortField];\n          }\n\n          // Handle different data types\n          if (typeof aValue === 'string' && typeof bValue === 'string') {\n            return sortOrder === 'ascend' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n          } else if (sortField === 'duration') {\n            // For duration, convert to minutes if it's a string like \"2h 30m\"\n            if (typeof aValue === 'string' && aValue.includes('h')) {\n              const [aHours, aMinutes] = aValue.split('h').map(part => parseInt(part) || 0);\n              aValue = aHours * 60 + aMinutes;\n            }\n            if (typeof bValue === 'string' && bValue.includes('h')) {\n              const [bHours, bMinutes] = bValue.split('h').map(part => parseInt(part) || 0);\n              bValue = bHours * 60 + bMinutes;\n            }\n            return sortOrder === 'ascend' ? aValue - bValue : bValue - aValue;\n          } else {\n            // For numbers and other types\n            return sortOrder === 'ascend' ? aValue > bValue ? 1 : -1 : bValue > aValue ? 1 : -1;\n          }\n        });\n      }\n\n      // Calculate pagination\n      const start = (page - 1) * pageSize;\n      const end = start + pageSize;\n      const paginatedFlights = flightsCopy.slice(start, end);\n      return {\n        index: parseInt(segmentIndex),\n        route: `${((_flights$flights$ = flights.flights[0]) === null || _flights$flights$ === void 0 ? void 0 : _flights$flights$.from) || '?'}-${((_flights$flights$2 = flights.flights[0]) === null || _flights$flights$2 === void 0 ? void 0 : _flights$flights$2.to) || '?'}`,\n        flights: paginatedFlights,\n        allFlights: flightsCopy,\n        // Keep the full sorted dataset\n        total: flightsCopy.length\n      };\n    });\n  };\n\n  // Update the handleTableChange function to handle sorting\n  const handleTableChange = (segmentIndex, pagination, filters, sorter) => {\n    setPaginationState(prev => ({\n      ...prev,\n      [segmentIndex]: {\n        page: pagination.current,\n        pageSize: pagination.pageSize,\n        sortField: sorter.field,\n        sortOrder: sorter.order\n      }\n    }));\n  };\n\n  // Handle modal close with complete cleanup\n  const handleModalClose = () => {\n    // Reset all details including selected dates\n    resetDetails();\n\n    // Explicitly clear selected dates\n    setSelectedDates(null);\n\n    // Call the parent's onClose handler\n    onClose();\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: \"Flight Details\",\n    open: isVisible,\n    onCancel: handleModalClose,\n    footer: null,\n    width: 1600,\n    styles: {\n      body: {\n        padding: '12px',\n        maxHeight: '90vh',\n        overflow: 'auto'\n      },\n      content: {\n        maxWidth: '100vw'\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '8px',\n          marginBottom: 16\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '8px',\n            flex: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Enter your yapping password (Under Development)\",\n            value: apiKey,\n            onChange: e => setApiKey(e.target.value),\n            style: {\n              flex: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            placeholder: \"Calendar start on (optional)\",\n            onChange: date => setStartDate(date),\n            disabledDate: current => {\n              // Disable dates before today and after 330 days from today\n              const today = dayjs().startOf('day');\n              const maxDate = today.add(330, 'days');\n              return current && (current < today || current > maxDate);\n            },\n            style: {\n              width: 200,\n              marginLeft: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            disabled: !apiKey || !apiKey.toLowerCase().startsWith('pro'),\n            onClick: () => handleCalendarSearch(currentRoute),\n            children: \"Apply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), dateRangeError && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red'\n        },\n        children: \"Please select a date range in the calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlightAvailabilityCalendar, {\n      flightData: availabilityData,\n      currentRoute: currentRoute,\n      onDateRangeSelect: handleCalendarDateSelect,\n      selectedRange: selectedDates,\n      onSearch: handleCalendarSearchClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), isLoadingSegments ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        margin: '20px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }, this) : (segmentDetails === null || segmentDetails === void 0 ? void 0 : segmentDetails.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n        level: 4,\n        style: {\n          marginBottom: 16\n        },\n        children: \"Flights By Segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 13\n      }, this), getSegmentTables().map((segment, index) => {\n        var _paginationState$segm, _paginationState$segm2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 16\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              marginBottom: 12\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n              level: 5,\n              style: {\n                margin: 0\n              },\n              children: [\"Segment \", segment.index + 1, \" (\", segment.route, \"):\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Pagination, {\n                size: \"small\",\n                total: segment.total,\n                pageSize: ((_paginationState$segm = paginationState[segment.index]) === null || _paginationState$segm === void 0 ? void 0 : _paginationState$segm.pageSize) || paginationConfig.pageSize,\n                current: ((_paginationState$segm2 = paginationState[segment.index]) === null || _paginationState$segm2 === void 0 ? void 0 : _paginationState$segm2.page) || 1,\n                onChange: (page, pageSize) => handlePaginationChange(segment.index, page, pageSize),\n                showSizeChanger: true,\n                showTotal: (total, range) => `${range[0]}-${range[1]} of ${total}`,\n                style: {\n                  display: 'inline-block',\n                  marginBottom: 0\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Table, {\n            columns: columns,\n            dataSource: segment.flights,\n            pagination: false,\n            size: \"small\",\n            onChange: (pagination, filters, sorter) => handleTableChange(segment.index, pagination, filters, sorter)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 17\n          }, this), index < getSegmentTables().length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: '0px',\n              margin: '16px',\n              textAlign: 'center',\n              fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography.Text, {\n              strong: true,\n              children: (() => {\n                const currentSegmentFlights = selectedFlights[segment.index];\n                const nextSegmentFlights = selectedFlights[segment.index + 1];\n                if (!(currentSegmentFlights !== null && currentSegmentFlights !== void 0 && currentSegmentFlights[0]) || !(nextSegmentFlights !== null && nextSegmentFlights !== void 0 && nextSegmentFlights[0])) {\n                  return 'Select flights to see connection time';\n                }\n                const currentFlight = currentSegmentFlights[0];\n                const nextFlight = nextSegmentFlights[0];\n                const arrivalTime = dayjs(currentFlight.ArrivesAt);\n                const departureTime = dayjs(nextFlight.DepartsAt);\n                const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n\n                // If layover is more than 24 hours, show as stopover\n                if (layoverMinutes >= 24 * 60) {\n                  const days = Math.floor(layoverMinutes / (24 * 60));\n                  const remainingHours = Math.floor(layoverMinutes % (24 * 60) / 60);\n                  const remainingMinutes = layoverMinutes % 60;\n                  return `Stopover duration: ${days} day${days > 1 ? 's' : ''} ${remainingHours}h ${remainingMinutes}m`;\n                } else {\n                  // Regular layover display\n                  const hours = Math.floor(layoverMinutes / 60);\n                  const minutes = layoverMinutes % 60;\n                  return `Layover duration: ${hours}h ${minutes}m`;\n                }\n              })()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 19\n          }, this)]\n        }, segment.index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }, this), Object.keys(selectedFlights).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 24\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n        level: 4,\n        children: \"Journey Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        columns: [{\n          title: 'From',\n          dataIndex: 'from',\n          key: 'from'\n        }, {\n          title: 'To',\n          dataIndex: 'to',\n          key: 'to'\n        }, {\n          title: 'Airlines',\n          dataIndex: 'airlines',\n          key: 'airlines',\n          render: airlinesList => {\n            // More thorough safety checks\n            if (!airlinesList || airlinesList === '-') return '-';\n            try {\n              const airlineArray = Array.isArray(airlinesList) ? airlinesList : airlinesList.split(', ');\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  flexDirection: 'column',\n                  gap: '4px'\n                },\n                children: airlineArray.map((airlineName, index) => {\n                  if (!airlineName) return null;\n                  const airline = airlines.find(a => {\n                    var _a$label;\n                    return airlineName.startsWith((_a$label = a.label) === null || _a$label === void 0 ? void 0 : _a$label.replace(` (${a.value})`, ''));\n                  });\n                  const airlineCode = airline === null || airline === void 0 ? void 0 : airline.value;\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: '8px'\n                    },\n                    children: [airlineCode && /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: `${process.env.PUBLIC_URL}/${airlineCode}.png`,\n                      alt: airlineCode,\n                      style: {\n                        width: '24px',\n                        height: '24px',\n                        objectFit: 'contain',\n                        borderRadius: '4px'\n                      },\n                      onError: e => {\n                        e.target.style.display = 'none';\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 402,\n                      columnNumber: 33\n                    }, this), airlineName]\n                  }, `${airlineCode}-${index}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 400,\n                    columnNumber: 29\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 23\n              }, this);\n            } catch (error) {\n              console.error('Error rendering airlines:', error);\n              return '-';\n            }\n          }\n        }, {\n          title: 'Duration',\n          dataIndex: 'duration',\n          key: 'duration'\n        }, {\n          title: 'Departs',\n          dataIndex: 'departs',\n          key: 'departs'\n        }, {\n          title: 'Arrives',\n          dataIndex: 'arrives',\n          key: 'arrives'\n        }, {\n          title: 'Economy Price',\n          dataIndex: 'economyPrice',\n          key: 'economyPrice',\n          onCell: (_, index) => ({\n            rowSpan: index === 0 ? 2 : 0 // Show only in first row\n          })\n        }, {\n          title: 'Business Price (Max %)',\n          dataIndex: 'businessPrice',\n          key: 'businessPrice',\n          onCell: (_, index) => ({\n            rowSpan: index === 0 ? 2 : 0 // Show only in first row\n          }),\n          render: text => {\n            if (!text || text === 'N/A') return text;\n            try {\n              const [price, percentage] = text.split(' (');\n              if (!percentage) return text;\n              return `${price} (${percentage}`;\n            } catch (error) {\n              return text;\n            }\n          }\n        }, {\n          title: 'First Price (Max %)',\n          dataIndex: 'firstPrice',\n          key: 'firstPrice',\n          onCell: (_, index) => ({\n            rowSpan: index === 0 ? 2 : 0 // Show only in first row\n          }),\n          render: text => {\n            if (!text || text === 'N/A') return text;\n            try {\n              const [price, percentage] = text.split(' (');\n              if (!percentage) return text;\n              return `${price} (${percentage}`;\n            } catch (error) {\n              return text;\n            }\n          }\n        }],\n        dataSource: (() => {\n          try {\n            var _selectedFlights$firs9, _selectedFlights$firs10, _selectedFlights$stop, _selectedFlights$stop2, _selectedFlights$firs13, _selectedFlights$firs14, _selectedFlights$stop5, _selectedFlights$stop6, _selectedFlights2, _selectedFlights2$, _selectedFlights$last9, _selectedFlights$last10, _selectedFlights4, _selectedFlights4$, _selectedFlights$last13, _selectedFlights$last14;\n            const segments = Object.keys(selectedFlights).map(Number).sort((a, b) => a - b);\n            if (segments.length === 0) return [];\n            const firstSegmentIndex = Math.min(...segments);\n            const lastSegmentIndex = Math.max(...segments);\n\n            // Helper function to get airlines string\n            const getAirlinesString = segmentRange => {\n              try {\n                const airlineSet = new Set(segmentRange.flatMap(i => {\n                  var _selectedFlights$i;\n                  return (_selectedFlights$i = selectedFlights[i]) === null || _selectedFlights$i === void 0 ? void 0 : _selectedFlights$i.map(f => f.airlines);\n                }).filter(Boolean));\n                return Array.from(airlineSet).join(', ') || '-';\n              } catch (error) {\n                console.error('Error getting airlines string:', error);\n                return '-';\n              }\n            };\n\n            // Debug logging\n            console.log('Selected Flights:', selectedFlights);\n            console.log('Segments:', segments);\n\n            // Calculate prices for the ENTIRE journey (origin to final destination)\n            const calculatePrices = hasStopover => {\n              try {\n                // Get origin and destination airports\n                const originAirport = airports.find(a => {\n                  var _selectedFlights$firs, _selectedFlights$firs2;\n                  return a.IATA === ((_selectedFlights$firs = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs === void 0 ? void 0 : (_selectedFlights$firs2 = _selectedFlights$firs[0]) === null || _selectedFlights$firs2 === void 0 ? void 0 : _selectedFlights$firs2.from);\n                });\n                const destAirport = airports.find(a => {\n                  var _selectedFlights$last, _selectedFlights$last2;\n                  return a.IATA === ((_selectedFlights$last = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last === void 0 ? void 0 : (_selectedFlights$last2 = _selectedFlights$last[0]) === null || _selectedFlights$last2 === void 0 ? void 0 : _selectedFlights$last2.to);\n                });\n                if (!originAirport || !destAirport) return {\n                  economyPrice: '-',\n                  businessPrice: '-',\n                  firstPrice: '-'\n                };\n\n                // Calculate total distance and cabin class distances\n                let totalDistance = 0;\n                let businessDistance = 0;\n                let firstDistance = 0;\n                let businessOnlyDistance = 0; // New: for segments with only business (no first)\n\n                Object.entries(selectedFlights).forEach(([_, flights]) => {\n                  flights.forEach(flight => {\n                    const distance = parseInt(flight.distance || 0);\n                    totalDistance += distance;\n\n                    // For Business Price: Include all segments with business class\n                    if (flight.business) businessDistance += distance;\n\n                    // For First Price: Only count business from segments without first\n                    if (flight.business && !flight.first) businessOnlyDistance += distance;\n                    if (flight.first) firstDistance += distance;\n                  });\n                });\n\n                // Find matching price in pricing data\n                const pricing = pricingData.find(p => p[\"From Region\"] === originAirport.Zone && p[\"To Region\"] === destAirport.Zone && totalDistance >= p[\"Min Distance\"] && totalDistance <= p[\"Max Distance\"]);\n                if (!pricing) return {\n                  economyPrice: '-',\n                  businessPrice: '-',\n                  firstPrice: '-'\n                };\n\n                // Calculate percentages\n                const businessPercentage = Math.round(businessDistance / totalDistance * 100);\n                const firstPercentage = Math.round(firstDistance / totalDistance * 100);\n                const businessOnlyPercentage = Math.round(businessOnlyDistance / totalDistance * 100);\n\n                // Add stopover fee if applicable\n                const stopoverExtra = hasStopover ? 5000 : 0;\n                return {\n                  economyPrice: pricing.Economy ? (pricing.Economy + stopoverExtra).toLocaleString() : '-',\n                  businessPrice: pricing.Business ? `${(pricing.Business + stopoverExtra).toLocaleString()} (${businessPercentage}% J)` : '-',\n                  firstPrice: pricing.First && firstPercentage > 0 ? `${(pricing.First + stopoverExtra).toLocaleString()} (${firstPercentage > 0 && businessOnlyPercentage > 0 ? `${firstPercentage}% F, ${businessOnlyPercentage}% J` : firstPercentage > 0 ? `${firstPercentage}% F` : '0%'})` : '-'\n                };\n              } catch (error) {\n                console.error('Error calculating prices:', error);\n                return {\n                  economyPrice: '-',\n                  businessPrice: '-',\n                  firstPrice: '-'\n                };\n              }\n            };\n\n            // Find stopover point\n            let stopoverIndex = null;\n            for (let i = firstSegmentIndex; i < lastSegmentIndex; i++) {\n              var _selectedFlights$i2, _selectedFlights;\n              const currentFlight = (_selectedFlights$i2 = selectedFlights[i]) === null || _selectedFlights$i2 === void 0 ? void 0 : _selectedFlights$i2[0];\n              const nextFlight = (_selectedFlights = selectedFlights[i + 1]) === null || _selectedFlights === void 0 ? void 0 : _selectedFlights[0];\n              if (currentFlight && nextFlight) {\n                const arrivalTime = dayjs(currentFlight.ArrivesAt);\n                const departureTime = dayjs(nextFlight.DepartsAt);\n                const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n                if (layoverMinutes >= 24 * 60) {\n                  stopoverIndex = i;\n                  break;\n                }\n              }\n            }\n\n            // Calculate prices once for the entire journey\n            const prices = calculatePrices(stopoverIndex !== null);\n\n            // If no stopover found, return single row\n            if (stopoverIndex === null) {\n              var _selectedFlights$firs3, _selectedFlights$firs4, _selectedFlights$last3, _selectedFlights$last4, _selectedFlights$firs7, _selectedFlights$firs8, _selectedFlights$last7, _selectedFlights$last8;\n              return [{\n                key: '1',\n                from: ((_selectedFlights$firs3 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs3 === void 0 ? void 0 : (_selectedFlights$firs4 = _selectedFlights$firs3[0]) === null || _selectedFlights$firs4 === void 0 ? void 0 : _selectedFlights$firs4.from) || '-',\n                to: ((_selectedFlights$last3 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last3 === void 0 ? void 0 : (_selectedFlights$last4 = _selectedFlights$last3[0]) === null || _selectedFlights$last4 === void 0 ? void 0 : _selectedFlights$last4.to) || '-',\n                airlines: getAirlinesString(segments),\n                duration: ((_selectedFlights$firs5, _selectedFlights$firs6, _selectedFlights$last5, _selectedFlights$last6) => {\n                  const firstDeparture = dayjs((_selectedFlights$firs5 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs5 === void 0 ? void 0 : (_selectedFlights$firs6 = _selectedFlights$firs5[0]) === null || _selectedFlights$firs6 === void 0 ? void 0 : _selectedFlights$firs6.DepartsAt);\n                  const finalArrival = dayjs((_selectedFlights$last5 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last5 === void 0 ? void 0 : (_selectedFlights$last6 = _selectedFlights$last5[0]) === null || _selectedFlights$last6 === void 0 ? void 0 : _selectedFlights$last6.ArrivesAt);\n                  const minutes = finalArrival.diff(firstDeparture, 'minute');\n                  const hours = Math.floor(minutes / 60);\n                  const remainingMinutes = minutes % 60;\n                  return `${hours}h ${remainingMinutes}m`;\n                })(),\n                departs: dayjs((_selectedFlights$firs7 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs7 === void 0 ? void 0 : (_selectedFlights$firs8 = _selectedFlights$firs7[0]) === null || _selectedFlights$firs8 === void 0 ? void 0 : _selectedFlights$firs8.DepartsAt).format('HH:mm MM-DD'),\n                arrives: dayjs((_selectedFlights$last7 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last7 === void 0 ? void 0 : (_selectedFlights$last8 = _selectedFlights$last7[0]) === null || _selectedFlights$last8 === void 0 ? void 0 : _selectedFlights$last8.ArrivesAt).format('HH:mm MM-DD'),\n                ...prices\n              }];\n            }\n\n            // Split journey at stopover with merged price cells\n            return [{\n              key: '1',\n              from: ((_selectedFlights$firs9 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs9 === void 0 ? void 0 : (_selectedFlights$firs10 = _selectedFlights$firs9[0]) === null || _selectedFlights$firs10 === void 0 ? void 0 : _selectedFlights$firs10.from) || '-',\n              to: ((_selectedFlights$stop = selectedFlights[stopoverIndex]) === null || _selectedFlights$stop === void 0 ? void 0 : (_selectedFlights$stop2 = _selectedFlights$stop[0]) === null || _selectedFlights$stop2 === void 0 ? void 0 : _selectedFlights$stop2.to) || '-',\n              airlines: getAirlinesString(segments.filter(i => i <= stopoverIndex)),\n              duration: ((_selectedFlights$firs11, _selectedFlights$firs12, _selectedFlights$stop3, _selectedFlights$stop4) => {\n                const firstDeparture = dayjs((_selectedFlights$firs11 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs11 === void 0 ? void 0 : (_selectedFlights$firs12 = _selectedFlights$firs11[0]) === null || _selectedFlights$firs12 === void 0 ? void 0 : _selectedFlights$firs12.DepartsAt);\n                const stopoverArrival = dayjs((_selectedFlights$stop3 = selectedFlights[stopoverIndex]) === null || _selectedFlights$stop3 === void 0 ? void 0 : (_selectedFlights$stop4 = _selectedFlights$stop3[0]) === null || _selectedFlights$stop4 === void 0 ? void 0 : _selectedFlights$stop4.ArrivesAt);\n                const minutes = stopoverArrival.diff(firstDeparture, 'minute');\n                const hours = Math.floor(minutes / 60);\n                const remainingMinutes = minutes % 60;\n                return `${hours}h ${remainingMinutes}m`;\n              })(),\n              departs: dayjs((_selectedFlights$firs13 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs13 === void 0 ? void 0 : (_selectedFlights$firs14 = _selectedFlights$firs13[0]) === null || _selectedFlights$firs14 === void 0 ? void 0 : _selectedFlights$firs14.DepartsAt).format('HH:mm MM-DD'),\n              arrives: dayjs((_selectedFlights$stop5 = selectedFlights[stopoverIndex]) === null || _selectedFlights$stop5 === void 0 ? void 0 : (_selectedFlights$stop6 = _selectedFlights$stop5[0]) === null || _selectedFlights$stop6 === void 0 ? void 0 : _selectedFlights$stop6.ArrivesAt).format('HH:mm MM-DD'),\n              ...prices // Same prices for first row\n            }, {\n              key: '2',\n              from: ((_selectedFlights2 = selectedFlights[stopoverIndex + 1]) === null || _selectedFlights2 === void 0 ? void 0 : (_selectedFlights2$ = _selectedFlights2[0]) === null || _selectedFlights2$ === void 0 ? void 0 : _selectedFlights2$.from) || '-',\n              to: ((_selectedFlights$last9 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last9 === void 0 ? void 0 : (_selectedFlights$last10 = _selectedFlights$last9[0]) === null || _selectedFlights$last10 === void 0 ? void 0 : _selectedFlights$last10.to) || '-',\n              airlines: getAirlinesString(segments.filter(i => i > stopoverIndex)),\n              duration: ((_selectedFlights3, _selectedFlights3$, _selectedFlights$last11, _selectedFlights$last12) => {\n                const stopoverDeparture = dayjs((_selectedFlights3 = selectedFlights[stopoverIndex + 1]) === null || _selectedFlights3 === void 0 ? void 0 : (_selectedFlights3$ = _selectedFlights3[0]) === null || _selectedFlights3$ === void 0 ? void 0 : _selectedFlights3$.DepartsAt);\n                const finalArrival = dayjs((_selectedFlights$last11 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last11 === void 0 ? void 0 : (_selectedFlights$last12 = _selectedFlights$last11[0]) === null || _selectedFlights$last12 === void 0 ? void 0 : _selectedFlights$last12.ArrivesAt);\n                const minutes = finalArrival.diff(stopoverDeparture, 'minute');\n                const hours = Math.floor(minutes / 60);\n                const remainingMinutes = minutes % 60;\n                return `${hours}h ${remainingMinutes}m`;\n              })(),\n              departs: dayjs((_selectedFlights4 = selectedFlights[stopoverIndex + 1]) === null || _selectedFlights4 === void 0 ? void 0 : (_selectedFlights4$ = _selectedFlights4[0]) === null || _selectedFlights4$ === void 0 ? void 0 : _selectedFlights4$.DepartsAt).format('HH:mm MM-DD'),\n              arrives: dayjs((_selectedFlights$last13 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last13 === void 0 ? void 0 : (_selectedFlights$last14 = _selectedFlights$last13[0]) === null || _selectedFlights$last14 === void 0 ? void 0 : _selectedFlights$last14.ArrivesAt).format('HH:mm MM-DD'),\n              economyPrice: null,\n              // Will be hidden by rowSpan\n              businessPrice: null,\n              // Will be hidden by rowSpan\n              firstPrice: null // Will be hidden by rowSpan\n            }];\n          } catch (error) {\n            console.error('Error generating dataSource:', error);\n            return [];\n          }\n        })(),\n        pagination: false,\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 12,\n          fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography.Text, {\n          children: (() => {\n            const firstSegmentIndex = Math.min(...Object.keys(selectedFlights).map(Number));\n            const lastSegmentIndex = Math.max(...Object.keys(selectedFlights).map(Number));\n            const originAirport = airports.find(a => {\n              var _selectedFlights$firs15, _selectedFlights$firs16;\n              return a.IATA === ((_selectedFlights$firs15 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs15 === void 0 ? void 0 : (_selectedFlights$firs16 = _selectedFlights$firs15[0]) === null || _selectedFlights$firs16 === void 0 ? void 0 : _selectedFlights$firs16.from);\n            });\n            const destAirport = airports.find(a => {\n              var _selectedFlights$last15, _selectedFlights$last16;\n              return a.IATA === ((_selectedFlights$last15 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last15 === void 0 ? void 0 : (_selectedFlights$last16 = _selectedFlights$last15[0]) === null || _selectedFlights$last16 === void 0 ? void 0 : _selectedFlights$last16.to);\n            });\n            if (!originAirport || !destAirport) return 'Unable to validate route: airport data missing';\n\n            // Haversine formula\n            const R = 3959; // Earth's radius in miles\n            const lat1 = originAirport.Latitude * Math.PI / 180;\n            const lat2 = destAirport.Latitude * Math.PI / 180;\n            const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n            const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            const directDistance = Math.round(R * c);\n\n            // Calculate total segment distance\n            let totalSegmentDistance = 0;\n            Object.values(selectedFlights).forEach(flights => {\n              flights.forEach(flight => {\n                totalSegmentDistance += parseInt(flight.distance || 0);\n              });\n            });\n            const isValid = totalSegmentDistance <= 2 * directDistance;\n            const percentage = Math.round(totalSegmentDistance / directDistance * 100);\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginTop: 8,\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                  color: isValid ? '#52c41a' : '#f5222d',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  gap: '8px',\n                  width: '100%'\n                },\n                children: isValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"\\u2713\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 734,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"ROUTING VALIDATED\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 735,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"\\u2717\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 739,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"THIS ROUTING IS INVALID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 740,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 721,\n                columnNumber: 21\n              }, this)\n            }, void 0, false);\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        :global(.ant-table) {\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s(FlightDetailsModal, \"H2ckgxSQbI7eLpGZqckh2hJNkWI=\", false, function () {\n  return [useFlightDetails];\n});\n_c = FlightDetailsModal;\nexport default FlightDetailsModal;\nvar _c;\n$RefreshReg$(_c, \"FlightDetailsModal\");","map":{"version":3,"names":["React","useState","useEffect","Modal","DatePicker","Input","Spin","Table","Button","Typography","Pagination","Space","dayjs","getSegmentColumns","useFlightDetails","FlightAvailabilityCalendar","airlines","airports","pricingData","jsxDEV","_jsxDEV","Fragment","_Fragment","RangePicker","FlightDetailsModal","isVisible","currentRoute","onClose","startDay","_s","dateRangeError","setDateRangeError","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","isLoadingSegments","handleDateSearch","handleCalendarSearch","resetDetails","columns","selectedFlights","availabilityData","isLoadingAvailability","setStartDate","startDate","paginationState","setPaginationState","paginationConfig","pageSize","showSizeChanger","pageSizeOptions","handlePaginationChange","segmentIndex","page","prev","getPaginatedData","flights","start","end","slice","handleOk","handleCancel","handleCalendarDateSelect","dateRange","handleCalendarSearchClick","stopoverInfo","preserveCalendarData","clearSelections","getSegmentTables","length","segments","reduce","acc","flight","hidden","index","route","from","to","push","Object","entries","sort","a","b","parseInt","map","_flights$flights$","_flights$flights$2","flightsCopy","JSON","parse","stringify","sortField","sortOrder","aValue","bValue","localeCompare","includes","aHours","aMinutes","split","part","bHours","bMinutes","paginatedFlights","allFlights","total","handleTableChange","pagination","filters","sorter","current","field","order","handleModalClose","title","open","onCancel","footer","width","styles","body","padding","maxHeight","overflow","content","maxWidth","children","style","marginBottom","display","gap","flex","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","date","disabledDate","today","startOf","maxDate","add","marginLeft","type","disabled","toLowerCase","startsWith","onClick","color","flightData","onDateRangeSelect","selectedRange","onSearch","textAlign","margin","marginTop","Title","level","segment","_paginationState$segm","_paginationState$segm2","justifyContent","alignItems","size","showTotal","range","dataSource","fontFamily","Text","strong","currentSegmentFlights","nextSegmentFlights","currentFlight","nextFlight","arrivalTime","ArrivesAt","departureTime","DepartsAt","layoverMinutes","diff","days","Math","floor","remainingHours","remainingMinutes","hours","minutes","keys","dataIndex","key","render","airlinesList","airlineArray","Array","isArray","flexDirection","airlineName","airline","find","_a$label","label","replace","airlineCode","src","process","env","PUBLIC_URL","alt","height","objectFit","borderRadius","onError","error","console","onCell","_","rowSpan","text","price","percentage","_selectedFlights$firs9","_selectedFlights$firs10","_selectedFlights$stop","_selectedFlights$stop2","_selectedFlights$firs13","_selectedFlights$firs14","_selectedFlights$stop5","_selectedFlights$stop6","_selectedFlights2","_selectedFlights2$","_selectedFlights$last9","_selectedFlights$last10","_selectedFlights4","_selectedFlights4$","_selectedFlights$last13","_selectedFlights$last14","Number","firstSegmentIndex","min","lastSegmentIndex","max","getAirlinesString","segmentRange","airlineSet","Set","flatMap","i","_selectedFlights$i","f","filter","Boolean","join","log","calculatePrices","hasStopover","originAirport","_selectedFlights$firs","_selectedFlights$firs2","IATA","destAirport","_selectedFlights$last","_selectedFlights$last2","economyPrice","businessPrice","firstPrice","totalDistance","businessDistance","firstDistance","businessOnlyDistance","forEach","distance","business","first","pricing","p","Zone","businessPercentage","round","firstPercentage","businessOnlyPercentage","stopoverExtra","Economy","toLocaleString","Business","First","stopoverIndex","_selectedFlights$i2","_selectedFlights","prices","_selectedFlights$firs3","_selectedFlights$firs4","_selectedFlights$last3","_selectedFlights$last4","_selectedFlights$firs7","_selectedFlights$firs8","_selectedFlights$last7","_selectedFlights$last8","duration","_selectedFlights$firs5","_selectedFlights$firs6","_selectedFlights$last5","_selectedFlights$last6","firstDeparture","finalArrival","departs","format","arrives","_selectedFlights$firs11","_selectedFlights$firs12","_selectedFlights$stop3","_selectedFlights$stop4","stopoverArrival","_selectedFlights3","_selectedFlights3$","_selectedFlights$last11","_selectedFlights$last12","stopoverDeparture","_selectedFlights$firs15","_selectedFlights$firs16","_selectedFlights$last15","_selectedFlights$last16","R","lat1","Latitude","PI","lat2","dLat","dLon","Longitude","sin","cos","c","atan2","sqrt","directDistance","totalSegmentDistance","values","isValid","fontSize","fontWeight","jsx","_c","$RefreshReg$"],"sources":["/Users/hanguyen/Desktop/route-builder-ac/src/components/FlightSearch/FlightDetailsModal.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Modal, DatePicker, Input, Spin, Table, Button, Typography, Pagination, Space } from 'antd';\nimport dayjs from 'dayjs';\nimport { getSegmentColumns } from './segmentColumns';\nimport useFlightDetails from './hooks/useFlightDetails';\nimport FlightAvailabilityCalendar from './FlightAvailabilityCalendar';\nimport airlines from './data/airlines';\nimport { airports } from './data/airports';\nimport pricingData from './data/pricing.json';\nconst { RangePicker } = DatePicker;\n\nconst FlightDetailsModal = ({ isVisible, currentRoute, onClose, startDay }) => {\n  const [dateRangeError, setDateRangeError] = useState(false);\n  const {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n    setStartDate,\n    startDate,\n  } = useFlightDetails(getSegmentColumns, startDay);\n\n  // Add pagination state with sorting\n  const [paginationState, setPaginationState] = useState({});\n  \n  // Add pagination config\n  const paginationConfig = {\n    pageSize: 5,\n    showSizeChanger: true,\n    pageSizeOptions: ['5', '10', '20', '50'],\n  };\n\n  // Function to handle pagination change\n  const handlePaginationChange = (segmentIndex, page, pageSize) => {\n    setPaginationState(prev => ({\n      ...prev,\n      [segmentIndex]: {\n        ...prev[segmentIndex], // Preserve sorting if it exists\n        page,\n        pageSize\n      }\n    }));\n  };\n\n  // Function to get paginated data for a segment\n  const getPaginatedData = (flights, segmentIndex) => {\n    const { page = 1, pageSize = paginationConfig.pageSize } = paginationState[segmentIndex] || {};\n    const start = (page - 1) * pageSize;\n    const end = start + pageSize;\n    return flights.slice(start, end);\n  };\n\n  // Clear data when modal closes\n  useEffect(() => {\n    if (!isVisible) {\n      resetDetails();\n      setDateRangeError(false);\n      setSelectedDates(null);\n      setApiKey('');\n    }\n  }, [isVisible]);\n\n  const handleOk = () => {\n    handleDateSearch(currentRoute);\n  };\n\n  const handleCancel = () => {\n    onClose();\n  };\n\n  const handleCalendarDateSelect = (dateRange) => {\n    setSelectedDates(dateRange);\n    setDateRangeError(false);\n  };\n\n  const handleCalendarSearchClick = (stopoverInfo, preserveCalendarData = false, clearSelections = false) => {\n    if (!selectedDates) {\n      setDateRangeError(true);\n      return;\n    }\n    \n    setDateRangeError(false);\n    \n    // Pass the clearSelections flag to handleDateSearch\n    handleDateSearch(currentRoute, stopoverInfo, preserveCalendarData, clearSelections);\n  };\n\n  // Function to group flights by segment with safety checks\n  const getSegmentTables = () => {\n    if (!segmentDetails || segmentDetails.length === 0) return [];\n\n    // Group flights by segment and filter out hidden flights\n    const segments = segmentDetails.reduce((acc, flight) => {\n      if (flight.hidden) return acc; // Skip hidden flights\n      \n      if (!acc[flight.segmentIndex]) {\n        acc[flight.segmentIndex] = {\n          index: flight.segmentIndex,\n          route: `${flight.from}-${flight.to}`,\n          flights: []\n        };\n      }\n      acc[flight.segmentIndex].flights.push(flight);\n      return acc;\n    }, {});\n\n    return Object.entries(segments)\n      .sort(([a], [b]) => parseInt(a) - parseInt(b))\n      .map(([segmentIndex, flights]) => {\n        // Create a deep copy of flights to avoid modifying the original data\n        const flightsCopy = JSON.parse(JSON.stringify(flights.flights));\n        \n        // Get pagination state for this segment\n        const { page = 1, pageSize = paginationConfig.pageSize, sortField, sortOrder } = \n          paginationState[segmentIndex] || {};\n        \n        // Sort the entire dataset if sorting is applied\n        if (sortField && sortOrder) {\n          flightsCopy.sort((a, b) => {\n            let aValue, bValue;\n            \n            // Special handling for cabin class columns\n            if (sortField === 'economy' || sortField === 'business' || sortField === 'first') {\n              // For cabin classes, true sorts before false\n              aValue = a[sortField] === true ? 1 : 0;\n              bValue = b[sortField] === true ? 1 : 0;\n            } else {\n              aValue = a[sortField];\n              bValue = b[sortField];\n            }\n            \n            // Handle different data types\n            if (typeof aValue === 'string' && typeof bValue === 'string') {\n              return sortOrder === 'ascend' \n                ? aValue.localeCompare(bValue) \n                : bValue.localeCompare(aValue);\n            } else if (sortField === 'duration') {\n              // For duration, convert to minutes if it's a string like \"2h 30m\"\n              if (typeof aValue === 'string' && aValue.includes('h')) {\n                const [aHours, aMinutes] = aValue.split('h').map(part => parseInt(part) || 0);\n                aValue = aHours * 60 + aMinutes;\n              }\n              if (typeof bValue === 'string' && bValue.includes('h')) {\n                const [bHours, bMinutes] = bValue.split('h').map(part => parseInt(part) || 0);\n                bValue = bHours * 60 + bMinutes;\n              }\n              return sortOrder === 'ascend' ? aValue - bValue : bValue - aValue;\n            } else {\n              // For numbers and other types\n              return sortOrder === 'ascend' \n                ? (aValue > bValue ? 1 : -1) \n                : (bValue > aValue ? 1 : -1);\n            }\n          });\n        }\n        \n        // Calculate pagination\n        const start = (page - 1) * pageSize;\n        const end = start + pageSize;\n        const paginatedFlights = flightsCopy.slice(start, end);\n        \n        return {\n          index: parseInt(segmentIndex),\n          route: `${flights.flights[0]?.from || '?'}-${flights.flights[0]?.to || '?'}`,\n          flights: paginatedFlights,\n          allFlights: flightsCopy, // Keep the full sorted dataset\n          total: flightsCopy.length\n        };\n      });\n  };\n\n  // Update the handleTableChange function to handle sorting\n  const handleTableChange = (segmentIndex, pagination, filters, sorter) => {\n    setPaginationState(prev => ({\n      ...prev,\n      [segmentIndex]: {\n        page: pagination.current,\n        pageSize: pagination.pageSize,\n        sortField: sorter.field,\n        sortOrder: sorter.order\n      }\n    }));\n  };\n\n  // Handle modal close with complete cleanup\n  const handleModalClose = () => {\n    // Reset all details including selected dates\n    resetDetails();\n    \n    // Explicitly clear selected dates\n    setSelectedDates(null);\n    \n    // Call the parent's onClose handler\n    onClose();\n  };\n\n  return (\n    <Modal\n      title=\"Flight Details\"\n      open={isVisible}\n      onCancel={handleModalClose}\n      footer={null}\n      width={1600}\n      styles={{\n        body: { \n          padding: '12px',\n          maxHeight: '90vh',\n          overflow: 'auto'\n        },\n        content: {\n          maxWidth: '100vw'\n        }\n      }}\n    >\n      <div style={{ marginBottom: 16 }}>\n        <div style={{ display: 'flex', gap: '8px', marginBottom: 16 }}>\n          <div style={{ display: 'flex', gap: '8px', flex: 1 }}>\n            <Input\n              placeholder=\"Enter your yapping password (Under Development)\"\n              value={apiKey}\n              onChange={(e) => setApiKey(e.target.value)}\n              style={{ flex: 1 }}\n            />\n            <DatePicker \n              placeholder=\"Calendar start on (optional)\"\n              onChange={(date) => setStartDate(date)}\n              disabledDate={(current) => {\n                // Disable dates before today and after 330 days from today\n                const today = dayjs().startOf('day');\n                const maxDate = today.add(330, 'days');\n                return current && (current < today || current > maxDate);\n              }}\n              style={{ width: 200, marginLeft: 8 }}\n            />\n            <Button\n              type=\"primary\"\n              disabled={!apiKey || !apiKey.toLowerCase().startsWith('pro')}\n              onClick={() => handleCalendarSearch(currentRoute)}\n            >\n              Apply\n            </Button>\n          </div>\n        </div>\n        {dateRangeError && (\n          <div style={{ color: 'red' }}>\n            Please select a date range in the calendar\n          </div>\n        )}\n      </div>\n\n      <FlightAvailabilityCalendar \n        flightData={availabilityData}\n        currentRoute={currentRoute}\n        onDateRangeSelect={handleCalendarDateSelect}\n        selectedRange={selectedDates}\n        onSearch={handleCalendarSearchClick}\n      />\n\n      {isLoadingSegments ? (\n        <div style={{ textAlign: 'center', margin: '20px 0' }}>\n          <Spin />\n        </div>\n      ) : (\n        segmentDetails?.length > 0 && (\n          <div style={{ marginTop: 0 }}>\n            <Typography.Title level={4} style={{ marginBottom: 16 }}>\n              Flights By Segment\n            </Typography.Title>\n            {getSegmentTables().map((segment, index) => (\n              <div key={segment.index} style={{ marginBottom: 16 }}>\n                <div style={{ \n                  display: 'flex', \n                  justifyContent: 'space-between', \n                  alignItems: 'center',\n                  marginBottom: 12 \n                }}>\n                  <Typography.Title level={5} style={{ margin: 0 }}>\n                    Segment {segment.index+1} ({segment.route}):\n                  </Typography.Title>\n                  <div>\n                    <Pagination\n                      size=\"small\"\n                      total={segment.total}\n                      pageSize={paginationState[segment.index]?.pageSize || paginationConfig.pageSize}\n                      current={paginationState[segment.index]?.page || 1}\n                      onChange={(page, pageSize) => handlePaginationChange(segment.index, page, pageSize)}\n                      showSizeChanger={true}\n                      showTotal={(total, range) => `${range[0]}-${range[1]} of ${total}`}\n                      style={{ \n                        display: 'inline-block',\n                        marginBottom: 0\n                      }}\n                    />\n                  </div>\n                </div>\n                <Table\n                  columns={columns}\n                  dataSource={segment.flights}\n                  pagination={false}\n                  size=\"small\"\n                  onChange={(pagination, filters, sorter) => \n                    handleTableChange(segment.index, pagination, filters, sorter)\n                  }\n                />\n                \n                {/* Add layover duration if there's a next segment and flights are selected */}\n                {index < getSegmentTables().length - 1 && (\n                  <div style={{ \n                    padding: '0px',\n                    margin: '16px',\n                    textAlign: 'center',\n                    fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\n                  }}>\n                    <Typography.Text strong>\n                      {(() => {\n                        const currentSegmentFlights = selectedFlights[segment.index];\n                        const nextSegmentFlights = selectedFlights[segment.index + 1];\n                        \n                        if (!currentSegmentFlights?.[0] || !nextSegmentFlights?.[0]) {\n                          return 'Select flights to see connection time';\n                        }\n\n                        const currentFlight = currentSegmentFlights[0];\n                        const nextFlight = nextSegmentFlights[0];\n                        \n                        const arrivalTime = dayjs(currentFlight.ArrivesAt);\n                        const departureTime = dayjs(nextFlight.DepartsAt);\n                        const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n                        \n                        // If layover is more than 24 hours, show as stopover\n                        if (layoverMinutes >= 24 * 60) {\n                          const days = Math.floor(layoverMinutes / (24 * 60));\n                          const remainingHours = Math.floor((layoverMinutes % (24 * 60)) / 60);\n                          const remainingMinutes = layoverMinutes % 60;\n                          \n                          return `Stopover duration: ${days} day${days > 1 ? 's' : ''} ${remainingHours}h ${remainingMinutes}m`;\n                        } else {\n                          // Regular layover display\n                          const hours = Math.floor(layoverMinutes / 60);\n                          const minutes = layoverMinutes % 60;\n                          return `Layover duration: ${hours}h ${minutes}m`;\n                        }\n                      })()}\n                    </Typography.Text>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )\n      )}\n\n      {/* Add Summary Table */}\n      {Object.keys(selectedFlights).length > 0 && (\n        <div style={{ marginTop: 24 }}>\n          <Typography.Title level={4}>Journey Summary</Typography.Title>\n          <Table\n            columns={[\n              {\n                title: 'From',\n                dataIndex: 'from',\n                key: 'from',\n              },\n              {\n                title: 'To',\n                dataIndex: 'to',\n                key: 'to',\n              },\n              {\n                title: 'Airlines',\n                dataIndex: 'airlines',\n                key: 'airlines',\n                render: (airlinesList) => {\n                  // More thorough safety checks\n                  if (!airlinesList || airlinesList === '-') return '-';\n                  \n                  try {\n                    const airlineArray = Array.isArray(airlinesList) ? airlinesList : airlinesList.split(', ');\n                    \n                    return (\n                      <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\n                        {airlineArray.map((airlineName, index) => {\n                          if (!airlineName) return null;\n                          \n                          const airline = airlines.find(a => \n                            airlineName.startsWith(a.label?.replace(` (${a.value})`, ''))\n                          );\n                          const airlineCode = airline?.value;\n                          \n                          return (\n                            <div key={`${airlineCode}-${index}`} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                              {airlineCode && (\n                                <img \n                                  src={`${process.env.PUBLIC_URL}/${airlineCode}.png`}\n                                  alt={airlineCode}\n                                  style={{ \n                                    width: '24px', \n                                    height: '24px',\n                                    objectFit: 'contain',\n                                    borderRadius: '4px'\n                                  }} \n                                  onError={(e) => {\n                                    e.target.style.display = 'none';\n                                  }}\n                                />\n                              )}\n                              {airlineName}\n                            </div>\n                          );\n                        })}\n                      </div>\n                    );\n                  } catch (error) {\n                    console.error('Error rendering airlines:', error);\n                    return '-';\n                  }\n                },\n              },\n              {\n                title: 'Duration',\n                dataIndex: 'duration',\n                key: 'duration',\n              },\n              {\n                title: 'Departs',\n                dataIndex: 'departs',\n                key: 'departs',\n              },\n              {\n                title: 'Arrives',\n                dataIndex: 'arrives',\n                key: 'arrives',\n              },\n              {\n                title: 'Economy Price',\n                dataIndex: 'economyPrice',\n                key: 'economyPrice',\n                onCell: (_, index) => ({\n                  rowSpan: index === 0 ? 2 : 0, // Show only in first row\n                }),\n              },\n              {\n                title: 'Business Price (Max %)',\n                dataIndex: 'businessPrice',\n                key: 'businessPrice',\n                onCell: (_, index) => ({\n                  rowSpan: index === 0 ? 2 : 0, // Show only in first row\n                }),\n                render: (text) => {\n                  if (!text || text === 'N/A') return text;\n                  try {\n                    const [price, percentage] = text.split(' (');\n                    if (!percentage) return text;\n                    return `${price} (${percentage}`;\n                  } catch (error) {\n                    return text;\n                  }\n                }\n              },\n              {\n                title: 'First Price (Max %)',\n                dataIndex: 'firstPrice',\n                key: 'firstPrice',\n                onCell: (_, index) => ({\n                  rowSpan: index === 0 ? 2 : 0, // Show only in first row\n                }),\n                render: (text) => {\n                  if (!text || text === 'N/A') return text;\n                  try {\n                    const [price, percentage] = text.split(' (');\n                    if (!percentage) return text;\n                    return `${price} (${percentage}`;\n                  } catch (error) {\n                    return text;\n                  }\n                }\n              },\n            ]}\n            dataSource={(() => {\n              try {\n                const segments = Object.keys(selectedFlights).map(Number).sort((a, b) => a - b);\n                if (segments.length === 0) return [];\n                \n                const firstSegmentIndex = Math.min(...segments);\n                const lastSegmentIndex = Math.max(...segments);\n                \n                // Helper function to get airlines string\n                const getAirlinesString = (segmentRange) => {\n                  try {\n                    const airlineSet = new Set(\n                      segmentRange\n                        .flatMap(i => selectedFlights[i]?.map(f => f.airlines))\n                        .filter(Boolean)\n                    );\n                    return Array.from(airlineSet).join(', ') || '-';\n                  } catch (error) {\n                    console.error('Error getting airlines string:', error);\n                    return '-';\n                  }\n                };\n\n                // Debug logging\n                console.log('Selected Flights:', selectedFlights);\n                console.log('Segments:', segments);\n                \n                // Calculate prices for the ENTIRE journey (origin to final destination)\n                const calculatePrices = (hasStopover) => {\n                  try {\n                    // Get origin and destination airports\n                    const originAirport = airports.find(a => a.IATA === selectedFlights[firstSegmentIndex]?.[0]?.from);\n                    const destAirport = airports.find(a => a.IATA === selectedFlights[lastSegmentIndex]?.[0]?.to);\n                    \n                    if (!originAirport || !destAirport) return {\n                      economyPrice: '-',\n                      businessPrice: '-',\n                      firstPrice: '-'\n                    };\n\n                    // Calculate total distance and cabin class distances\n                    let totalDistance = 0;\n                    let businessDistance = 0;\n                    let firstDistance = 0;\n                    let businessOnlyDistance = 0;  // New: for segments with only business (no first)\n\n                    Object.entries(selectedFlights).forEach(([_, flights]) => {\n                      flights.forEach(flight => {\n                        const distance = parseInt(flight.distance || 0);\n                        totalDistance += distance;\n                        \n                        // For Business Price: Include all segments with business class\n                        if (flight.business) businessDistance += distance;\n                        \n                        // For First Price: Only count business from segments without first\n                        if (flight.business && !flight.first) businessOnlyDistance += distance;\n                        if (flight.first) firstDistance += distance;\n                      });\n                    });\n\n                    // Find matching price in pricing data\n                    const pricing = pricingData.find(p => \n                      p[\"From Region\"] === originAirport.Zone &&\n                      p[\"To Region\"] === destAirport.Zone &&\n                      totalDistance >= p[\"Min Distance\"] &&\n                      totalDistance <= p[\"Max Distance\"]\n                    );\n\n                    if (!pricing) return {\n                      economyPrice: '-',\n                      businessPrice: '-',\n                      firstPrice: '-'\n                    };\n\n                    // Calculate percentages\n                    const businessPercentage = Math.round((businessDistance / totalDistance) * 100);\n                    const firstPercentage = Math.round((firstDistance / totalDistance) * 100);\n                    const businessOnlyPercentage = Math.round((businessOnlyDistance / totalDistance) * 100);\n\n                    // Add stopover fee if applicable\n                    const stopoverExtra = hasStopover ? 5000 : 0;\n\n                    return {\n                      economyPrice: pricing.Economy ? (pricing.Economy + stopoverExtra).toLocaleString() : '-',\n                      businessPrice: pricing.Business ? \n                        `${(pricing.Business + stopoverExtra).toLocaleString()} (${businessPercentage}% J)` : '-',\n                      firstPrice: pricing.First && firstPercentage > 0 ? \n                        `${(pricing.First + stopoverExtra).toLocaleString()} (${\n                          firstPercentage > 0 && businessOnlyPercentage > 0 \n                            ? `${firstPercentage}% F, ${businessOnlyPercentage}% J`\n                            : firstPercentage > 0 \n                              ? `${firstPercentage}% F`\n                              : '0%'\n                        })` : '-'\n                    };\n                  } catch (error) {\n                    console.error('Error calculating prices:', error);\n                    return {\n                      economyPrice: '-',\n                      businessPrice: '-',\n                      firstPrice: '-'\n                    };\n                  }\n                };\n\n                // Find stopover point\n                let stopoverIndex = null;\n                for (let i = firstSegmentIndex; i < lastSegmentIndex; i++) {\n                  const currentFlight = selectedFlights[i]?.[0];\n                  const nextFlight = selectedFlights[i + 1]?.[0];\n                  \n                  if (currentFlight && nextFlight) {\n                    const arrivalTime = dayjs(currentFlight.ArrivesAt);\n                    const departureTime = dayjs(nextFlight.DepartsAt);\n                    const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n                    \n                    if (layoverMinutes >= 24 * 60) {\n                      stopoverIndex = i;\n                      break;\n                    }\n                  }\n                }\n\n                // Calculate prices once for the entire journey\n                const prices = calculatePrices(stopoverIndex !== null);\n\n                // If no stopover found, return single row\n                if (stopoverIndex === null) {\n                  return [{\n                    key: '1',\n                    from: selectedFlights[firstSegmentIndex]?.[0]?.from || '-',\n                    to: selectedFlights[lastSegmentIndex]?.[0]?.to || '-',\n                    airlines: getAirlinesString(segments),\n                    duration: (() => {\n                      const firstDeparture = dayjs(selectedFlights[firstSegmentIndex]?.[0]?.DepartsAt);\n                      const finalArrival = dayjs(selectedFlights[lastSegmentIndex]?.[0]?.ArrivesAt);\n                      const minutes = finalArrival.diff(firstDeparture, 'minute');\n                      const hours = Math.floor(minutes / 60);\n                      const remainingMinutes = minutes % 60;\n                      return `${hours}h ${remainingMinutes}m`;\n                    })(),\n                    departs: dayjs(selectedFlights[firstSegmentIndex]?.[0]?.DepartsAt).format('HH:mm MM-DD'),\n                    arrives: dayjs(selectedFlights[lastSegmentIndex]?.[0]?.ArrivesAt).format('HH:mm MM-DD'),\n                    ...prices\n                  }];\n                }\n\n                // Split journey at stopover with merged price cells\n                return [\n                  {\n                    key: '1',\n                    from: selectedFlights[firstSegmentIndex]?.[0]?.from || '-',\n                    to: selectedFlights[stopoverIndex]?.[0]?.to || '-',\n                    airlines: getAirlinesString(segments.filter(i => i <= stopoverIndex)),\n                    duration: (() => {\n                      const firstDeparture = dayjs(selectedFlights[firstSegmentIndex]?.[0]?.DepartsAt);\n                      const stopoverArrival = dayjs(selectedFlights[stopoverIndex]?.[0]?.ArrivesAt);\n                      const minutes = stopoverArrival.diff(firstDeparture, 'minute');\n                      const hours = Math.floor(minutes / 60);\n                      const remainingMinutes = minutes % 60;\n                      return `${hours}h ${remainingMinutes}m`;\n                    })(),\n                    departs: dayjs(selectedFlights[firstSegmentIndex]?.[0]?.DepartsAt).format('HH:mm MM-DD'),\n                    arrives: dayjs(selectedFlights[stopoverIndex]?.[0]?.ArrivesAt).format('HH:mm MM-DD'),\n                    ...prices  // Same prices for first row\n                  },\n                  {\n                    key: '2',\n                    from: selectedFlights[stopoverIndex + 1]?.[0]?.from || '-',\n                    to: selectedFlights[lastSegmentIndex]?.[0]?.to || '-',\n                    airlines: getAirlinesString(segments.filter(i => i > stopoverIndex)),\n                    duration: (() => {\n                      const stopoverDeparture = dayjs(selectedFlights[stopoverIndex + 1]?.[0]?.DepartsAt);\n                      const finalArrival = dayjs(selectedFlights[lastSegmentIndex]?.[0]?.ArrivesAt);\n                      const minutes = finalArrival.diff(stopoverDeparture, 'minute');\n                      const hours = Math.floor(minutes / 60);\n                      const remainingMinutes = minutes % 60;\n                      return `${hours}h ${remainingMinutes}m`;\n                    })(),\n                    departs: dayjs(selectedFlights[stopoverIndex + 1]?.[0]?.DepartsAt).format('HH:mm MM-DD'),\n                    arrives: dayjs(selectedFlights[lastSegmentIndex]?.[0]?.ArrivesAt).format('HH:mm MM-DD'),\n                    economyPrice: null,  // Will be hidden by rowSpan\n                    businessPrice: null, // Will be hidden by rowSpan\n                    firstPrice: null     // Will be hidden by rowSpan\n                  }\n                ];\n              } catch (error) {\n                console.error('Error generating dataSource:', error);\n                return [];\n              }\n            })()}\n            pagination={false}\n            size=\"small\"\n          />\n          \n          {/* Add Route Validation */}\n          <div style={{ marginTop: 12, fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace' }}>\n            <Typography.Text>\n              {(() => {\n                const firstSegmentIndex = Math.min(...Object.keys(selectedFlights).map(Number));\n                const lastSegmentIndex = Math.max(...Object.keys(selectedFlights).map(Number));\n                const originAirport = airports.find(a => a.IATA === selectedFlights[firstSegmentIndex]?.[0]?.from);\n                const destAirport = airports.find(a => a.IATA === selectedFlights[lastSegmentIndex]?.[0]?.to);\n\n                if (!originAirport || !destAirport) return 'Unable to validate route: airport data missing';\n\n                // Haversine formula\n                const R = 3959; // Earth's radius in miles\n                const lat1 = originAirport.Latitude * Math.PI / 180;\n                const lat2 = destAirport.Latitude * Math.PI / 180;\n                const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n                const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n\n                const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                          Math.cos(lat1) * Math.cos(lat2) *\n                          Math.sin(dLon/2) * Math.sin(dLon/2);\n                \n                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n                const directDistance = Math.round(R * c);\n\n                // Calculate total segment distance\n                let totalSegmentDistance = 0;\n                Object.values(selectedFlights).forEach(flights => {\n                  flights.forEach(flight => {\n                    totalSegmentDistance += parseInt(flight.distance || 0);\n                  });\n                });\n\n                const isValid = totalSegmentDistance <= (2 * directDistance);\n                const percentage = Math.round(totalSegmentDistance/directDistance * 100);\n\n                return (\n                  <>\n                    <div style={{ \n                      marginTop: 8,\n                      fontSize: '16px',\n                      fontWeight: 'bold',\n                      color: isValid ? '#52c41a' : '#f5222d',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      gap: '8px',\n                      width: '100%'\n                    }}>\n                      {isValid ? (\n                        <>\n                          <span>✓</span>\n                          <span>ROUTING VALIDATED</span>\n                        </>\n                      ) : (\n                        <>\n                          <span>✗</span>\n                          <span>THIS ROUTING IS INVALID</span>\n                        </>\n                      )}\n                    </div>\n                  </>\n                );\n              })()}\n            </Typography.Text>\n          </div>\n        </div>\n      )}\n\n      <style jsx>{`\n        :global(.ant-table) {\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n        }\n      `}</style>\n    </Modal>\n  );\n};\n\nexport default FlightDetailsModal; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,KAAK,EAAEC,UAAU,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEC,KAAK,QAAQ,MAAM;AACnG,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,iBAAiB,QAAQ,kBAAkB;AACpD,OAAOC,gBAAgB,MAAM,0BAA0B;AACvD,OAAOC,0BAA0B,MAAM,8BAA8B;AACrE,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,OAAOC,WAAW,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAC9C,MAAM;EAAEC;AAAY,CAAC,GAAGnB,UAAU;AAElC,MAAMoB,kBAAkB,GAAGA,CAAC;EAAEC,SAAS;EAAEC,YAAY;EAAEC,OAAO;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7E,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM;IACJ+B,aAAa;IACbC,gBAAgB;IAChBC,MAAM;IACNC,SAAS;IACTC,cAAc;IACdC,iBAAiB;IACjBC,gBAAgB;IAChBC,oBAAoB;IACpBC,YAAY;IACZC,OAAO;IACPC,eAAe;IACfC,gBAAgB;IAChBC,qBAAqB;IACrBC,YAAY;IACZC;EACF,CAAC,GAAGhC,gBAAgB,CAACD,iBAAiB,EAAEe,QAAQ,CAAC;;EAEjD;EACA,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE1D;EACA,MAAMgD,gBAAgB,GAAG;IACvBC,QAAQ,EAAE,CAAC;IACXC,eAAe,EAAE,IAAI;IACrBC,eAAe,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;EACzC,CAAC;;EAED;EACA,MAAMC,sBAAsB,GAAGA,CAACC,YAAY,EAAEC,IAAI,EAAEL,QAAQ,KAAK;IAC/DF,kBAAkB,CAACQ,IAAI,KAAK;MAC1B,GAAGA,IAAI;MACP,CAACF,YAAY,GAAG;QACd,GAAGE,IAAI,CAACF,YAAY,CAAC;QAAE;QACvBC,IAAI;QACJL;MACF;IACF,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMO,gBAAgB,GAAGA,CAACC,OAAO,EAAEJ,YAAY,KAAK;IAClD,MAAM;MAAEC,IAAI,GAAG,CAAC;MAAEL,QAAQ,GAAGD,gBAAgB,CAACC;IAAS,CAAC,GAAGH,eAAe,CAACO,YAAY,CAAC,IAAI,CAAC,CAAC;IAC9F,MAAMK,KAAK,GAAG,CAACJ,IAAI,GAAG,CAAC,IAAIL,QAAQ;IACnC,MAAMU,GAAG,GAAGD,KAAK,GAAGT,QAAQ;IAC5B,OAAOQ,OAAO,CAACG,KAAK,CAACF,KAAK,EAAEC,GAAG,CAAC;EAClC,CAAC;;EAED;EACA1D,SAAS,CAAC,MAAM;IACd,IAAI,CAACuB,SAAS,EAAE;MACde,YAAY,CAAC,CAAC;MACdT,iBAAiB,CAAC,KAAK,CAAC;MACxBE,gBAAgB,CAAC,IAAI,CAAC;MACtBE,SAAS,CAAC,EAAE,CAAC;IACf;EACF,CAAC,EAAE,CAACV,SAAS,CAAC,CAAC;EAEf,MAAMqC,QAAQ,GAAGA,CAAA,KAAM;IACrBxB,gBAAgB,CAACZ,YAAY,CAAC;EAChC,CAAC;EAED,MAAMqC,YAAY,GAAGA,CAAA,KAAM;IACzBpC,OAAO,CAAC,CAAC;EACX,CAAC;EAED,MAAMqC,wBAAwB,GAAIC,SAAS,IAAK;IAC9ChC,gBAAgB,CAACgC,SAAS,CAAC;IAC3BlC,iBAAiB,CAAC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMmC,yBAAyB,GAAGA,CAACC,YAAY,EAAEC,oBAAoB,GAAG,KAAK,EAAEC,eAAe,GAAG,KAAK,KAAK;IACzG,IAAI,CAACrC,aAAa,EAAE;MAClBD,iBAAiB,CAAC,IAAI,CAAC;MACvB;IACF;IAEAA,iBAAiB,CAAC,KAAK,CAAC;;IAExB;IACAO,gBAAgB,CAACZ,YAAY,EAAEyC,YAAY,EAAEC,oBAAoB,EAAEC,eAAe,CAAC;EACrF,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI,CAAClC,cAAc,IAAIA,cAAc,CAACmC,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;;IAE7D;IACA,MAAMC,QAAQ,GAAGpC,cAAc,CAACqC,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;MACtD,IAAIA,MAAM,CAACC,MAAM,EAAE,OAAOF,GAAG,CAAC,CAAC;;MAE/B,IAAI,CAACA,GAAG,CAACC,MAAM,CAACrB,YAAY,CAAC,EAAE;QAC7BoB,GAAG,CAACC,MAAM,CAACrB,YAAY,CAAC,GAAG;UACzBuB,KAAK,EAAEF,MAAM,CAACrB,YAAY;UAC1BwB,KAAK,EAAE,GAAGH,MAAM,CAACI,IAAI,IAAIJ,MAAM,CAACK,EAAE,EAAE;UACpCtB,OAAO,EAAE;QACX,CAAC;MACH;MACAgB,GAAG,CAACC,MAAM,CAACrB,YAAY,CAAC,CAACI,OAAO,CAACuB,IAAI,CAACN,MAAM,CAAC;MAC7C,OAAOD,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,OAAOQ,MAAM,CAACC,OAAO,CAACX,QAAQ,CAAC,CAC5BY,IAAI,CAAC,CAAC,CAACC,CAAC,CAAC,EAAE,CAACC,CAAC,CAAC,KAAKC,QAAQ,CAACF,CAAC,CAAC,GAAGE,QAAQ,CAACD,CAAC,CAAC,CAAC,CAC7CE,GAAG,CAAC,CAAC,CAAClC,YAAY,EAAEI,OAAO,CAAC,KAAK;MAAA,IAAA+B,iBAAA,EAAAC,kBAAA;MAChC;MACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACpC,OAAO,CAACA,OAAO,CAAC,CAAC;;MAE/D;MACA,MAAM;QAAEH,IAAI,GAAG,CAAC;QAAEL,QAAQ,GAAGD,gBAAgB,CAACC,QAAQ;QAAE6C,SAAS;QAAEC;MAAU,CAAC,GAC5EjD,eAAe,CAACO,YAAY,CAAC,IAAI,CAAC,CAAC;;MAErC;MACA,IAAIyC,SAAS,IAAIC,SAAS,EAAE;QAC1BL,WAAW,CAACP,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACzB,IAAIW,MAAM,EAAEC,MAAM;;UAElB;UACA,IAAIH,SAAS,KAAK,SAAS,IAAIA,SAAS,KAAK,UAAU,IAAIA,SAAS,KAAK,OAAO,EAAE;YAChF;YACAE,MAAM,GAAGZ,CAAC,CAACU,SAAS,CAAC,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC;YACtCG,MAAM,GAAGZ,CAAC,CAACS,SAAS,CAAC,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC;UACxC,CAAC,MAAM;YACLE,MAAM,GAAGZ,CAAC,CAACU,SAAS,CAAC;YACrBG,MAAM,GAAGZ,CAAC,CAACS,SAAS,CAAC;UACvB;;UAEA;UACA,IAAI,OAAOE,MAAM,KAAK,QAAQ,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;YAC5D,OAAOF,SAAS,KAAK,QAAQ,GACzBC,MAAM,CAACE,aAAa,CAACD,MAAM,CAAC,GAC5BA,MAAM,CAACC,aAAa,CAACF,MAAM,CAAC;UAClC,CAAC,MAAM,IAAIF,SAAS,KAAK,UAAU,EAAE;YACnC;YACA,IAAI,OAAOE,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;cACtD,MAAM,CAACC,MAAM,EAAEC,QAAQ,CAAC,GAAGL,MAAM,CAACM,KAAK,CAAC,GAAG,CAAC,CAACf,GAAG,CAACgB,IAAI,IAAIjB,QAAQ,CAACiB,IAAI,CAAC,IAAI,CAAC,CAAC;cAC7EP,MAAM,GAAGI,MAAM,GAAG,EAAE,GAAGC,QAAQ;YACjC;YACA,IAAI,OAAOJ,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;cACtD,MAAM,CAACK,MAAM,EAAEC,QAAQ,CAAC,GAAGR,MAAM,CAACK,KAAK,CAAC,GAAG,CAAC,CAACf,GAAG,CAACgB,IAAI,IAAIjB,QAAQ,CAACiB,IAAI,CAAC,IAAI,CAAC,CAAC;cAC7EN,MAAM,GAAGO,MAAM,GAAG,EAAE,GAAGC,QAAQ;YACjC;YACA,OAAOV,SAAS,KAAK,QAAQ,GAAGC,MAAM,GAAGC,MAAM,GAAGA,MAAM,GAAGD,MAAM;UACnE,CAAC,MAAM;YACL;YACA,OAAOD,SAAS,KAAK,QAAQ,GACxBC,MAAM,GAAGC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,GACxBA,MAAM,GAAGD,MAAM,GAAG,CAAC,GAAG,CAAC,CAAE;UAChC;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,MAAMtC,KAAK,GAAG,CAACJ,IAAI,GAAG,CAAC,IAAIL,QAAQ;MACnC,MAAMU,GAAG,GAAGD,KAAK,GAAGT,QAAQ;MAC5B,MAAMyD,gBAAgB,GAAGhB,WAAW,CAAC9B,KAAK,CAACF,KAAK,EAAEC,GAAG,CAAC;MAEtD,OAAO;QACLiB,KAAK,EAAEU,QAAQ,CAACjC,YAAY,CAAC;QAC7BwB,KAAK,EAAE,GAAG,EAAAW,iBAAA,GAAA/B,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,cAAA+B,iBAAA,uBAAlBA,iBAAA,CAAoBV,IAAI,KAAI,GAAG,IAAI,EAAAW,kBAAA,GAAAhC,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,cAAAgC,kBAAA,uBAAlBA,kBAAA,CAAoBV,EAAE,KAAI,GAAG,EAAE;QAC5EtB,OAAO,EAAEiD,gBAAgB;QACzBC,UAAU,EAAEjB,WAAW;QAAE;QACzBkB,KAAK,EAAElB,WAAW,CAACpB;MACrB,CAAC;IACH,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMuC,iBAAiB,GAAGA,CAACxD,YAAY,EAAEyD,UAAU,EAAEC,OAAO,EAAEC,MAAM,KAAK;IACvEjE,kBAAkB,CAACQ,IAAI,KAAK;MAC1B,GAAGA,IAAI;MACP,CAACF,YAAY,GAAG;QACdC,IAAI,EAAEwD,UAAU,CAACG,OAAO;QACxBhE,QAAQ,EAAE6D,UAAU,CAAC7D,QAAQ;QAC7B6C,SAAS,EAAEkB,MAAM,CAACE,KAAK;QACvBnB,SAAS,EAAEiB,MAAM,CAACG;MACpB;IACF,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA7E,YAAY,CAAC,CAAC;;IAEd;IACAP,gBAAgB,CAAC,IAAI,CAAC;;IAEtB;IACAN,OAAO,CAAC,CAAC;EACX,CAAC;EAED,oBACEP,OAAA,CAACjB,KAAK;IACJmH,KAAK,EAAC,gBAAgB;IACtBC,IAAI,EAAE9F,SAAU;IAChB+F,QAAQ,EAAEH,gBAAiB;IAC3BI,MAAM,EAAE,IAAK;IACbC,KAAK,EAAE,IAAK;IACZC,MAAM,EAAE;MACNC,IAAI,EAAE;QACJC,OAAO,EAAE,MAAM;QACfC,SAAS,EAAE,MAAM;QACjBC,QAAQ,EAAE;MACZ,CAAC;MACDC,OAAO,EAAE;QACPC,QAAQ,EAAE;MACZ;IACF,CAAE;IAAAC,QAAA,gBAEF9G,OAAA;MAAK+G,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAG,CAAE;MAAAF,QAAA,gBAC/B9G,OAAA;QAAK+G,KAAK,EAAE;UAAEE,OAAO,EAAE,MAAM;UAAEC,GAAG,EAAE,KAAK;UAAEF,YAAY,EAAE;QAAG,CAAE;QAAAF,QAAA,eAC5D9G,OAAA;UAAK+G,KAAK,EAAE;YAAEE,OAAO,EAAE,MAAM;YAAEC,GAAG,EAAE,KAAK;YAAEC,IAAI,EAAE;UAAE,CAAE;UAAAL,QAAA,gBACnD9G,OAAA,CAACf,KAAK;YACJmI,WAAW,EAAC,iDAAiD;YAC7DC,KAAK,EAAEvG,MAAO;YACdwG,QAAQ,EAAGC,CAAC,IAAKxG,SAAS,CAACwG,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;YAC3CN,KAAK,EAAE;cAAEI,IAAI,EAAE;YAAE;UAAE;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpB,CAAC,eACF5H,OAAA,CAAChB,UAAU;YACToI,WAAW,EAAC,8BAA8B;YAC1CE,QAAQ,EAAGO,IAAI,IAAKpG,YAAY,CAACoG,IAAI,CAAE;YACvCC,YAAY,EAAGhC,OAAO,IAAK;cACzB;cACA,MAAMiC,KAAK,GAAGvI,KAAK,CAAC,CAAC,CAACwI,OAAO,CAAC,KAAK,CAAC;cACpC,MAAMC,OAAO,GAAGF,KAAK,CAACG,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC;cACtC,OAAOpC,OAAO,KAAKA,OAAO,GAAGiC,KAAK,IAAIjC,OAAO,GAAGmC,OAAO,CAAC;YAC1D,CAAE;YACFlB,KAAK,EAAE;cAAET,KAAK,EAAE,GAAG;cAAE6B,UAAU,EAAE;YAAE;UAAE;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC,CAAC,eACF5H,OAAA,CAACZ,MAAM;YACLgJ,IAAI,EAAC,SAAS;YACdC,QAAQ,EAAE,CAACvH,MAAM,IAAI,CAACA,MAAM,CAACwH,WAAW,CAAC,CAAC,CAACC,UAAU,CAAC,KAAK,CAAE;YAC7DC,OAAO,EAAEA,CAAA,KAAMrH,oBAAoB,CAACb,YAAY,CAAE;YAAAwG,QAAA,EACnD;UAED;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EACLlH,cAAc,iBACbV,OAAA;QAAK+G,KAAK,EAAE;UAAE0B,KAAK,EAAE;QAAM,CAAE;QAAA3B,QAAA,EAAC;MAE9B;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAEN5H,OAAA,CAACL,0BAA0B;MACzB+I,UAAU,EAAEnH,gBAAiB;MAC7BjB,YAAY,EAAEA,YAAa;MAC3BqI,iBAAiB,EAAE/F,wBAAyB;MAC5CgG,aAAa,EAAEhI,aAAc;MAC7BiI,QAAQ,EAAE/F;IAA0B;MAAA2E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,EAED3G,iBAAiB,gBAChBjB,OAAA;MAAK+G,KAAK,EAAE;QAAE+B,SAAS,EAAE,QAAQ;QAAEC,MAAM,EAAE;MAAS,CAAE;MAAAjC,QAAA,eACpD9G,OAAA,CAACd,IAAI;QAAAuI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,GAEN,CAAA5G,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEmC,MAAM,IAAG,CAAC,iBACxBnD,OAAA;MAAK+G,KAAK,EAAE;QAAEiC,SAAS,EAAE;MAAE,CAAE;MAAAlC,QAAA,gBAC3B9G,OAAA,CAACX,UAAU,CAAC4J,KAAK;QAACC,KAAK,EAAE,CAAE;QAACnC,KAAK,EAAE;UAAEC,YAAY,EAAE;QAAG,CAAE;QAAAF,QAAA,EAAC;MAEzD;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB,CAAC,EAClB1E,gBAAgB,CAAC,CAAC,CAACkB,GAAG,CAAC,CAAC+E,OAAO,EAAE1F,KAAK;QAAA,IAAA2F,qBAAA,EAAAC,sBAAA;QAAA,oBACrCrJ,OAAA;UAAyB+G,KAAK,EAAE;YAAEC,YAAY,EAAE;UAAG,CAAE;UAAAF,QAAA,gBACnD9G,OAAA;YAAK+G,KAAK,EAAE;cACVE,OAAO,EAAE,MAAM;cACfqC,cAAc,EAAE,eAAe;cAC/BC,UAAU,EAAE,QAAQ;cACpBvC,YAAY,EAAE;YAChB,CAAE;YAAAF,QAAA,gBACA9G,OAAA,CAACX,UAAU,CAAC4J,KAAK;cAACC,KAAK,EAAE,CAAE;cAACnC,KAAK,EAAE;gBAAEgC,MAAM,EAAE;cAAE,CAAE;cAAAjC,QAAA,GAAC,UACxC,EAACqC,OAAO,CAAC1F,KAAK,GAAC,CAAC,EAAC,IAAE,EAAC0F,OAAO,CAACzF,KAAK,EAAC,IAC5C;YAAA;cAAA+D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAkB,CAAC,eACnB5H,OAAA;cAAA8G,QAAA,eACE9G,OAAA,CAACV,UAAU;gBACTkK,IAAI,EAAC,OAAO;gBACZ/D,KAAK,EAAE0D,OAAO,CAAC1D,KAAM;gBACrB3D,QAAQ,EAAE,EAAAsH,qBAAA,GAAAzH,eAAe,CAACwH,OAAO,CAAC1F,KAAK,CAAC,cAAA2F,qBAAA,uBAA9BA,qBAAA,CAAgCtH,QAAQ,KAAID,gBAAgB,CAACC,QAAS;gBAChFgE,OAAO,EAAE,EAAAuD,sBAAA,GAAA1H,eAAe,CAACwH,OAAO,CAAC1F,KAAK,CAAC,cAAA4F,sBAAA,uBAA9BA,sBAAA,CAAgClH,IAAI,KAAI,CAAE;gBACnDmF,QAAQ,EAAEA,CAACnF,IAAI,EAAEL,QAAQ,KAAKG,sBAAsB,CAACkH,OAAO,CAAC1F,KAAK,EAAEtB,IAAI,EAAEL,QAAQ,CAAE;gBACpFC,eAAe,EAAE,IAAK;gBACtB0H,SAAS,EAAEA,CAAChE,KAAK,EAAEiE,KAAK,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,OAAOjE,KAAK,EAAG;gBACnEsB,KAAK,EAAE;kBACLE,OAAO,EAAE,cAAc;kBACvBD,YAAY,EAAE;gBAChB;cAAE;gBAAAS,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACN5H,OAAA,CAACb,KAAK;YACJkC,OAAO,EAAEA,OAAQ;YACjBsI,UAAU,EAAER,OAAO,CAAC7G,OAAQ;YAC5BqD,UAAU,EAAE,KAAM;YAClB6D,IAAI,EAAC,OAAO;YACZlC,QAAQ,EAAEA,CAAC3B,UAAU,EAAEC,OAAO,EAAEC,MAAM,KACpCH,iBAAiB,CAACyD,OAAO,CAAC1F,KAAK,EAAEkC,UAAU,EAAEC,OAAO,EAAEC,MAAM;UAC7D;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,EAGDnE,KAAK,GAAGP,gBAAgB,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,iBACpCnD,OAAA;YAAK+G,KAAK,EAAE;cACVN,OAAO,EAAE,KAAK;cACdsC,MAAM,EAAE,MAAM;cACdD,SAAS,EAAE,QAAQ;cACnBc,UAAU,EAAE;YACd,CAAE;YAAA9C,QAAA,eACA9G,OAAA,CAACX,UAAU,CAACwK,IAAI;cAACC,MAAM;cAAAhD,QAAA,EACpB,CAAC,MAAM;gBACN,MAAMiD,qBAAqB,GAAGzI,eAAe,CAAC6H,OAAO,CAAC1F,KAAK,CAAC;gBAC5D,MAAMuG,kBAAkB,GAAG1I,eAAe,CAAC6H,OAAO,CAAC1F,KAAK,GAAG,CAAC,CAAC;gBAE7D,IAAI,EAACsG,qBAAqB,aAArBA,qBAAqB,eAArBA,qBAAqB,CAAG,CAAC,CAAC,KAAI,EAACC,kBAAkB,aAAlBA,kBAAkB,eAAlBA,kBAAkB,CAAG,CAAC,CAAC,GAAE;kBAC3D,OAAO,uCAAuC;gBAChD;gBAEA,MAAMC,aAAa,GAAGF,qBAAqB,CAAC,CAAC,CAAC;gBAC9C,MAAMG,UAAU,GAAGF,kBAAkB,CAAC,CAAC,CAAC;gBAExC,MAAMG,WAAW,GAAG3K,KAAK,CAACyK,aAAa,CAACG,SAAS,CAAC;gBAClD,MAAMC,aAAa,GAAG7K,KAAK,CAAC0K,UAAU,CAACI,SAAS,CAAC;gBACjD,MAAMC,cAAc,GAAGF,aAAa,CAACG,IAAI,CAACL,WAAW,EAAE,QAAQ,CAAC;;gBAEhE;gBACA,IAAII,cAAc,IAAI,EAAE,GAAG,EAAE,EAAE;kBAC7B,MAAME,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,cAAc,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;kBACnD,MAAMK,cAAc,GAAGF,IAAI,CAACC,KAAK,CAAEJ,cAAc,IAAI,EAAE,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;kBACpE,MAAMM,gBAAgB,GAAGN,cAAc,GAAG,EAAE;kBAE5C,OAAO,sBAAsBE,IAAI,OAAOA,IAAI,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,IAAIG,cAAc,KAAKC,gBAAgB,GAAG;gBACvG,CAAC,MAAM;kBACL;kBACA,MAAMC,KAAK,GAAGJ,IAAI,CAACC,KAAK,CAACJ,cAAc,GAAG,EAAE,CAAC;kBAC7C,MAAMQ,OAAO,GAAGR,cAAc,GAAG,EAAE;kBACnC,OAAO,qBAAqBO,KAAK,KAAKC,OAAO,GAAG;gBAClD;cACF,CAAC,EAAE;YAAC;cAAAtD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACW;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf,CACN;QAAA,GA5EOuB,OAAO,CAAC1F,KAAK;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA6ElB,CAAC;MAAA,CACP,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAER,EAGA9D,MAAM,CAACkH,IAAI,CAAC1J,eAAe,CAAC,CAAC6B,MAAM,GAAG,CAAC,iBACtCnD,OAAA;MAAK+G,KAAK,EAAE;QAAEiC,SAAS,EAAE;MAAG,CAAE;MAAAlC,QAAA,gBAC5B9G,OAAA,CAACX,UAAU,CAAC4J,KAAK;QAACC,KAAK,EAAE,CAAE;QAAApC,QAAA,EAAC;MAAe;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB,CAAC,eAC9D5H,OAAA,CAACb,KAAK;QACJkC,OAAO,EAAE,CACP;UACE6E,KAAK,EAAE,MAAM;UACb+E,SAAS,EAAE,MAAM;UACjBC,GAAG,EAAE;QACP,CAAC,EACD;UACEhF,KAAK,EAAE,IAAI;UACX+E,SAAS,EAAE,IAAI;UACfC,GAAG,EAAE;QACP,CAAC,EACD;UACEhF,KAAK,EAAE,UAAU;UACjB+E,SAAS,EAAE,UAAU;UACrBC,GAAG,EAAE,UAAU;UACfC,MAAM,EAAGC,YAAY,IAAK;YACxB;YACA,IAAI,CAACA,YAAY,IAAIA,YAAY,KAAK,GAAG,EAAE,OAAO,GAAG;YAErD,IAAI;cACF,MAAMC,YAAY,GAAGC,KAAK,CAACC,OAAO,CAACH,YAAY,CAAC,GAAGA,YAAY,GAAGA,YAAY,CAACjG,KAAK,CAAC,IAAI,CAAC;cAE1F,oBACEnF,OAAA;gBAAK+G,KAAK,EAAE;kBAAEE,OAAO,EAAE,MAAM;kBAAEuE,aAAa,EAAE,QAAQ;kBAAEtE,GAAG,EAAE;gBAAM,CAAE;gBAAAJ,QAAA,EAClEuE,YAAY,CAACjH,GAAG,CAAC,CAACqH,WAAW,EAAEhI,KAAK,KAAK;kBACxC,IAAI,CAACgI,WAAW,EAAE,OAAO,IAAI;kBAE7B,MAAMC,OAAO,GAAG9L,QAAQ,CAAC+L,IAAI,CAAC1H,CAAC;oBAAA,IAAA2H,QAAA;oBAAA,OAC7BH,WAAW,CAAClD,UAAU,EAAAqD,QAAA,GAAC3H,CAAC,CAAC4H,KAAK,cAAAD,QAAA,uBAAPA,QAAA,CAASE,OAAO,CAAC,KAAK7H,CAAC,CAACoD,KAAK,GAAG,EAAE,EAAE,CAAC,CAAC;kBAAA,CAC/D,CAAC;kBACD,MAAM0E,WAAW,GAAGL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAErE,KAAK;kBAElC,oBACErH,OAAA;oBAAqC+G,KAAK,EAAE;sBAAEE,OAAO,EAAE,MAAM;sBAAEsC,UAAU,EAAE,QAAQ;sBAAErC,GAAG,EAAE;oBAAM,CAAE;oBAAAJ,QAAA,GAC/FiF,WAAW,iBACV/L,OAAA;sBACEgM,GAAG,EAAE,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,IAAIJ,WAAW,MAAO;sBACpDK,GAAG,EAAEL,WAAY;sBACjBhF,KAAK,EAAE;wBACLT,KAAK,EAAE,MAAM;wBACb+F,MAAM,EAAE,MAAM;wBACdC,SAAS,EAAE,SAAS;wBACpBC,YAAY,EAAE;sBAChB,CAAE;sBACFC,OAAO,EAAGjF,CAAC,IAAK;wBACdA,CAAC,CAACC,MAAM,CAACT,KAAK,CAACE,OAAO,GAAG,MAAM;sBACjC;oBAAE;sBAAAQ,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACH,CACF,EACA6D,WAAW;kBAAA,GAhBJ,GAAGM,WAAW,IAAItI,KAAK,EAAE;oBAAAgE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAiB9B,CAAC;gBAEV,CAAC;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAEV,CAAC,CAAC,OAAO6E,KAAK,EAAE;cACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;cACjD,OAAO,GAAG;YACZ;UACF;QACF,CAAC,EACD;UACEvG,KAAK,EAAE,UAAU;UACjB+E,SAAS,EAAE,UAAU;UACrBC,GAAG,EAAE;QACP,CAAC,EACD;UACEhF,KAAK,EAAE,SAAS;UAChB+E,SAAS,EAAE,SAAS;UACpBC,GAAG,EAAE;QACP,CAAC,EACD;UACEhF,KAAK,EAAE,SAAS;UAChB+E,SAAS,EAAE,SAAS;UACpBC,GAAG,EAAE;QACP,CAAC,EACD;UACEhF,KAAK,EAAE,eAAe;UACtB+E,SAAS,EAAE,cAAc;UACzBC,GAAG,EAAE,cAAc;UACnByB,MAAM,EAAEA,CAACC,CAAC,EAAEnJ,KAAK,MAAM;YACrBoJ,OAAO,EAAEpJ,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAE;UAChC,CAAC;QACH,CAAC,EACD;UACEyC,KAAK,EAAE,wBAAwB;UAC/B+E,SAAS,EAAE,eAAe;UAC1BC,GAAG,EAAE,eAAe;UACpByB,MAAM,EAAEA,CAACC,CAAC,EAAEnJ,KAAK,MAAM;YACrBoJ,OAAO,EAAEpJ,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAE;UAChC,CAAC,CAAC;UACF0H,MAAM,EAAG2B,IAAI,IAAK;YAChB,IAAI,CAACA,IAAI,IAAIA,IAAI,KAAK,KAAK,EAAE,OAAOA,IAAI;YACxC,IAAI;cACF,MAAM,CAACC,KAAK,EAAEC,UAAU,CAAC,GAAGF,IAAI,CAAC3H,KAAK,CAAC,IAAI,CAAC;cAC5C,IAAI,CAAC6H,UAAU,EAAE,OAAOF,IAAI;cAC5B,OAAO,GAAGC,KAAK,KAAKC,UAAU,EAAE;YAClC,CAAC,CAAC,OAAOP,KAAK,EAAE;cACd,OAAOK,IAAI;YACb;UACF;QACF,CAAC,EACD;UACE5G,KAAK,EAAE,qBAAqB;UAC5B+E,SAAS,EAAE,YAAY;UACvBC,GAAG,EAAE,YAAY;UACjByB,MAAM,EAAEA,CAACC,CAAC,EAAEnJ,KAAK,MAAM;YACrBoJ,OAAO,EAAEpJ,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAE;UAChC,CAAC,CAAC;UACF0H,MAAM,EAAG2B,IAAI,IAAK;YAChB,IAAI,CAACA,IAAI,IAAIA,IAAI,KAAK,KAAK,EAAE,OAAOA,IAAI;YACxC,IAAI;cACF,MAAM,CAACC,KAAK,EAAEC,UAAU,CAAC,GAAGF,IAAI,CAAC3H,KAAK,CAAC,IAAI,CAAC;cAC5C,IAAI,CAAC6H,UAAU,EAAE,OAAOF,IAAI;cAC5B,OAAO,GAAGC,KAAK,KAAKC,UAAU,EAAE;YAClC,CAAC,CAAC,OAAOP,KAAK,EAAE;cACd,OAAOK,IAAI;YACb;UACF;QACF,CAAC,CACD;QACFnD,UAAU,EAAE,CAAC,MAAM;UACjB,IAAI;YAAA,IAAAsD,sBAAA,EAAAC,uBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,uBAAA,EAAAC,uBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,iBAAA,EAAAC,kBAAA,EAAAC,sBAAA,EAAAC,uBAAA,EAAAC,iBAAA,EAAAC,kBAAA,EAAAC,uBAAA,EAAAC,uBAAA;YACF,MAAM5K,QAAQ,GAAGU,MAAM,CAACkH,IAAI,CAAC1J,eAAe,CAAC,CAAC8C,GAAG,CAAC6J,MAAM,CAAC,CAACjK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;YAC/E,IAAId,QAAQ,CAACD,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;YAEpC,MAAM+K,iBAAiB,GAAGxD,IAAI,CAACyD,GAAG,CAAC,GAAG/K,QAAQ,CAAC;YAC/C,MAAMgL,gBAAgB,GAAG1D,IAAI,CAAC2D,GAAG,CAAC,GAAGjL,QAAQ,CAAC;;YAE9C;YACA,MAAMkL,iBAAiB,GAAIC,YAAY,IAAK;cAC1C,IAAI;gBACF,MAAMC,UAAU,GAAG,IAAIC,GAAG,CACxBF,YAAY,CACTG,OAAO,CAACC,CAAC;kBAAA,IAAAC,kBAAA;kBAAA,QAAAA,kBAAA,GAAItN,eAAe,CAACqN,CAAC,CAAC,cAAAC,kBAAA,uBAAlBA,kBAAA,CAAoBxK,GAAG,CAACyK,CAAC,IAAIA,CAAC,CAACjP,QAAQ,CAAC;gBAAA,EAAC,CACtDkP,MAAM,CAACC,OAAO,CACnB,CAAC;gBACD,OAAOzD,KAAK,CAAC3H,IAAI,CAAC6K,UAAU,CAAC,CAACQ,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG;cACjD,CAAC,CAAC,OAAOvC,KAAK,EAAE;gBACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;gBACtD,OAAO,GAAG;cACZ;YACF,CAAC;;YAED;YACAC,OAAO,CAACuC,GAAG,CAAC,mBAAmB,EAAE3N,eAAe,CAAC;YACjDoL,OAAO,CAACuC,GAAG,CAAC,WAAW,EAAE7L,QAAQ,CAAC;;YAElC;YACA,MAAM8L,eAAe,GAAIC,WAAW,IAAK;cACvC,IAAI;gBACF;gBACA,MAAMC,aAAa,GAAGvP,QAAQ,CAAC8L,IAAI,CAAC1H,CAAC;kBAAA,IAAAoL,qBAAA,EAAAC,sBAAA;kBAAA,OAAIrL,CAAC,CAACsL,IAAI,OAAAF,qBAAA,GAAK/N,eAAe,CAAC4M,iBAAiB,CAAC,cAAAmB,qBAAA,wBAAAC,sBAAA,GAAlCD,qBAAA,CAAqC,CAAC,CAAC,cAAAC,sBAAA,uBAAvCA,sBAAA,CAAyC3L,IAAI;gBAAA,EAAC;gBAClG,MAAM6L,WAAW,GAAG3P,QAAQ,CAAC8L,IAAI,CAAC1H,CAAC;kBAAA,IAAAwL,qBAAA,EAAAC,sBAAA;kBAAA,OAAIzL,CAAC,CAACsL,IAAI,OAAAE,qBAAA,GAAKnO,eAAe,CAAC8M,gBAAgB,CAAC,cAAAqB,qBAAA,wBAAAC,sBAAA,GAAjCD,qBAAA,CAAoC,CAAC,CAAC,cAAAC,sBAAA,uBAAtCA,sBAAA,CAAwC9L,EAAE;gBAAA,EAAC;gBAE7F,IAAI,CAACwL,aAAa,IAAI,CAACI,WAAW,EAAE,OAAO;kBACzCG,YAAY,EAAE,GAAG;kBACjBC,aAAa,EAAE,GAAG;kBAClBC,UAAU,EAAE;gBACd,CAAC;;gBAED;gBACA,IAAIC,aAAa,GAAG,CAAC;gBACrB,IAAIC,gBAAgB,GAAG,CAAC;gBACxB,IAAIC,aAAa,GAAG,CAAC;gBACrB,IAAIC,oBAAoB,GAAG,CAAC,CAAC,CAAE;;gBAE/BnM,MAAM,CAACC,OAAO,CAACzC,eAAe,CAAC,CAAC4O,OAAO,CAAC,CAAC,CAACtD,CAAC,EAAEtK,OAAO,CAAC,KAAK;kBACxDA,OAAO,CAAC4N,OAAO,CAAC3M,MAAM,IAAI;oBACxB,MAAM4M,QAAQ,GAAGhM,QAAQ,CAACZ,MAAM,CAAC4M,QAAQ,IAAI,CAAC,CAAC;oBAC/CL,aAAa,IAAIK,QAAQ;;oBAEzB;oBACA,IAAI5M,MAAM,CAAC6M,QAAQ,EAAEL,gBAAgB,IAAII,QAAQ;;oBAEjD;oBACA,IAAI5M,MAAM,CAAC6M,QAAQ,IAAI,CAAC7M,MAAM,CAAC8M,KAAK,EAAEJ,oBAAoB,IAAIE,QAAQ;oBACtE,IAAI5M,MAAM,CAAC8M,KAAK,EAAEL,aAAa,IAAIG,QAAQ;kBAC7C,CAAC,CAAC;gBACJ,CAAC,CAAC;;gBAEF;gBACA,MAAMG,OAAO,GAAGxQ,WAAW,CAAC6L,IAAI,CAAC4E,CAAC,IAChCA,CAAC,CAAC,aAAa,CAAC,KAAKnB,aAAa,CAACoB,IAAI,IACvCD,CAAC,CAAC,WAAW,CAAC,KAAKf,WAAW,CAACgB,IAAI,IACnCV,aAAa,IAAIS,CAAC,CAAC,cAAc,CAAC,IAClCT,aAAa,IAAIS,CAAC,CAAC,cAAc,CACnC,CAAC;gBAED,IAAI,CAACD,OAAO,EAAE,OAAO;kBACnBX,YAAY,EAAE,GAAG;kBACjBC,aAAa,EAAE,GAAG;kBAClBC,UAAU,EAAE;gBACd,CAAC;;gBAED;gBACA,MAAMY,kBAAkB,GAAG/F,IAAI,CAACgG,KAAK,CAAEX,gBAAgB,GAAGD,aAAa,GAAI,GAAG,CAAC;gBAC/E,MAAMa,eAAe,GAAGjG,IAAI,CAACgG,KAAK,CAAEV,aAAa,GAAGF,aAAa,GAAI,GAAG,CAAC;gBACzE,MAAMc,sBAAsB,GAAGlG,IAAI,CAACgG,KAAK,CAAET,oBAAoB,GAAGH,aAAa,GAAI,GAAG,CAAC;;gBAEvF;gBACA,MAAMe,aAAa,GAAG1B,WAAW,GAAG,IAAI,GAAG,CAAC;gBAE5C,OAAO;kBACLQ,YAAY,EAAEW,OAAO,CAACQ,OAAO,GAAG,CAACR,OAAO,CAACQ,OAAO,GAAGD,aAAa,EAAEE,cAAc,CAAC,CAAC,GAAG,GAAG;kBACxFnB,aAAa,EAAEU,OAAO,CAACU,QAAQ,GAC7B,GAAG,CAACV,OAAO,CAACU,QAAQ,GAAGH,aAAa,EAAEE,cAAc,CAAC,CAAC,KAAKN,kBAAkB,MAAM,GAAG,GAAG;kBAC3FZ,UAAU,EAAES,OAAO,CAACW,KAAK,IAAIN,eAAe,GAAG,CAAC,GAC9C,GAAG,CAACL,OAAO,CAACW,KAAK,GAAGJ,aAAa,EAAEE,cAAc,CAAC,CAAC,KACjDJ,eAAe,GAAG,CAAC,IAAIC,sBAAsB,GAAG,CAAC,GAC7C,GAAGD,eAAe,QAAQC,sBAAsB,KAAK,GACrDD,eAAe,GAAG,CAAC,GACjB,GAAGA,eAAe,KAAK,GACvB,IAAI,GACT,GAAG;gBACV,CAAC;cACH,CAAC,CAAC,OAAOlE,KAAK,EAAE;gBACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;gBACjD,OAAO;kBACLkD,YAAY,EAAE,GAAG;kBACjBC,aAAa,EAAE,GAAG;kBAClBC,UAAU,EAAE;gBACd,CAAC;cACH;YACF,CAAC;;YAED;YACA,IAAIqB,aAAa,GAAG,IAAI;YACxB,KAAK,IAAIvC,CAAC,GAAGT,iBAAiB,EAAES,CAAC,GAAGP,gBAAgB,EAAEO,CAAC,EAAE,EAAE;cAAA,IAAAwC,mBAAA,EAAAC,gBAAA;cACzD,MAAMnH,aAAa,IAAAkH,mBAAA,GAAG7P,eAAe,CAACqN,CAAC,CAAC,cAAAwC,mBAAA,uBAAlBA,mBAAA,CAAqB,CAAC,CAAC;cAC7C,MAAMjH,UAAU,IAAAkH,gBAAA,GAAG9P,eAAe,CAACqN,CAAC,GAAG,CAAC,CAAC,cAAAyC,gBAAA,uBAAtBA,gBAAA,CAAyB,CAAC,CAAC;cAE9C,IAAInH,aAAa,IAAIC,UAAU,EAAE;gBAC/B,MAAMC,WAAW,GAAG3K,KAAK,CAACyK,aAAa,CAACG,SAAS,CAAC;gBAClD,MAAMC,aAAa,GAAG7K,KAAK,CAAC0K,UAAU,CAACI,SAAS,CAAC;gBACjD,MAAMC,cAAc,GAAGF,aAAa,CAACG,IAAI,CAACL,WAAW,EAAE,QAAQ,CAAC;gBAEhE,IAAII,cAAc,IAAI,EAAE,GAAG,EAAE,EAAE;kBAC7B2G,aAAa,GAAGvC,CAAC;kBACjB;gBACF;cACF;YACF;;YAEA;YACA,MAAM0C,MAAM,GAAGnC,eAAe,CAACgC,aAAa,KAAK,IAAI,CAAC;;YAEtD;YACA,IAAIA,aAAa,KAAK,IAAI,EAAE;cAAA,IAAAI,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;cAC1B,OAAO,CAAC;gBACN3G,GAAG,EAAE,GAAG;gBACRvH,IAAI,EAAE,EAAA2N,sBAAA,GAAAhQ,eAAe,CAAC4M,iBAAiB,CAAC,cAAAoD,sBAAA,wBAAAC,sBAAA,GAAlCD,sBAAA,CAAqC,CAAC,CAAC,cAAAC,sBAAA,uBAAvCA,sBAAA,CAAyC5N,IAAI,KAAI,GAAG;gBAC1DC,EAAE,EAAE,EAAA4N,sBAAA,GAAAlQ,eAAe,CAAC8M,gBAAgB,CAAC,cAAAoD,sBAAA,wBAAAC,sBAAA,GAAjCD,sBAAA,CAAoC,CAAC,CAAC,cAAAC,sBAAA,uBAAtCA,sBAAA,CAAwC7N,EAAE,KAAI,GAAG;gBACrDhE,QAAQ,EAAE0O,iBAAiB,CAAClL,QAAQ,CAAC;gBACrC0O,QAAQ,EAAE,CAAC,CAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,KAAM;kBACf,MAAMC,cAAc,GAAG3S,KAAK,EAAAuS,sBAAA,GAACzQ,eAAe,CAAC4M,iBAAiB,CAAC,cAAA6D,sBAAA,wBAAAC,sBAAA,GAAlCD,sBAAA,CAAqC,CAAC,CAAC,cAAAC,sBAAA,uBAAvCA,sBAAA,CAAyC1H,SAAS,CAAC;kBAChF,MAAM8H,YAAY,GAAG5S,KAAK,EAAAyS,sBAAA,GAAC3Q,eAAe,CAAC8M,gBAAgB,CAAC,cAAA6D,sBAAA,wBAAAC,sBAAA,GAAjCD,sBAAA,CAAoC,CAAC,CAAC,cAAAC,sBAAA,uBAAtCA,sBAAA,CAAwC9H,SAAS,CAAC;kBAC7E,MAAMW,OAAO,GAAGqH,YAAY,CAAC5H,IAAI,CAAC2H,cAAc,EAAE,QAAQ,CAAC;kBAC3D,MAAMrH,KAAK,GAAGJ,IAAI,CAACC,KAAK,CAACI,OAAO,GAAG,EAAE,CAAC;kBACtC,MAAMF,gBAAgB,GAAGE,OAAO,GAAG,EAAE;kBACrC,OAAO,GAAGD,KAAK,KAAKD,gBAAgB,GAAG;gBACzC,CAAC,EAAE,CAAC;gBACJwH,OAAO,EAAE7S,KAAK,EAAAkS,sBAAA,GAACpQ,eAAe,CAAC4M,iBAAiB,CAAC,cAAAwD,sBAAA,wBAAAC,sBAAA,GAAlCD,sBAAA,CAAqC,CAAC,CAAC,cAAAC,sBAAA,uBAAvCA,sBAAA,CAAyCrH,SAAS,CAAC,CAACgI,MAAM,CAAC,aAAa,CAAC;gBACxFC,OAAO,EAAE/S,KAAK,EAAAoS,sBAAA,GAACtQ,eAAe,CAAC8M,gBAAgB,CAAC,cAAAwD,sBAAA,wBAAAC,sBAAA,GAAjCD,sBAAA,CAAoC,CAAC,CAAC,cAAAC,sBAAA,uBAAtCA,sBAAA,CAAwCzH,SAAS,CAAC,CAACkI,MAAM,CAAC,aAAa,CAAC;gBACvF,GAAGjB;cACL,CAAC,CAAC;YACJ;;YAEA;YACA,OAAO,CACL;cACEnG,GAAG,EAAE,GAAG;cACRvH,IAAI,EAAE,EAAAsJ,sBAAA,GAAA3L,eAAe,CAAC4M,iBAAiB,CAAC,cAAAjB,sBAAA,wBAAAC,uBAAA,GAAlCD,sBAAA,CAAqC,CAAC,CAAC,cAAAC,uBAAA,uBAAvCA,uBAAA,CAAyCvJ,IAAI,KAAI,GAAG;cAC1DC,EAAE,EAAE,EAAAuJ,qBAAA,GAAA7L,eAAe,CAAC4P,aAAa,CAAC,cAAA/D,qBAAA,wBAAAC,sBAAA,GAA9BD,qBAAA,CAAiC,CAAC,CAAC,cAAAC,sBAAA,uBAAnCA,sBAAA,CAAqCxJ,EAAE,KAAI,GAAG;cAClDhE,QAAQ,EAAE0O,iBAAiB,CAAClL,QAAQ,CAAC0L,MAAM,CAACH,CAAC,IAAIA,CAAC,IAAIuC,aAAa,CAAC,CAAC;cACrEY,QAAQ,EAAE,CAAC,CAAAU,uBAAA,EAAAC,uBAAA,EAAAC,sBAAA,EAAAC,sBAAA,KAAM;gBACf,MAAMR,cAAc,GAAG3S,KAAK,EAAAgT,uBAAA,GAAClR,eAAe,CAAC4M,iBAAiB,CAAC,cAAAsE,uBAAA,wBAAAC,uBAAA,GAAlCD,uBAAA,CAAqC,CAAC,CAAC,cAAAC,uBAAA,uBAAvCA,uBAAA,CAAyCnI,SAAS,CAAC;gBAChF,MAAMsI,eAAe,GAAGpT,KAAK,EAAAkT,sBAAA,GAACpR,eAAe,CAAC4P,aAAa,CAAC,cAAAwB,sBAAA,wBAAAC,sBAAA,GAA9BD,sBAAA,CAAiC,CAAC,CAAC,cAAAC,sBAAA,uBAAnCA,sBAAA,CAAqCvI,SAAS,CAAC;gBAC7E,MAAMW,OAAO,GAAG6H,eAAe,CAACpI,IAAI,CAAC2H,cAAc,EAAE,QAAQ,CAAC;gBAC9D,MAAMrH,KAAK,GAAGJ,IAAI,CAACC,KAAK,CAACI,OAAO,GAAG,EAAE,CAAC;gBACtC,MAAMF,gBAAgB,GAAGE,OAAO,GAAG,EAAE;gBACrC,OAAO,GAAGD,KAAK,KAAKD,gBAAgB,GAAG;cACzC,CAAC,EAAE,CAAC;cACJwH,OAAO,EAAE7S,KAAK,EAAA6N,uBAAA,GAAC/L,eAAe,CAAC4M,iBAAiB,CAAC,cAAAb,uBAAA,wBAAAC,uBAAA,GAAlCD,uBAAA,CAAqC,CAAC,CAAC,cAAAC,uBAAA,uBAAvCA,uBAAA,CAAyChD,SAAS,CAAC,CAACgI,MAAM,CAAC,aAAa,CAAC;cACxFC,OAAO,EAAE/S,KAAK,EAAA+N,sBAAA,GAACjM,eAAe,CAAC4P,aAAa,CAAC,cAAA3D,sBAAA,wBAAAC,sBAAA,GAA9BD,sBAAA,CAAiC,CAAC,CAAC,cAAAC,sBAAA,uBAAnCA,sBAAA,CAAqCpD,SAAS,CAAC,CAACkI,MAAM,CAAC,aAAa,CAAC;cACpF,GAAGjB,MAAM,CAAE;YACb,CAAC,EACD;cACEnG,GAAG,EAAE,GAAG;cACRvH,IAAI,EAAE,EAAA8J,iBAAA,GAAAnM,eAAe,CAAC4P,aAAa,GAAG,CAAC,CAAC,cAAAzD,iBAAA,wBAAAC,kBAAA,GAAlCD,iBAAA,CAAqC,CAAC,CAAC,cAAAC,kBAAA,uBAAvCA,kBAAA,CAAyC/J,IAAI,KAAI,GAAG;cAC1DC,EAAE,EAAE,EAAA+J,sBAAA,GAAArM,eAAe,CAAC8M,gBAAgB,CAAC,cAAAT,sBAAA,wBAAAC,uBAAA,GAAjCD,sBAAA,CAAoC,CAAC,CAAC,cAAAC,uBAAA,uBAAtCA,uBAAA,CAAwChK,EAAE,KAAI,GAAG;cACrDhE,QAAQ,EAAE0O,iBAAiB,CAAClL,QAAQ,CAAC0L,MAAM,CAACH,CAAC,IAAIA,CAAC,GAAGuC,aAAa,CAAC,CAAC;cACpEY,QAAQ,EAAE,CAAC,CAAAe,iBAAA,EAAAC,kBAAA,EAAAC,uBAAA,EAAAC,uBAAA,KAAM;gBACf,MAAMC,iBAAiB,GAAGzT,KAAK,EAAAqT,iBAAA,GAACvR,eAAe,CAAC4P,aAAa,GAAG,CAAC,CAAC,cAAA2B,iBAAA,wBAAAC,kBAAA,GAAlCD,iBAAA,CAAqC,CAAC,CAAC,cAAAC,kBAAA,uBAAvCA,kBAAA,CAAyCxI,SAAS,CAAC;gBACnF,MAAM8H,YAAY,GAAG5S,KAAK,EAAAuT,uBAAA,GAACzR,eAAe,CAAC8M,gBAAgB,CAAC,cAAA2E,uBAAA,wBAAAC,uBAAA,GAAjCD,uBAAA,CAAoC,CAAC,CAAC,cAAAC,uBAAA,uBAAtCA,uBAAA,CAAwC5I,SAAS,CAAC;gBAC7E,MAAMW,OAAO,GAAGqH,YAAY,CAAC5H,IAAI,CAACyI,iBAAiB,EAAE,QAAQ,CAAC;gBAC9D,MAAMnI,KAAK,GAAGJ,IAAI,CAACC,KAAK,CAACI,OAAO,GAAG,EAAE,CAAC;gBACtC,MAAMF,gBAAgB,GAAGE,OAAO,GAAG,EAAE;gBACrC,OAAO,GAAGD,KAAK,KAAKD,gBAAgB,GAAG;cACzC,CAAC,EAAE,CAAC;cACJwH,OAAO,EAAE7S,KAAK,EAAAqO,iBAAA,GAACvM,eAAe,CAAC4P,aAAa,GAAG,CAAC,CAAC,cAAArD,iBAAA,wBAAAC,kBAAA,GAAlCD,iBAAA,CAAqC,CAAC,CAAC,cAAAC,kBAAA,uBAAvCA,kBAAA,CAAyCxD,SAAS,CAAC,CAACgI,MAAM,CAAC,aAAa,CAAC;cACxFC,OAAO,EAAE/S,KAAK,EAAAuO,uBAAA,GAACzM,eAAe,CAAC8M,gBAAgB,CAAC,cAAAL,uBAAA,wBAAAC,uBAAA,GAAjCD,uBAAA,CAAoC,CAAC,CAAC,cAAAC,uBAAA,uBAAtCA,uBAAA,CAAwC5D,SAAS,CAAC,CAACkI,MAAM,CAAC,aAAa,CAAC;cACvF3C,YAAY,EAAE,IAAI;cAAG;cACrBC,aAAa,EAAE,IAAI;cAAE;cACrBC,UAAU,EAAE,IAAI,CAAK;YACvB,CAAC,CACF;UACH,CAAC,CAAC,OAAOpD,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;YACpD,OAAO,EAAE;UACX;QACF,CAAC,EAAE,CAAE;QACL9G,UAAU,EAAE,KAAM;QAClB6D,IAAI,EAAC;MAAO;QAAA/B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,eAGF5H,OAAA;QAAK+G,KAAK,EAAE;UAAEiC,SAAS,EAAE,EAAE;UAAEY,UAAU,EAAE;QAAqE,CAAE;QAAA9C,QAAA,eAC9G9G,OAAA,CAACX,UAAU,CAACwK,IAAI;UAAA/C,QAAA,EACb,CAAC,MAAM;YACN,MAAMoH,iBAAiB,GAAGxD,IAAI,CAACyD,GAAG,CAAC,GAAGrK,MAAM,CAACkH,IAAI,CAAC1J,eAAe,CAAC,CAAC8C,GAAG,CAAC6J,MAAM,CAAC,CAAC;YAC/E,MAAMG,gBAAgB,GAAG1D,IAAI,CAAC2D,GAAG,CAAC,GAAGvK,MAAM,CAACkH,IAAI,CAAC1J,eAAe,CAAC,CAAC8C,GAAG,CAAC6J,MAAM,CAAC,CAAC;YAC9E,MAAMmB,aAAa,GAAGvP,QAAQ,CAAC8L,IAAI,CAAC1H,CAAC;cAAA,IAAAiP,uBAAA,EAAAC,uBAAA;cAAA,OAAIlP,CAAC,CAACsL,IAAI,OAAA2D,uBAAA,GAAK5R,eAAe,CAAC4M,iBAAiB,CAAC,cAAAgF,uBAAA,wBAAAC,uBAAA,GAAlCD,uBAAA,CAAqC,CAAC,CAAC,cAAAC,uBAAA,uBAAvCA,uBAAA,CAAyCxP,IAAI;YAAA,EAAC;YAClG,MAAM6L,WAAW,GAAG3P,QAAQ,CAAC8L,IAAI,CAAC1H,CAAC;cAAA,IAAAmP,uBAAA,EAAAC,uBAAA;cAAA,OAAIpP,CAAC,CAACsL,IAAI,OAAA6D,uBAAA,GAAK9R,eAAe,CAAC8M,gBAAgB,CAAC,cAAAgF,uBAAA,wBAAAC,uBAAA,GAAjCD,uBAAA,CAAoC,CAAC,CAAC,cAAAC,uBAAA,uBAAtCA,uBAAA,CAAwCzP,EAAE;YAAA,EAAC;YAE7F,IAAI,CAACwL,aAAa,IAAI,CAACI,WAAW,EAAE,OAAO,gDAAgD;;YAE3F;YACA,MAAM8D,CAAC,GAAG,IAAI,CAAC,CAAC;YAChB,MAAMC,IAAI,GAAGnE,aAAa,CAACoE,QAAQ,GAAG9I,IAAI,CAAC+I,EAAE,GAAG,GAAG;YACnD,MAAMC,IAAI,GAAGlE,WAAW,CAACgE,QAAQ,GAAG9I,IAAI,CAAC+I,EAAE,GAAG,GAAG;YACjD,MAAME,IAAI,GAAG,CAACnE,WAAW,CAACgE,QAAQ,GAAGpE,aAAa,CAACoE,QAAQ,IAAI9I,IAAI,CAAC+I,EAAE,GAAG,GAAG;YAC5E,MAAMG,IAAI,GAAG,CAACpE,WAAW,CAACqE,SAAS,GAAGzE,aAAa,CAACyE,SAAS,IAAInJ,IAAI,CAAC+I,EAAE,GAAG,GAAG;YAE9E,MAAMxP,CAAC,GAAGyG,IAAI,CAACoJ,GAAG,CAACH,IAAI,GAAC,CAAC,CAAC,GAAGjJ,IAAI,CAACoJ,GAAG,CAACH,IAAI,GAAC,CAAC,CAAC,GACnCjJ,IAAI,CAACqJ,GAAG,CAACR,IAAI,CAAC,GAAG7I,IAAI,CAACqJ,GAAG,CAACL,IAAI,CAAC,GAC/BhJ,IAAI,CAACoJ,GAAG,CAACF,IAAI,GAAC,CAAC,CAAC,GAAGlJ,IAAI,CAACoJ,GAAG,CAACF,IAAI,GAAC,CAAC,CAAC;YAE7C,MAAMI,CAAC,GAAG,CAAC,GAAGtJ,IAAI,CAACuJ,KAAK,CAACvJ,IAAI,CAACwJ,IAAI,CAACjQ,CAAC,CAAC,EAAEyG,IAAI,CAACwJ,IAAI,CAAC,CAAC,GAACjQ,CAAC,CAAC,CAAC;YACtD,MAAMkQ,cAAc,GAAGzJ,IAAI,CAACgG,KAAK,CAAC4C,CAAC,GAAGU,CAAC,CAAC;;YAExC;YACA,IAAII,oBAAoB,GAAG,CAAC;YAC5BtQ,MAAM,CAACuQ,MAAM,CAAC/S,eAAe,CAAC,CAAC4O,OAAO,CAAC5N,OAAO,IAAI;cAChDA,OAAO,CAAC4N,OAAO,CAAC3M,MAAM,IAAI;gBACxB6Q,oBAAoB,IAAIjQ,QAAQ,CAACZ,MAAM,CAAC4M,QAAQ,IAAI,CAAC,CAAC;cACxD,CAAC,CAAC;YACJ,CAAC,CAAC;YAEF,MAAMmE,OAAO,GAAGF,oBAAoB,IAAK,CAAC,GAAGD,cAAe;YAC5D,MAAMnH,UAAU,GAAGtC,IAAI,CAACgG,KAAK,CAAC0D,oBAAoB,GAACD,cAAc,GAAG,GAAG,CAAC;YAExE,oBACEnU,OAAA,CAAAE,SAAA;cAAA4G,QAAA,eACE9G,OAAA;gBAAK+G,KAAK,EAAE;kBACViC,SAAS,EAAE,CAAC;kBACZuL,QAAQ,EAAE,MAAM;kBAChBC,UAAU,EAAE,MAAM;kBAClB/L,KAAK,EAAE6L,OAAO,GAAG,SAAS,GAAG,SAAS;kBACtCrN,OAAO,EAAE,MAAM;kBACfsC,UAAU,EAAE,QAAQ;kBACpBD,cAAc,EAAE,QAAQ;kBACxBpC,GAAG,EAAE,KAAK;kBACVZ,KAAK,EAAE;gBACT,CAAE;gBAAAQ,QAAA,EACCwN,OAAO,gBACNtU,OAAA,CAAAE,SAAA;kBAAA4G,QAAA,gBACE9G,OAAA;oBAAA8G,QAAA,EAAM;kBAAC;oBAAAW,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM,CAAC,eACd5H,OAAA;oBAAA8G,QAAA,EAAM;kBAAiB;oBAAAW,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM,CAAC;gBAAA,eAC9B,CAAC,gBAEH5H,OAAA,CAAAE,SAAA;kBAAA4G,QAAA,gBACE9G,OAAA;oBAAA8G,QAAA,EAAM;kBAAC;oBAAAW,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM,CAAC,eACd5H,OAAA;oBAAA8G,QAAA,EAAM;kBAAuB;oBAAAW,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM,CAAC;gBAAA,eACpC;cACH;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE;YAAC,gBACN,CAAC;UAEP,CAAC,EAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACW;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAED5H,OAAA;MAAOyU,GAAG;MAAA3N,QAAA,EAAE;AAClB;AACA;AACA;AACA;IAAO;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEZ,CAAC;AAACnH,EAAA,CA3uBIL,kBAAkB;EAAA,QAkBlBV,gBAAgB;AAAA;AAAAgV,EAAA,GAlBhBtU,kBAAkB;AA6uBxB,eAAeA,kBAAkB;AAAC,IAAAsU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}