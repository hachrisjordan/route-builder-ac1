{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nexport default function useFlightDetails() {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const processFlightData = (data, timeWindow) => {\n    var _data$results, _data$results$, _data$results$$data;\n    const flights = {};\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    const rawFlights = ((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : _data$results$$data.data) || [];\n    console.log(`  Processing ${rawFlights.length} raw flights`);\n    rawFlights.filter(trip => {\n      if (trip.Stops !== 0) {\n        console.log(`  Skipping flight with ${trip.Stops} stops`);\n        return false;\n      }\n      if (timeWindow) {\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n        const isValid = departureTime.isAfter(timeWindow.earliestDeparture) && departureTime.isBefore(timeWindow.latestDeparture);\n        if (!isValid) {\n          console.log(`  Skipping flight outside time window: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n        }\n        return isValid;\n      }\n      return true;\n    }).forEach(trip => {\n      const flightNumber = trip.FlightNumbers;\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n      const existingFlight = flights[flightNumber];\n\n      // If this is a duplicate flight, only keep the later one\n      if (existingFlight) {\n        const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n        if (departureTime.isBefore(existingDeparture)) {\n          return; // Skip this one, keep the existing later flight\n        }\n      }\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\n      const baseDayjs = dayjs(baseDate);\n\n      // Calculate day difference from base date\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(trip.Carriers),\n        aircraft: trip.Aircraft[0],\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: trip.DepartsAt.replace('Z', ''),\n        // Store without Z\n        ArrivesAt: trip.ArrivesAt.replace('Z', ''),\n        // Store without Z\n        economy: false,\n        business: false,\n        first: false\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const processSegment = async (from, to, baseDate, timeWindow = null, nextSegmentFlights = null) => {\n    const API_URL = 'https://backend-284998006367.us-central1.run.app';\n    let earliestArrival = null;\n    let latestArrival = null;\n    let latestPossibleArrival = null;\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`No route found for ${from}-${to}`);\n      return {\n        flights: [],\n        earliestArrival: null,\n        latestArrival: null\n      };\n    }\n    console.log(`Processing route ${from}-${to}:`);\n    try {\n      const response = await fetch(`${API_URL}/api/seats/${route.ID}`, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey,\n          'Segment-ID': route.ID\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch flight details for ${from}-${to}`);\n      }\n      const data = await response.json();\n      const flights = processFlightData(data, timeWindow);\n      if (flights.length > 0) {\n        earliestArrival = dayjs(flights[0].ArrivesAt);\n        latestArrival = dayjs(flights[flights.length - 1].ArrivesAt);\n      }\n      if (nextSegmentFlights && nextSegmentFlights.length > 0) {\n        // Find earliest departure in next segment\n        const earliestNextDeparture = nextSegmentFlights.map(f => dayjs(f.DepartsAt.replace('Z', ''))).reduce((earliest, curr) => earliest.isBefore(curr) ? earliest : curr);\n        latestPossibleArrival = earliestNextDeparture;\n        console.log(`  Latest possible arrival for connection: ${latestPossibleArrival.format('YYYY-MM-DD HH:mm')}`);\n      }\n      return {\n        route: `${from}-${to}`,\n        flights,\n        earliestArrival,\n        latestArrival\n      };\n    } catch (error) {\n      console.error(`Error processing segment ${from}-${to}:`, error);\n      return {\n        flights: [],\n        earliestArrival: null,\n        latestArrival: null\n      };\n    }\n  };\n  const handleDateSearch = async currentRoute => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    const processedSegments = [];\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    try {\n      // Process all segments first\n      for (let i = 0; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        const prevSegment = processedSegments[i - 1];\n        let timeWindow = null;\n        if (prevSegment) {\n          if (prevSegment.flights.length === 0) {\n            const prevFrom = currentRoute[i - 1];\n            const prevTo = currentRoute[i];\n            const route = routeDetails.find(r => r.origin === prevFrom && r.destination === prevTo);\n            const minConnectionHours = Math.ceil(((route === null || route === void 0 ? void 0 : route.distance) || 1000) / 575);\n            const baseTime = prevSegment.earliestArrival || dayjs(baseDate);\n            const endTime = prevSegment.latestArrival || baseTime;\n            timeWindow = {\n              earliestDeparture: baseTime.add(minConnectionHours, 'hour'),\n              latestDeparture: endTime.add(24, 'hour').add(minConnectionHours, 'hour')\n            };\n          } else {\n            timeWindow = {\n              earliestDeparture: prevSegment.earliestArrival,\n              latestDeparture: prevSegment.latestArrival.add(24, 'hour')\n            };\n          }\n        }\n        const segment = await processSegment(from, to, baseDate, timeWindow);\n        processedSegments.push(segment);\n      }\n\n      // Now revisit first segment and filter out invalid connections\n      if (processedSegments.length >= 2 && processedSegments[1].flights.length > 0) {\n        console.log('\\nRevising first segment based on second segment departures:');\n        const firstSegment = processedSegments[0];\n        const secondSegment = processedSegments[1];\n        const earliestSecondDeparture = secondSegment.flights.map(f => dayjs(f.DepartsAt)).reduce((earliest, curr) => earliest.isBefore(curr) ? earliest : curr);\n        console.log(`  Second segment earliest departure: ${earliestSecondDeparture.format('YYYY-MM-DD HH:mm')}`);\n        firstSegment.flights = firstSegment.flights.filter(flight => {\n          const arrivalTime = dayjs(flight.ArrivesAt);\n          const arrivalDate = arrivalTime.format('YYYY-MM-DD');\n          const departureDate = earliestSecondDeparture.format('YYYY-MM-DD');\n\n          // If arrival is on an earlier date, keep it\n          if (arrivalDate < departureDate) {\n            console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - keep (earlier date)`);\n            return true;\n          }\n\n          // If same date, compare times\n          if (arrivalDate === departureDate) {\n            const isValid = arrivalTime.isBefore(earliestSecondDeparture);\n            console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - ${isValid ? 'keep' : 'remove'} (same date)`);\n            return isValid;\n          }\n\n          // If arrival is on a later date, remove it\n          console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - remove (later date)`);\n          return false;\n        });\n\n        // Update arrival bounds if needed\n        if (firstSegment.flights.length > 0) {\n          firstSegment.earliestArrival = dayjs(firstSegment.flights[0].ArrivesAt);\n          firstSegment.latestArrival = dayjs(firstSegment.flights[firstSegment.flights.length - 1].ArrivesAt);\n        } else {\n          firstSegment.earliestArrival = null;\n          firstSegment.latestArrival = null;\n        }\n      }\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\n    } catch (error) {\n      console.error('Error fetching segment details:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const resetDetails = () => {\n    setSelectedDates(null);\n    setApiKey('');\n    setSegmentDetails([]);\n  };\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    resetDetails\n  };\n}\n_s(useFlightDetails, \"eNL6x3p2kS9/dPwFDvdCZanJHcQ=\");","map":{"version":3,"names":["useState","dayjs","routeDetails","airlines","useFlightDetails","_s","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","getAirlineName","code","airline","find","a","value","label","replace","processFlightData","data","timeWindow","_data$results","_data$results$","_data$results$$data","flights","baseDate","format","rawFlights","results","console","log","length","filter","trip","Stops","departureTime","DepartsAt","isValid","isAfter","earliestDeparture","isBefore","latestDeparture","forEach","flightNumber","FlightNumbers","existingFlight","existingDeparture","arrivalTime","ArrivesAt","baseDayjs","departDayDiff","diff","arrivalDayDiff","from","OriginAirport","to","DestinationAirport","Carriers","aircraft","Aircraft","departs","arrives","economy","business","first","Cabin","toLowerCase","Object","values","processSegment","nextSegmentFlights","API_URL","earliestArrival","latestArrival","latestPossibleArrival","route","r","origin","destination","response","fetch","ID","method","headers","ok","Error","json","earliestNextDeparture","map","f","reduce","earliest","curr","error","handleDateSearch","currentRoute","processedSegments","i","prevSegment","prevFrom","prevTo","minConnectionHours","Math","ceil","distance","baseTime","endTime","add","segment","push","firstSegment","secondSegment","earliestSecondDeparture","flight","arrivalDate","departureDate","flatMap","resetDetails"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport routeDetails from '../../../data/route_details.json';\r\nimport airlines from '../../../data/airlines';\r\n\r\nexport default function useFlightDetails() {\r\n  const [selectedDates, setSelectedDates] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [segmentDetails, setSegmentDetails] = useState([]);\r\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\r\n\r\n  const getAirlineName = (code) => {\r\n    const airline = airlines.find(a => a.value === code);\r\n    return airline ? airline.label.replace(` (${code})`, '') : code;\r\n  };\r\n\r\n  const processFlightData = (data, timeWindow) => {\r\n    const flights = {};\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    const rawFlights = data.results?.[0]?.data?.data || [];\r\n    console.log(`  Processing ${rawFlights.length} raw flights`);\r\n    \r\n    rawFlights\r\n      .filter(trip => {\r\n        if (trip.Stops !== 0) {\r\n          console.log(`  Skipping flight with ${trip.Stops} stops`);\r\n          return false;\r\n        }\r\n        \r\n        if (timeWindow) {\r\n          const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));  // Remove Z to treat as local time\r\n          const isValid = departureTime.isAfter(timeWindow.earliestDeparture) && \r\n                         departureTime.isBefore(timeWindow.latestDeparture);\r\n          \r\n          if (!isValid) {\r\n            console.log(`  Skipping flight outside time window: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\r\n          }\r\n          return isValid;\r\n        }\r\n        \r\n        return true;\r\n      })\r\n      .forEach(trip => {\r\n        const flightNumber = trip.FlightNumbers;\r\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\r\n        const existingFlight = flights[flightNumber];\r\n\r\n        // If this is a duplicate flight, only keep the later one\r\n        if (existingFlight) {\r\n          const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\r\n          if (departureTime.isBefore(existingDeparture)) {\r\n            return; // Skip this one, keep the existing later flight\r\n          }\r\n        }\r\n\r\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\r\n        const baseDayjs = dayjs(baseDate);\r\n        \r\n        // Calculate day difference from base date\r\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\r\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\r\n\r\n        flights[flightNumber] = {\r\n          from: trip.OriginAirport,\r\n          to: trip.DestinationAirport,\r\n          flightNumber: flightNumber,\r\n          airlines: getAirlineName(trip.Carriers),\r\n          aircraft: trip.Aircraft[0],\r\n          departs: departDayDiff > 0 ? \r\n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \r\n            departureTime.format('HH:mm'),\r\n          arrives: arrivalDayDiff > 0 ? \r\n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \r\n            arrivalTime.format('HH:mm'),\r\n          DepartsAt: trip.DepartsAt.replace('Z', ''), // Store without Z\r\n          ArrivesAt: trip.ArrivesAt.replace('Z', ''), // Store without Z\r\n          economy: false,\r\n          business: false,\r\n          first: false\r\n        };\r\n        \r\n        switch(trip.Cabin.toLowerCase()) {\r\n          case 'economy':\r\n            flights[flightNumber].economy = true;\r\n            break;\r\n          case 'business':\r\n            flights[flightNumber].business = true;\r\n            break;\r\n          case 'first':\r\n            flights[flightNumber].first = true;\r\n            break;\r\n        }\r\n      });\r\n    \r\n    return Object.values(flights);\r\n  };\r\n\r\n  const processSegment = async (from, to, baseDate, timeWindow = null, nextSegmentFlights = null) => {\r\n    const API_URL = 'https://backend-284998006367.us-central1.run.app';\r\n    let earliestArrival = null;\r\n    let latestArrival = null;\r\n    let latestPossibleArrival = null;\r\n    \r\n    const route = routeDetails.find(r => \r\n      r.origin === from && \r\n      r.destination === to\r\n    );\r\n\r\n    if (!route) {\r\n      console.log(`No route found for ${from}-${to}`);\r\n      return { flights: [], earliestArrival: null, latestArrival: null };\r\n    }\r\n\r\n    console.log(`Processing route ${from}-${to}:`);\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/api/seats/${route.ID}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'accept': 'application/json',\r\n          'Partner-Authorization': apiKey,\r\n          'Segment-ID': route.ID\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch flight details for ${from}-${to}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const flights = processFlightData(data, timeWindow);\r\n\r\n      if (flights.length > 0) {\r\n        earliestArrival = dayjs(flights[0].ArrivesAt);\r\n        latestArrival = dayjs(flights[flights.length - 1].ArrivesAt);\r\n      }\r\n\r\n      if (nextSegmentFlights && nextSegmentFlights.length > 0) {\r\n        // Find earliest departure in next segment\r\n        const earliestNextDeparture = nextSegmentFlights\r\n          .map(f => dayjs(f.DepartsAt.replace('Z', '')))\r\n          .reduce((earliest, curr) => earliest.isBefore(curr) ? earliest : curr);\r\n        \r\n        latestPossibleArrival = earliestNextDeparture;\r\n        console.log(`  Latest possible arrival for connection: ${latestPossibleArrival.format('YYYY-MM-DD HH:mm')}`);\r\n      }\r\n\r\n      return {\r\n        route: `${from}-${to}`,\r\n        flights,\r\n        earliestArrival,\r\n        latestArrival\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error(`Error processing segment ${from}-${to}:`, error);\r\n      return { flights: [], earliestArrival: null, latestArrival: null };\r\n    }\r\n  };\r\n\r\n  const handleDateSearch = async (currentRoute) => {\r\n    if (!selectedDates || !currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingSegments(true);\r\n    const processedSegments = [];\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    try {\r\n      // Process all segments first\r\n      for (let i = 0; i < currentRoute.length - 1; i++) {\r\n        const from = currentRoute[i];\r\n        const to = currentRoute[i + 1];\r\n        const prevSegment = processedSegments[i - 1];\r\n        \r\n        let timeWindow = null;\r\n        if (prevSegment) {\r\n          if (prevSegment.flights.length === 0) {\r\n            const prevFrom = currentRoute[i - 1];\r\n            const prevTo = currentRoute[i];\r\n            const route = routeDetails.find(r => \r\n              r.origin === prevFrom && \r\n              r.destination === prevTo\r\n            );\r\n            const minConnectionHours = Math.ceil((route?.distance || 1000) / 575);\r\n            \r\n            const baseTime = prevSegment.earliestArrival || dayjs(baseDate);\r\n            const endTime = prevSegment.latestArrival || baseTime;\r\n            \r\n            timeWindow = {\r\n              earliestDeparture: baseTime.add(minConnectionHours, 'hour'),\r\n              latestDeparture: endTime.add(24, 'hour').add(minConnectionHours, 'hour')\r\n            };\r\n          } else {\r\n            timeWindow = {\r\n              earliestDeparture: prevSegment.earliestArrival,\r\n              latestDeparture: prevSegment.latestArrival.add(24, 'hour')\r\n            };\r\n          }\r\n        }\r\n\r\n        const segment = await processSegment(from, to, baseDate, timeWindow);\r\n        processedSegments.push(segment);\r\n      }\r\n\r\n      // Now revisit first segment and filter out invalid connections\r\n      if (processedSegments.length >= 2 && processedSegments[1].flights.length > 0) {\r\n        console.log('\\nRevising first segment based on second segment departures:');\r\n        const firstSegment = processedSegments[0];\r\n        const secondSegment = processedSegments[1];\r\n        \r\n        const earliestSecondDeparture = secondSegment.flights\r\n          .map(f => dayjs(f.DepartsAt))\r\n          .reduce((earliest, curr) => earliest.isBefore(curr) ? earliest : curr);\r\n        \r\n        console.log(`  Second segment earliest departure: ${earliestSecondDeparture.format('YYYY-MM-DD HH:mm')}`);\r\n        \r\n        firstSegment.flights = firstSegment.flights.filter(flight => {\r\n          const arrivalTime = dayjs(flight.ArrivesAt);\r\n          const arrivalDate = arrivalTime.format('YYYY-MM-DD');\r\n          const departureDate = earliestSecondDeparture.format('YYYY-MM-DD');\r\n          \r\n          // If arrival is on an earlier date, keep it\r\n          if (arrivalDate < departureDate) {\r\n            console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - keep (earlier date)`);\r\n            return true;\r\n          }\r\n          \r\n          // If same date, compare times\r\n          if (arrivalDate === departureDate) {\r\n            const isValid = arrivalTime.isBefore(earliestSecondDeparture);\r\n            console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - ${isValid ? 'keep' : 'remove'} (same date)`);\r\n            return isValid;\r\n          }\r\n          \r\n          // If arrival is on a later date, remove it\r\n          console.log(`  Checking ${flight.flightNumber}: arrives ${arrivalTime.format('YYYY-MM-DD HH:mm')} - remove (later date)`);\r\n          return false;\r\n        });\r\n\r\n        // Update arrival bounds if needed\r\n        if (firstSegment.flights.length > 0) {\r\n          firstSegment.earliestArrival = dayjs(firstSegment.flights[0].ArrivesAt);\r\n          firstSegment.latestArrival = dayjs(firstSegment.flights[firstSegment.flights.length - 1].ArrivesAt);\r\n        } else {\r\n          firstSegment.earliestArrival = null;\r\n          firstSegment.latestArrival = null;\r\n        }\r\n      }\r\n\r\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\r\n    } catch (error) {\r\n      console.error('Error fetching segment details:', error);\r\n    } finally {\r\n      setIsLoadingSegments(false);\r\n    }\r\n  };\r\n\r\n  const resetDetails = () => {\r\n    setSelectedDates(null);\r\n    setApiKey('');\r\n    setSegmentDetails([]);\r\n  };\r\n\r\n  return {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    resetDetails\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}