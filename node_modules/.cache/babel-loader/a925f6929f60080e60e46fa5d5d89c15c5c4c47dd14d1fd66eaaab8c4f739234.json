{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nimport { getSegmentColumns } from '../segmentColumns';\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const combinationsRef = useRef([]);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow, segmentIndex, startDay) => {\n    var _data$results, _data$results$, _data$results$$data;\n    const flights = {};\n    const rawFlights = ((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : _data$results$$data.data) || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    rawFlights.filter(trip => {\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n      console.log(`  Carrier: ${trip.Carriers}`);\n      console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n      console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\n\n      // Filter out non-direct flights\n      if (trip.Stops !== 0) {\n        console.log('  ❌ Skipped: Not a direct flight');\n        return false;\n      }\n\n      // Filter out EK and FZ carriers\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log('  ❌ Skipped: Excluded carrier');\n        return false;\n      }\n      if (timeWindow) {\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n        const isValid = departureTime.isBetween(timeWindow.start, timeWindow.end, null, '[]');\n        if (!isValid) {\n          console.log(`  ✗ Rejected: Outside time window (${departureTime.format('HH:mm')})`);\n          console.log(`    Window: ${timeWindow.start.format('HH:mm')} - ${timeWindow.end.format('HH:mm')}`);\n        } else {\n          console.log('  ✓ Accepted: Within time window');\n        }\n        return isValid;\n      }\n      console.log('  ✓ Accepted: No time window restrictions');\n      return true;\n    }).forEach(trip => {\n      const flightNumber = trip.FlightNumbers;\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const existingFlight = flights[flightNumber];\n\n      // If this is a duplicate flight, only keep the later one\n      if (existingFlight) {\n        const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n        if (departureTime.isBefore(existingDeparture)) {\n          return; // Skip this one, keep the existing later flight\n        }\n      }\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\n      const baseDayjs = dayjs(startDay);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n      // Process aircraft name\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName && aircraftName === '787  All') {\n        aircraftName = 'Boeing 787-10';\n      }\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(trip.Carriers),\n        aircraft: aircraftName,\n        duration: trip.TotalDuration,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false,\n        isSelected: false,\n        segmentIndex: segmentIndex\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const handleDateSearch = async currentRoute => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    const newProcessedSegments = [];\n    const [startDate, endDate] = selectedDates;\n    const startDay = dayjs(startDate).startOf('day');\n    console.log('\\n=== Processing Segments ===');\n    console.log('Date Range:', {\n      start: startDay.format('YYYY-MM-DD'),\n      end: dayjs(endDate).format('YYYY-MM-DD')\n    });\n    try {\n      // Process all segments\n      for (let i = 0; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n        let timeWindow = null;\n        const dates = new Set();\n        if (i === 0) {\n          // First segment - use full date range\n          const startDay = dayjs(startDate).startOf('day');\n          const endDay = dayjs(endDate).endOf('day');\n          console.log('\\n=== First Segment Details ===');\n          console.log('Time Window: 00:00 on first date to 23:59 on last date');\n          console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n          console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n\n          // Get all dates in range\n          for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n            dates.add(d.format('YYYY-MM-DD'));\n          }\n          console.log('\\nSearching dates:', Array.from(dates));\n          console.log('\\nSegment IDs to search:');\n          Array.from(dates).forEach(date => {\n            const route = routeDetails.find(r => r.origin === from && r.destination === to && r.date === date);\n            if (route) {\n              console.log(`${date}: ID ${route.ID}`);\n            } else {\n              console.log(`${date}: No route found`);\n            }\n          });\n          console.log('======================\\n');\n        } else {\n          // Handle subsequent segments with time windows\n          const prevSegment = newProcessedSegments[i - 1];\n          if (!prevSegment || prevSegment.flights.length === 0) {\n            if (i === 1) {\n              timeWindow = {\n                start: dayjs(startDate).startOf('day'),\n                end: dayjs(startDate).add(1, 'day').endOf('day')\n              };\n              console.log('No previous flights found. Using 24-hour window for segment 2');\n            } else {\n              console.log('No valid flights in previous segment. Stopping search.');\n              break;\n            }\n          } else {\n            // Calculate time window from previous segment's flights\n            const arrivals = prevSegment.flights.map(f => {\n              const arrivalTime = dayjs(f.ArrivesAt);\n              return dayjs(`${startDate} ${arrivalTime.format('HH:mm')}`).add(arrivalTime.diff(dayjs(f.ArrivesAt).startOf('day'), 'day'), 'day');\n            });\n            arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n            timeWindow = {\n              start: arrivals[0],\n              end: arrivals[arrivals.length - 1].add(24, 'hours')\n            };\n            console.log('Time Window based on previous segment arrivals:');\n            console.log('  Start:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\n            console.log('  End:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\n          }\n\n          // Get dates for time window\n          if (timeWindow) {\n            for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n          } else {\n            dates.add(dayjs(startDate).format('YYYY-MM-DD'));\n          }\n        }\n\n        // Process each date\n        const allFlights = [];\n        for (const date of dates) {\n          const route = routeDetails.find(r => r.origin === from && r.destination === to && r.date === date);\n          if (!route) {\n            console.log(`No route found for ${from}-${to} on ${date}`);\n            continue;\n          }\n          console.log(`\\nFetching ${from}-${to} for ${date}:`);\n          console.log(`Segment ID: ${route.ID}`);\n          try {\n            const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n              method: 'GET',\n              headers: {\n                'accept': 'application/json',\n                'Partner-Authorization': apiKey,\n                'Segment-ID': route.ID\n              }\n            });\n            if (!response.ok) {\n              console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n              continue;\n            }\n            const data = await response.json();\n            const processedFlights = processFlightData(data, timeWindow, i, startDay);\n            console.log(`✓ Found ${processedFlights.length} valid flights`);\n            allFlights.push(...processedFlights);\n          } catch (error) {\n            console.error(`Error fetching flights for ${from}-${to}:`, error);\n          }\n        }\n        console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n        // Store searched dates in segment data\n        newProcessedSegments[i] = {\n          route: `${from}-${to}`,\n          flights: allFlights,\n          searchDates: dates,\n          // Add this field\n          earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n          latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n        };\n\n        // Only break if previous segment had flights but current segment found none\n        if (allFlights.length === 0 && i > 0 && newProcessedSegments[i - 1].flights.length > 0) {\n          console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n          console.log('Skipping remaining segments');\n          break;\n        }\n      }\n\n      // After processing all segments\n      if (newProcessedSegments.length >= 2) {\n        console.log('\\n=== Flight Combinations ===');\n\n        // Find all valid combinations recursively\n        const findValidCombinations = (currentPath = [], segmentIndex = 0) => {\n          // If we've processed all segments, this is a valid combination\n          if (segmentIndex === newProcessedSegments.length) {\n            return [currentPath];\n          }\n          const validCombos = [];\n          const currentSegment = newProcessedSegments[segmentIndex];\n\n          // For the first segment, try all flights\n          if (segmentIndex === 0) {\n            currentSegment.flights.forEach(flight => {\n              const combos = findValidCombinations([flight], segmentIndex + 1);\n              validCombos.push(...combos);\n            });\n          }\n          // For subsequent segments, check connection times\n          else {\n            const previousFlight = currentPath[currentPath.length - 1];\n            const previousArrival = dayjs(previousFlight.ArrivesAt);\n            currentSegment.flights.forEach(flight => {\n              const departure = dayjs(flight.DepartsAt);\n              const connectionTime = departure.diff(previousArrival, 'minutes');\n\n              // Check if this is a valid connection (between 1 hour and 24 hours)\n              if (connectionTime >= 60 && connectionTime <= 24 * 60) {\n                const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              }\n            });\n          }\n          return validCombos;\n        };\n\n        // Get all valid combinations\n        const allCombinations = findValidCombinations();\n\n        // Log the combinations\n        allCombinations.forEach(combo => {\n          const flightInfo = combo.map((flight, idx) => {\n            if (idx === 0) return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD')})`;\n            const prevFlight = combo[idx - 1];\n            const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n            const hours = Math.floor(connectionTime / 60);\n            const minutes = connectionTime % 60;\n            return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD')}) (${hours}:${minutes.toString().padStart(2, '0')})`;\n          });\n          console.log(flightInfo.join(', '));\n        });\n        console.log('======================');\n\n        // Create a set of valid flights from unique combinations\n        const validFlights = new Set();\n        allCombinations.forEach(combo => {\n          combo.forEach((flight, segmentIndex) => {\n            // Include segment index in the key to allow same flight number in different segments\n            validFlights.add(`${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}_${segmentIndex}`);\n          });\n        });\n\n        // Filter and deduplicate flights\n        const filteredFlights = newProcessedSegments.flatMap((segment, segmentIndex) => {\n          const seenInSegment = new Set(); // Track duplicates within segment\n          return segment.flights.filter(flight => {\n            const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}_${segmentIndex}`;\n\n            // Only keep the first occurrence of each flight in a segment\n            if (!seenInSegment.has(flightKey)) {\n              seenInSegment.add(flightKey);\n              return validFlights.has(flightKey);\n            }\n            return false;\n          }).map(flight => ({\n            ...flight,\n            isSelected: false,\n            segmentIndex\n          }));\n        });\n        setSegmentDetails(filteredFlights);\n        setValidCombinations(allCombinations);\n\n        // Log flights by segment\n        console.log('\\n=== Flights By Segment ===');\n        const flightsBySegment = new Map();\n        filteredFlights.forEach(flight => {\n          const route = `${flight.from}-${flight.to}`;\n          if (!flightsBySegment.has(route)) {\n            flightsBySegment.set(route, new Set());\n          }\n          flightsBySegment.get(route).add(`${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n        });\n        flightsBySegment.forEach((flights, route) => {\n          console.log(`\\n${route}:`);\n          Array.from(flights).sort().forEach(flight => {\n            console.log(`  ${flight}`);\n          });\n        });\n        console.log('\\n======================');\n      } else {\n        setSegmentDetails(newProcessedSegments.flatMap((segment, index) => segment.flights.map(flight => ({\n          ...flight,\n          isSelected: false,\n          segmentIndex: index\n        }))));\n      }\n    } catch (error) {\n      console.error('Error processing segments:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const resetDetails = () => {\n    setSelectedDates(null);\n    setApiKey('');\n    setSegmentDetails([]);\n  };\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD')}`;\n    console.log('Selected flight:', flightKey, 'from segment:', segmentIndex);\n\n    // Create new selected flights object\n    const newSelected = {\n      ...selectedFlights\n    };\n\n    // Toggle selection\n    if (newSelected[segmentIndex] && `${newSelected[segmentIndex].flightNumber}_${dayjs(newSelected[segmentIndex].DepartsAt).format('YYYY-MM-DD')}` === flightKey) {\n      delete newSelected[segmentIndex];\n      console.log('Deselected flight');\n    } else {\n      newSelected[segmentIndex] = flight;\n      console.log('Selected flight');\n    }\n    setSelectedFlights(newSelected);\n    if (Object.keys(newSelected).length > 0) {\n      // Find ALL valid combinations that include the selected flight\n      const validCombos = validCombinations.filter(combo => {\n        const selectedFlight = combo[segmentIndex];\n        return selectedFlight.flightNumber === flight.flightNumber && dayjs(selectedFlight.DepartsAt).isSame(dayjs(flight.DepartsAt));\n      });\n      console.log(`Found ${validCombos.length} valid combinations with ${flight.flightNumber}`);\n\n      // Get all valid flights from these combinations\n      const validFlights = new Set();\n      validCombos.forEach(combo => {\n        combo.forEach((f, idx) => {\n          validFlights.add(`${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${idx}`);\n        });\n      });\n\n      // Deduplicate and update segment details\n      const filteredFlights = validCombos.flatMap(combo => combo.map((f, idx) => ({\n        ...f,\n        isSelected: idx === segmentIndex && f.flightNumber === flight.flightNumber,\n        segmentIndex: idx\n      })));\n\n      // Remove duplicates while preserving order\n      const seenFlights = new Set();\n      const uniqueFlights = filteredFlights.filter(f => {\n        const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${f.segmentIndex}`;\n        if (!seenFlights.has(key)) {\n          seenFlights.add(key);\n          return true;\n        }\n        return false;\n      });\n      setSegmentDetails(uniqueFlights);\n    } else {\n      // When deselecting, show all unique flights from valid combinations\n      const allValidFlights = new Map(); // Use Map to track flights by segment\n\n      validCombinations.forEach(combo => {\n        combo.forEach((f, idx) => {\n          const segmentKey = `${f.from}-${f.to}`;\n          if (!allValidFlights.has(segmentKey)) {\n            allValidFlights.set(segmentKey, new Map());\n          }\n          const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          if (!allValidFlights.get(segmentKey).has(flightKey)) {\n            allValidFlights.get(segmentKey).set(flightKey, {\n              ...f,\n              isSelected: false,\n              segmentIndex: idx\n            });\n          }\n        });\n      });\n\n      // Flatten the Map of Maps into an array\n      const resetFlights = Array.from(allValidFlights.values()).flatMap(segmentFlights => Array.from(segmentFlights.values()));\n      console.log('\\n=== Resetting to All Valid Flights ===');\n      Array.from(allValidFlights.entries()).forEach(([route, flights]) => {\n        console.log(`\\n${route}:`);\n        Array.from(flights.values()).sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(f => console.log(`  ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`));\n      });\n      console.log('\\n======================');\n      setSegmentDetails(resetFlights);\n    }\n  };\n\n  // Create columns with the handler\n  const columns = getColumns(handleFlightSelect);\n\n  // Initialize with all flights from all combinations\n  useEffect(() => {\n    console.log('Updating combinations ref:', initialCombinations);\n    combinationsRef.current = initialCombinations;\n  }, [initialCombinations]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => combo.map((f, idx) => ({\n        ...f,\n        isSelected: false,\n        segmentIndex: idx\n      })));\n      const uniqueFlights = Array.from(new Map(allFlights.map(f => [`${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`, f])).values());\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    resetDetails,\n    selectedFlights,\n    setSelectedFlights,\n    validCombinations,\n    setValidCombinations,\n    handleFlightSelect,\n    columns\n  };\n}\n_s(useFlightDetails, \"APpc2uOpwK3v3z9ynaQstsiqS7o=\");","map":{"version":3,"names":["useState","useEffect","useRef","dayjs","routeDetails","airlines","getSegmentColumns","useFlightDetails","getColumns","initialCombinations","_s","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","selectedFlights","setSelectedFlights","validCombinations","setValidCombinations","processedSegments","setProcessedSegments","originalFlights","setOriginalFlights","originalCombinations","processedFlights","setProcessedFlights","initialFlights","setInitialFlights","combinationsRef","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","segmentIndex","startDay","_data$results","_data$results$","_data$results$$data","flights","rawFlights","results","length","start","end","filter","trip","FlightNumbers","Carriers","DepartsAt","ArrivesAt","Stops","departureTime","isValid","isBetween","forEach","flightNumber","existingFlight","existingDeparture","isBefore","arrivalTime","baseDayjs","departDayDiff","diff","arrivalDayDiff","aircraftName","Aircraft","OriginAirport","DestinationAirport","aircraft","duration","TotalDuration","departs","arrives","economy","business","first","isSelected","Cabin","toLowerCase","Object","values","handleDateSearch","currentRoute","newProcessedSegments","startDate","endDate","startOf","i","dates","Set","endDay","endOf","d","valueOf","add","Array","ID","prevSegment","arrivals","map","f","sort","b","allFlights","response","fetch","method","headers","ok","json","push","error","searchDates","earliestArrival","latestArrival","findValidCombinations","currentPath","validCombos","currentSegment","flight","combos","previousFlight","previousArrival","departure","connectionTime","allCombinations","combo","flightInfo","idx","prevFlight","hours","Math","floor","minutes","toString","padStart","join","validFlights","filteredFlights","flatMap","segment","seenInSegment","flightKey","has","flightsBySegment","Map","set","get","index","resetDetails","handleFlightSelect","newSelected","keys","selectedFlight","isSame","seenFlights","uniqueFlights","key","allValidFlights","segmentKey","resetFlights","segmentFlights","entries","columns","current","comboIndex"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport routeDetails from '../../../data/route_details.json';\r\nimport airlines from '../../../data/airlines';\r\nimport { getSegmentColumns } from '../segmentColumns';\r\n\r\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\r\n  const [selectedDates, setSelectedDates] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [segmentDetails, setSegmentDetails] = useState([]);\r\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\r\n  const [selectedFlights, setSelectedFlights] = useState({});\r\n  const [validCombinations, setValidCombinations] = useState([]);\r\n  const [processedSegments, setProcessedSegments] = useState([]);\r\n  const [originalFlights, setOriginalFlights] = useState(null);\r\n  const [originalCombinations] = useState(initialCombinations);\r\n  const [processedFlights, setProcessedFlights] = useState(null);\r\n  const [initialFlights, setInitialFlights] = useState(null);\r\n  const combinationsRef = useRef([]);\r\n\r\n  const formatTime = (dateStr, baseDate) => {\r\n    const date = dayjs(dateStr);\r\n    const base = dayjs(baseDate);\r\n    \r\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\r\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\r\n    \r\n    const timeStr = date.format('HH:mm');\r\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\r\n  };\r\n\r\n  const getAirlineName = (code) => {\r\n    const airline = airlines.find(a => a.value === code);\r\n    return airline ? airline.label.replace(` (${code})`, '') : code;\r\n  };\r\n\r\n  const getSegmentDistance = (from, to) => {\r\n    const route = routeDetails.find(r => \r\n      r.origin === from && \r\n      r.destination === to\r\n    );\r\n\r\n    if (!route) {\r\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\r\n      return 1000;\r\n    }\r\n\r\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\r\n    return route.distance;\r\n  };\r\n\r\n  const processFlightData = (data, timeWindow, segmentIndex, startDay) => {\r\n    const flights = {};\r\n    \r\n    const rawFlights = data.results?.[0]?.data?.data || [];\r\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\r\n    \r\n    if (timeWindow) {\r\n      console.log('Time Window:', {\r\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\r\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\r\n      });\r\n    }\r\n    \r\n    rawFlights\r\n      .filter(trip => {\r\n        console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\r\n        console.log(`  Carrier: ${trip.Carriers}`);\r\n        console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\r\n        console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\r\n        \r\n        // Filter out non-direct flights\r\n        if (trip.Stops !== 0) {\r\n          console.log('  ❌ Skipped: Not a direct flight');\r\n          return false;\r\n        }\r\n        \r\n        // Filter out EK and FZ carriers\r\n        if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\r\n          console.log('  ❌ Skipped: Excluded carrier');\r\n          return false;\r\n        }\r\n        \r\n        if (timeWindow) {\r\n          const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\r\n          const isValid = departureTime.isBetween(timeWindow.start, timeWindow.end, null, '[]');\r\n          \r\n          if (!isValid) {\r\n            console.log(`  ✗ Rejected: Outside time window (${departureTime.format('HH:mm')})`);\r\n            console.log(`    Window: ${timeWindow.start.format('HH:mm')} - ${timeWindow.end.format('HH:mm')}`);\r\n          } else {\r\n            console.log('  ✓ Accepted: Within time window');\r\n          }\r\n          return isValid;\r\n        }\r\n        \r\n        console.log('  ✓ Accepted: No time window restrictions');\r\n        return true;\r\n      })\r\n      .forEach(trip => {\r\n        const flightNumber = trip.FlightNumbers;\r\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\r\n        const existingFlight = flights[flightNumber];\r\n\r\n        // If this is a duplicate flight, only keep the later one\r\n        if (existingFlight) {\r\n          const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\r\n          if (departureTime.isBefore(existingDeparture)) {\r\n            return; // Skip this one, keep the existing later flight\r\n          }\r\n        }\r\n\r\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\r\n        const baseDayjs = dayjs(startDay);\r\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\r\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\r\n\r\n        // Process aircraft name\r\n        let aircraftName = trip.Aircraft[0];\r\n        if (aircraftName && aircraftName === '787  All') {\r\n          aircraftName = 'Boeing 787-10';\r\n        }\r\n\r\n        flights[flightNumber] = {\r\n          from: trip.OriginAirport,\r\n          to: trip.DestinationAirport,\r\n          flightNumber: flightNumber,\r\n          airlines: getAirlineName(trip.Carriers),\r\n          aircraft: aircraftName,\r\n          duration: trip.TotalDuration,\r\n          departs: departDayDiff > 0 ? \r\n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \r\n            departureTime.format('HH:mm'),\r\n          arrives: arrivalDayDiff > 0 ? \r\n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \r\n            arrivalTime.format('HH:mm'),\r\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          economy: false,\r\n          business: false,\r\n          first: false,\r\n          isSelected: false,\r\n          segmentIndex: segmentIndex\r\n        };\r\n        \r\n        switch(trip.Cabin.toLowerCase()) {\r\n          case 'economy':\r\n            flights[flightNumber].economy = true;\r\n            break;\r\n          case 'business':\r\n            flights[flightNumber].business = true;\r\n            break;\r\n          case 'first':\r\n            flights[flightNumber].first = true;\r\n            break;\r\n        }\r\n      });\r\n    \r\n    return Object.values(flights);\r\n  };\r\n\r\n  const handleDateSearch = async (currentRoute) => {\r\n    if (!selectedDates || !currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingSegments(true);\r\n    const newProcessedSegments = [];\r\n    const [startDate, endDate] = selectedDates;\r\n    const startDay = dayjs(startDate).startOf('day');\r\n    \r\n    console.log('\\n=== Processing Segments ===');\r\n    console.log('Date Range:', {\r\n      start: startDay.format('YYYY-MM-DD'),\r\n      end: dayjs(endDate).format('YYYY-MM-DD')\r\n    });\r\n    \r\n    try {\r\n      // Process all segments\r\n      for (let i = 0; i < currentRoute.length - 1; i++) {\r\n        const from = currentRoute[i];\r\n        const to = currentRoute[i + 1];\r\n        \r\n        console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\r\n        \r\n        let timeWindow = null;\r\n        const dates = new Set();\r\n\r\n        if (i === 0) {\r\n          // First segment - use full date range\r\n          const startDay = dayjs(startDate).startOf('day');\r\n          const endDay = dayjs(endDate).endOf('day');\r\n          \r\n          console.log('\\n=== First Segment Details ===');\r\n          console.log('Time Window: 00:00 on first date to 23:59 on last date');\r\n          console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\r\n          console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\r\n          \r\n          // Get all dates in range\r\n          for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\r\n            dates.add(d.format('YYYY-MM-DD'));\r\n          }\r\n          \r\n          console.log('\\nSearching dates:', Array.from(dates));\r\n          console.log('\\nSegment IDs to search:');\r\n          Array.from(dates).forEach(date => {\r\n            const route = routeDetails.find(r => \r\n              r.origin === from && \r\n              r.destination === to &&\r\n              r.date === date\r\n            );\r\n            if (route) {\r\n              console.log(`${date}: ID ${route.ID}`);\r\n            } else {\r\n              console.log(`${date}: No route found`);\r\n            }\r\n          });\r\n          console.log('======================\\n');\r\n        } else {\r\n          // Handle subsequent segments with time windows\r\n          const prevSegment = newProcessedSegments[i - 1];\r\n          if (!prevSegment || prevSegment.flights.length === 0) {\r\n            if (i === 1) {\r\n              timeWindow = {\r\n                start: dayjs(startDate).startOf('day'),\r\n                end: dayjs(startDate).add(1, 'day').endOf('day')\r\n              };\r\n              console.log('No previous flights found. Using 24-hour window for segment 2');\r\n            } else {\r\n              console.log('No valid flights in previous segment. Stopping search.');\r\n              break;\r\n            }\r\n          } else {\r\n            // Calculate time window from previous segment's flights\r\n            const arrivals = prevSegment.flights.map(f => {\r\n              const arrivalTime = dayjs(f.ArrivesAt);\r\n              return dayjs(`${startDate} ${arrivalTime.format('HH:mm')}`).add(arrivalTime.diff(dayjs(f.ArrivesAt).startOf('day'), 'day'), 'day');\r\n            });\r\n            \r\n            arrivals.sort((a, b) => a.valueOf() - b.valueOf());\r\n            \r\n            timeWindow = {\r\n              start: arrivals[0],\r\n              end: arrivals[arrivals.length - 1].add(24, 'hours')\r\n            };\r\n            \r\n            console.log('Time Window based on previous segment arrivals:');\r\n            console.log('  Start:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\r\n            console.log('  End:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\r\n          }\r\n\r\n          // Get dates for time window\r\n          if (timeWindow) {\r\n            for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\r\n              dates.add(d.format('YYYY-MM-DD'));\r\n            }\r\n          } else {\r\n            dates.add(dayjs(startDate).format('YYYY-MM-DD'));\r\n          }\r\n        }\r\n\r\n        // Process each date\r\n        const allFlights = [];\r\n        for (const date of dates) {\r\n          const route = routeDetails.find(r => \r\n            r.origin === from && \r\n            r.destination === to &&\r\n            r.date === date\r\n          );\r\n\r\n          if (!route) {\r\n            console.log(`No route found for ${from}-${to} on ${date}`);\r\n            continue;\r\n          }\r\n\r\n          console.log(`\\nFetching ${from}-${to} for ${date}:`);\r\n          console.log(`Segment ID: ${route.ID}`);\r\n          \r\n          try {\r\n            const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\r\n              method: 'GET',\r\n              headers: {\r\n                'accept': 'application/json',\r\n                'Partner-Authorization': apiKey,\r\n                'Segment-ID': route.ID\r\n              }\r\n            });\r\n\r\n            if (!response.ok) {\r\n              console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\r\n              continue;\r\n            }\r\n\r\n            const data = await response.json();\r\n            const processedFlights = processFlightData(data, timeWindow, i, startDay);\r\n            console.log(`✓ Found ${processedFlights.length} valid flights`);\r\n            allFlights.push(...processedFlights);\r\n          } catch (error) {\r\n            console.error(`Error fetching flights for ${from}-${to}:`, error);\r\n          }\r\n        }\r\n\r\n        console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\r\n\r\n        // Store searched dates in segment data\r\n        newProcessedSegments[i] = {\r\n          route: `${from}-${to}`,\r\n          flights: allFlights,\r\n          searchDates: dates, // Add this field\r\n          earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\r\n          latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\r\n        };\r\n\r\n        // Only break if previous segment had flights but current segment found none\r\n        if (allFlights.length === 0 && i > 0 && newProcessedSegments[i-1].flights.length > 0) {\r\n          console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\r\n          console.log('Skipping remaining segments');\r\n          break;\r\n        }\r\n      }\r\n\r\n      // After processing all segments\r\n      if (newProcessedSegments.length >= 2) {\r\n        console.log('\\n=== Flight Combinations ===');\r\n        \r\n        // Find all valid combinations recursively\r\n        const findValidCombinations = (currentPath = [], segmentIndex = 0) => {\r\n          // If we've processed all segments, this is a valid combination\r\n          if (segmentIndex === newProcessedSegments.length) {\r\n            return [currentPath];\r\n          }\r\n\r\n          const validCombos = [];\r\n          const currentSegment = newProcessedSegments[segmentIndex];\r\n\r\n          // For the first segment, try all flights\r\n          if (segmentIndex === 0) {\r\n            currentSegment.flights.forEach(flight => {\r\n              const combos = findValidCombinations([flight], segmentIndex + 1);\r\n              validCombos.push(...combos);\r\n            });\r\n          } \r\n          // For subsequent segments, check connection times\r\n          else {\r\n            const previousFlight = currentPath[currentPath.length - 1];\r\n            const previousArrival = dayjs(previousFlight.ArrivesAt);\r\n\r\n            currentSegment.flights.forEach(flight => {\r\n              const departure = dayjs(flight.DepartsAt);\r\n              const connectionTime = departure.diff(previousArrival, 'minutes');\r\n\r\n              // Check if this is a valid connection (between 1 hour and 24 hours)\r\n              if (connectionTime >= 60 && connectionTime <= 24 * 60) {\r\n                const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\r\n                validCombos.push(...combos);\r\n              }\r\n            });\r\n          }\r\n\r\n          return validCombos;\r\n        };\r\n\r\n        // Get all valid combinations\r\n        const allCombinations = findValidCombinations();\r\n        \r\n        // Log the combinations\r\n        allCombinations.forEach(combo => {\r\n          const flightInfo = combo.map((flight, idx) => {\r\n            if (idx === 0) return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD')})`;\r\n            \r\n            const prevFlight = combo[idx - 1];\r\n            const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\r\n            const hours = Math.floor(connectionTime / 60);\r\n            const minutes = connectionTime % 60;\r\n            return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD')}) (${hours}:${minutes.toString().padStart(2, '0')})`;\r\n          });\r\n          \r\n          console.log(flightInfo.join(', '));\r\n        });\r\n\r\n        console.log('======================');\r\n\r\n        // Create a set of valid flights from unique combinations\r\n        const validFlights = new Set();\r\n        allCombinations.forEach(combo => {\r\n          combo.forEach((flight, segmentIndex) => {\r\n            // Include segment index in the key to allow same flight number in different segments\r\n            validFlights.add(`${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}_${segmentIndex}`);\r\n          });\r\n        });\r\n\r\n        // Filter and deduplicate flights\r\n        const filteredFlights = newProcessedSegments.flatMap((segment, segmentIndex) => {\r\n          const seenInSegment = new Set(); // Track duplicates within segment\r\n          return segment.flights.filter(flight => {\r\n            const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}_${segmentIndex}`;\r\n            \r\n            // Only keep the first occurrence of each flight in a segment\r\n            if (!seenInSegment.has(flightKey)) {\r\n              seenInSegment.add(flightKey);\r\n              return validFlights.has(flightKey);\r\n            }\r\n            return false;\r\n          }).map(flight => ({\r\n            ...flight,\r\n            isSelected: false,\r\n            segmentIndex\r\n          }));\r\n        });\r\n\r\n        setSegmentDetails(filteredFlights);\r\n        setValidCombinations(allCombinations);\r\n\r\n        // Log flights by segment\r\n        console.log('\\n=== Flights By Segment ===');\r\n        const flightsBySegment = new Map();\r\n        filteredFlights.forEach(flight => {\r\n          const route = `${flight.from}-${flight.to}`;\r\n          if (!flightsBySegment.has(route)) {\r\n            flightsBySegment.set(route, new Set());\r\n          }\r\n          flightsBySegment.get(route).add(\r\n            `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`\r\n          );\r\n        });\r\n\r\n        flightsBySegment.forEach((flights, route) => {\r\n          console.log(`\\n${route}:`);\r\n          Array.from(flights).sort().forEach(flight => {\r\n            console.log(`  ${flight}`);\r\n          });\r\n        });\r\n        \r\n        console.log('\\n======================');\r\n      } else {\r\n        setSegmentDetails(newProcessedSegments.flatMap((segment, index) => \r\n          segment.flights.map(flight => ({\r\n            ...flight,\r\n            isSelected: false,\r\n            segmentIndex: index\r\n          }))\r\n        ));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing segments:', error);\r\n    } finally {\r\n      setIsLoadingSegments(false);\r\n    }\r\n  };\r\n\r\n  const resetDetails = () => {\r\n    setSelectedDates(null);\r\n    setApiKey('');\r\n    setSegmentDetails([]);\r\n  };\r\n\r\n  const handleFlightSelect = (flight, segmentIndex) => {\r\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD')}`;\r\n    console.log('Selected flight:', flightKey, 'from segment:', segmentIndex);\r\n    \r\n    // Create new selected flights object\r\n    const newSelected = { ...selectedFlights };\r\n    \r\n    // Toggle selection\r\n    if (newSelected[segmentIndex] && \r\n        `${newSelected[segmentIndex].flightNumber}_${dayjs(newSelected[segmentIndex].DepartsAt).format('YYYY-MM-DD')}` === flightKey) {\r\n      delete newSelected[segmentIndex];\r\n      console.log('Deselected flight');\r\n    } else {\r\n      newSelected[segmentIndex] = flight;\r\n      console.log('Selected flight');\r\n    }\r\n    \r\n    setSelectedFlights(newSelected);\r\n    \r\n    if (Object.keys(newSelected).length > 0) {\r\n      // Find ALL valid combinations that include the selected flight\r\n      const validCombos = validCombinations.filter(combo => {\r\n        const selectedFlight = combo[segmentIndex];\r\n        return selectedFlight.flightNumber === flight.flightNumber &&\r\n               dayjs(selectedFlight.DepartsAt).isSame(dayjs(flight.DepartsAt));\r\n      });\r\n\r\n      console.log(`Found ${validCombos.length} valid combinations with ${flight.flightNumber}`);\r\n\r\n      // Get all valid flights from these combinations\r\n      const validFlights = new Set();\r\n      validCombos.forEach(combo => {\r\n        combo.forEach((f, idx) => {\r\n          validFlights.add(`${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${idx}`);\r\n        });\r\n      });\r\n\r\n      // Deduplicate and update segment details\r\n      const filteredFlights = validCombos.flatMap(combo => \r\n        combo.map((f, idx) => ({\r\n          ...f,\r\n          isSelected: idx === segmentIndex && f.flightNumber === flight.flightNumber,\r\n          segmentIndex: idx\r\n        }))\r\n      );\r\n\r\n      // Remove duplicates while preserving order\r\n      const seenFlights = new Set();\r\n      const uniqueFlights = filteredFlights.filter(f => {\r\n        const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${f.segmentIndex}`;\r\n        if (!seenFlights.has(key)) {\r\n          seenFlights.add(key);\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n\r\n      setSegmentDetails(uniqueFlights);\r\n    } else {\r\n      // When deselecting, show all unique flights from valid combinations\r\n      const allValidFlights = new Map(); // Use Map to track flights by segment\r\n      \r\n      validCombinations.forEach(combo => {\r\n        combo.forEach((f, idx) => {\r\n          const segmentKey = `${f.from}-${f.to}`;\r\n          if (!allValidFlights.has(segmentKey)) {\r\n            allValidFlights.set(segmentKey, new Map());\r\n          }\r\n          \r\n          const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\r\n          if (!allValidFlights.get(segmentKey).has(flightKey)) {\r\n            allValidFlights.get(segmentKey).set(flightKey, {\r\n              ...f,\r\n              isSelected: false,\r\n              segmentIndex: idx\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      // Flatten the Map of Maps into an array\r\n      const resetFlights = Array.from(allValidFlights.values())\r\n        .flatMap(segmentFlights => Array.from(segmentFlights.values()));\r\n      \r\n      console.log('\\n=== Resetting to All Valid Flights ===');\r\n      Array.from(allValidFlights.entries()).forEach(([route, flights]) => {\r\n        console.log(`\\n${route}:`);\r\n        Array.from(flights.values())\r\n          .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\r\n          .forEach(f => console.log(`  ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`));\r\n      });\r\n      console.log('\\n======================');\r\n\r\n      setSegmentDetails(resetFlights);\r\n    }\r\n  };\r\n\r\n  // Create columns with the handler\r\n  const columns = getColumns(handleFlightSelect);\r\n\r\n  // Initialize with all flights from all combinations\r\n  useEffect(() => {\r\n    console.log('Updating combinations ref:', initialCombinations);\r\n    combinationsRef.current = initialCombinations;\r\n  }, [initialCombinations]);\r\n\r\n  // Initialize segment details\r\n  useEffect(() => {\r\n    if (initialCombinations.length > 0) {\r\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => \r\n        combo.map((f, idx) => ({\r\n          ...f,\r\n          isSelected: false,\r\n          segmentIndex: idx\r\n        }))\r\n      );\r\n\r\n      const uniqueFlights = Array.from(\r\n        new Map(allFlights.map(f => [\r\n          `${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`,\r\n          f\r\n        ])).values()\r\n      );\r\n\r\n      setSegmentDetails(uniqueFlights);\r\n    }\r\n  }, [initialCombinations]);\r\n\r\n  return {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    resetDetails,\r\n    selectedFlights,\r\n    setSelectedFlights,\r\n    validCombinations,\r\n    setValidCombinations,\r\n    handleFlightSelect,\r\n    columns\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}