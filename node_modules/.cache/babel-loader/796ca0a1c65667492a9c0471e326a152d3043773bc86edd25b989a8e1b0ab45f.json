{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nimport { getSegmentColumns } from '../segmentColumns';\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const combinationsRef = useRef([]);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    var _data$results, _data$results$, _data$results$$data, _data$results$$data$d, _data$results$$data$d2, _data$results2, _data$results2$, _data$results2$$data;\n    const flights = {};\n    const baseDate = dayjs(((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : (_data$results$$data$d = _data$results$$data.data) === null || _data$results$$data$d === void 0 ? void 0 : (_data$results$$data$d2 = _data$results$$data$d[0]) === null || _data$results$$data$d2 === void 0 ? void 0 : _data$results$$data$d2.DepartsAt) || new Date()).format('YYYY-MM-DD');\n    const rawFlights = ((_data$results2 = data.results) === null || _data$results2 === void 0 ? void 0 : (_data$results2$ = _data$results2[0]) === null || _data$results2$ === void 0 ? void 0 : (_data$results2$$data = _data$results2$.data) === null || _data$results2$$data === void 0 ? void 0 : _data$results2$$data.data) || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    rawFlights.filter(trip => {\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n      console.log(`  Carrier: ${trip.Carriers}`);\n      console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n      console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\n\n      // Filter out non-direct flights\n      if (trip.Stops !== 0) {\n        console.log('  ❌ Skipped: Not a direct flight');\n        return false;\n      }\n\n      // Filter out EK and FZ carriers\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log('  ❌ Skipped: Excluded carrier');\n        return false;\n      }\n      if (timeWindow) {\n        const departureTime = dayjs(trip.DepartsAt);\n        const isValid = departureTime.isAfter(timeWindow.start) && departureTime.isBefore(timeWindow.end);\n        if (!isValid) {\n          console.log('  ❌ Skipped: Outside time window');\n          console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n        } else {\n          console.log('  ✓ Accepted: Within time window');\n        }\n        return isValid;\n      }\n      console.log('  ✓ Accepted: No time window restrictions');\n      return true;\n    }).forEach(trip => {\n      const flightNumber = trip.FlightNumbers;\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const existingFlight = flights[flightNumber];\n\n      // If this is a duplicate flight, only keep the later one\n      if (existingFlight) {\n        const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n        if (departureTime.isBefore(existingDeparture)) {\n          return; // Skip this one, keep the existing later flight\n        }\n      }\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n      // Process aircraft name\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName && aircraftName === '787  All') {\n        aircraftName = 'Boeing 787-10';\n      }\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(trip.Carriers),\n        aircraft: aircraftName,\n        duration: trip.TotalDuration,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false,\n        isSelected: false,\n        segmentIndex: segmentIndex\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const handleDateSearch = async currentRoute => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    const newProcessedSegments = [];\n    const [startDate, endDate] = selectedDates;\n    const baseDate = dayjs(startDate).format('YYYY-MM-DD');\n    console.log('\\n=== Processing Segments ===');\n    console.log('Date Range:', {\n      start: dayjs(startDate).format('YYYY-MM-DD'),\n      end: dayjs(endDate).format('YYYY-MM-DD')\n    });\n    try {\n      // Process all segments\n      for (let i = 0; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n        let timeWindow = null;\n        const dates = new Set();\n        if (i === 0) {\n          // First segment - use full date range\n          const startDay = dayjs(startDate).startOf('day');\n          const endDay = dayjs(endDate).endOf('day');\n          console.log('\\n=== First Segment Details ===');\n          console.log('Time Window: 00:00 on first date to 23:59 on last date');\n          console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n          console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n\n          // Get all dates in range\n          for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n            dates.add(d.format('YYYY-MM-DD'));\n          }\n        } else {\n          // Handle subsequent segments\n          const prevSegment = newProcessedSegments[i - 1];\n\n          // If no previous flights found, use full date range for all segments\n          if (!prevSegment || prevSegment.flights.length === 0) {\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n            console.log('No previous flights found. Using full date range for this segment');\n          } else {\n            // Calculate time window from previous segment's flights\n            const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n            arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n            timeWindow = {\n              start: arrivals[0],\n              end: arrivals[arrivals.length - 1].add(24, 'hours')\n            };\n\n            // Get dates for time window\n            for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n            console.log('Time Window based on previous segment arrivals:');\n            console.log('  Start:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\n            console.log('  End:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\n          }\n        }\n\n        // Process each date\n        const allFlights = [];\n        for (const date of dates) {\n          const route = routeDetails.find(r => r.origin === from && r.destination === to && r.date === date);\n          if (!route) {\n            console.log(`No route found for ${from}-${to} on ${date}`);\n            continue;\n          }\n          console.log(`\\nFetching ${from}-${to} for ${date}:`);\n          console.log(`Segment ID: ${route.ID}`);\n          try {\n            const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n              method: 'GET',\n              headers: {\n                'accept': 'application/json',\n                'Partner-Authorization': apiKey,\n                'Segment-ID': route.ID\n              }\n            });\n            if (!response.ok) {\n              console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n              continue;\n            }\n            const data = await response.json();\n            const processedFlights = processFlightData(data, timeWindow, i);\n            console.log(`✓ Found ${processedFlights.length} valid flights`);\n            allFlights.push(...processedFlights);\n          } catch (error) {\n            console.error(`Error processing ${from}-${to} for ${date}:`, error);\n          }\n        }\n        console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n        // Store searched dates in segment data\n        newProcessedSegments[i] = {\n          route: `${from}-${to}`,\n          flights: allFlights,\n          searchDates: dates,\n          // Add this field\n          earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n          latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n        };\n\n        // Only break if previous segment had flights but current segment found none\n        if (allFlights.length === 0 && i > 0 && newProcessedSegments[i - 1].flights.length > 0) {\n          console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n          console.log('Skipping remaining segments');\n          break;\n        }\n      }\n\n      // After processing all segments\n      if (newProcessedSegments.length >= 1) {\n        console.log('\\n=== Flight Combinations ===');\n\n        // Find the first and last segments with flights\n        const firstSegmentWithFlights = newProcessedSegments.findIndex(segment => segment.flights && segment.flights.length > 0);\n        const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(segment => segment.flights && segment.flights.length > 0);\n        const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n        console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n        console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n        // Find all valid combinations recursively\n        const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n          // If we've reached beyond the last valid segment, this is a valid combination\n          if (segmentIndex > lastSegmentIndex) {\n            return [currentPath];\n          }\n          const validCombos = [];\n          const currentSegment = newProcessedSegments[segmentIndex];\n\n          // If no flights in current segment, try next segment\n          if (!currentSegment.flights || currentSegment.flights.length === 0) {\n            return findValidCombinations(currentPath, segmentIndex + 1);\n          }\n\n          // For the first flight in the path, accept any flight\n          if (currentPath.length === 0) {\n            currentSegment.flights.forEach(flight => {\n              const combos = findValidCombinations([flight], segmentIndex + 1);\n              validCombos.push(...combos);\n            });\n          }\n          // For subsequent segments, check connection times\n          else {\n            const previousFlight = currentPath[currentPath.length - 1];\n            const previousArrival = dayjs(previousFlight.ArrivesAt);\n            currentSegment.flights.forEach(flight => {\n              const departure = dayjs(flight.DepartsAt);\n              const connectionTime = departure.diff(previousArrival, 'minutes');\n\n              // Check if departure is within 24 hours of previous arrival\n              if (connectionTime >= 60 && connectionTime <= 24 * 60) {\n                const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              }\n            });\n          }\n          return validCombos;\n        };\n\n        // Get all valid combinations\n        const allCombinations = findValidCombinations();\n\n        // Log the combinations\n        console.log('\\n=== Valid Combinations ===');\n        allCombinations.forEach(combo => {\n          const flightInfo = combo.map((flight, idx) => {\n            if (idx === 0) return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n            const prevFlight = combo[idx - 1];\n            const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n            const hours = Math.floor(connectionTime / 60);\n            const minutes = connectionTime % 60;\n            return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n          });\n          console.log(flightInfo.join(' → '));\n        });\n\n        // Create a map of valid flights by segment\n        const validFlightsBySegment = new Map();\n        allCombinations.forEach(combo => {\n          combo.forEach(flight => {\n            const segmentKey = flight.segmentIndex;\n            if (!validFlightsBySegment.has(segmentKey)) {\n              validFlightsBySegment.set(segmentKey, new Set());\n            }\n            validFlightsBySegment.get(segmentKey).add(`${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n          });\n        });\n\n        // Filter and process flights\n        const filteredFlights = [];\n        for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n          const segment = newProcessedSegments[i];\n          if (!segment || !segment.flights) continue;\n          const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n\n          // Add valid flights from this segment\n          segment.flights.forEach(flight => {\n            const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n            if (validFlightsForSegment.has(flightKey)) {\n              filteredFlights.push({\n                ...flight,\n                isSelected: false,\n                segmentIndex: i\n              });\n            }\n          });\n        }\n        setSegmentDetails(filteredFlights);\n        setValidCombinations(allCombinations);\n\n        // Log flights by segment\n        console.log('\\n=== Flights By Segment ===');\n        for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n          const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n          if (segmentFlights.length > 0) {\n            console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n            segmentFlights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n              console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n            });\n          }\n        }\n        console.log('\\n======================');\n      } else {\n        setSegmentDetails(newProcessedSegments.flatMap((segment, index) => segment.flights.map(flight => ({\n          ...flight,\n          isSelected: false,\n          segmentIndex: index\n        }))));\n        setValidCombinations([]);\n      }\n    } catch (error) {\n      console.error('Error fetching segment details:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const resetDetails = () => {\n    setSelectedDates(null);\n    setApiKey('');\n    setSegmentDetails([]);\n  };\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD')}`;\n    console.log('Selected flight:', flightKey, 'from segment:', segmentIndex);\n\n    // Create new selected flights object\n    const newSelected = {\n      ...selectedFlights\n    };\n\n    // Toggle selection\n    if (newSelected[segmentIndex] && `${newSelected[segmentIndex].flightNumber}_${dayjs(newSelected[segmentIndex].DepartsAt).format('YYYY-MM-DD')}` === flightKey) {\n      delete newSelected[segmentIndex];\n      console.log('Deselected flight');\n    } else {\n      newSelected[segmentIndex] = flight;\n      console.log('Selected flight');\n    }\n    setSelectedFlights(newSelected);\n    if (Object.keys(newSelected).length > 0) {\n      // Find ALL valid combinations that include the selected flight\n      const validCombos = validCombinations.filter(combo => {\n        const selectedFlight = combo[segmentIndex];\n        return selectedFlight.flightNumber === flight.flightNumber && dayjs(selectedFlight.DepartsAt).isSame(dayjs(flight.DepartsAt));\n      });\n      console.log(`Found ${validCombos.length} valid combinations with ${flight.flightNumber}`);\n\n      // Get all valid flights from these combinations\n      const validFlights = new Set();\n      validCombos.forEach(combo => {\n        combo.forEach((f, idx) => {\n          validFlights.add(`${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${idx}`);\n        });\n      });\n\n      // Deduplicate and update segment details\n      const filteredFlights = validCombos.flatMap(combo => combo.map((f, idx) => ({\n        ...f,\n        isSelected: idx === segmentIndex && f.flightNumber === flight.flightNumber,\n        segmentIndex: idx\n      })));\n\n      // Remove duplicates while preserving order\n      const seenFlights = new Set();\n      const uniqueFlights = filteredFlights.filter(f => {\n        const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${f.segmentIndex}`;\n        if (!seenFlights.has(key)) {\n          seenFlights.add(key);\n          return true;\n        }\n        return false;\n      });\n      setSegmentDetails(uniqueFlights);\n    } else {\n      // When deselecting, show all unique flights from valid combinations\n      const allValidFlights = new Map(); // Use Map to track flights by segment\n\n      validCombinations.forEach(combo => {\n        combo.forEach((f, idx) => {\n          const segmentKey = `${f.from}-${f.to}`;\n          if (!allValidFlights.has(segmentKey)) {\n            allValidFlights.set(segmentKey, new Map());\n          }\n          const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          if (!allValidFlights.get(segmentKey).has(flightKey)) {\n            allValidFlights.get(segmentKey).set(flightKey, {\n              ...f,\n              isSelected: false,\n              segmentIndex: idx\n            });\n          }\n        });\n      });\n\n      // Flatten the Map of Maps into an array\n      const resetFlights = Array.from(allValidFlights.values()).flatMap(segmentFlights => Array.from(segmentFlights.values()));\n      console.log('\\n=== Resetting to All Valid Flights ===');\n      Array.from(allValidFlights.entries()).forEach(([route, flights]) => {\n        console.log(`\\n${route}:`);\n        Array.from(flights.values()).sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(f => console.log(`  ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`));\n      });\n      console.log('\\n======================');\n      setSegmentDetails(resetFlights);\n    }\n  };\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize with all flights from all combinations\n  useEffect(() => {\n    console.log('Updating combinations ref:', initialCombinations);\n    combinationsRef.current = initialCombinations;\n  }, [initialCombinations]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => combo.map((f, idx) => ({\n        ...f,\n        isSelected: false,\n        segmentIndex: idx\n      })));\n      const uniqueFlights = Array.from(new Map(allFlights.map(f => [`${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`, f])).values());\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    resetDetails,\n    selectedFlights,\n    setSelectedFlights,\n    validCombinations,\n    setValidCombinations,\n    handleFlightSelect,\n    columns\n  };\n}\n_s(useFlightDetails, \"0osZc2xyT5Z8c7n8tcu2sh6xNdo=\");","map":{"version":3,"names":["useState","useEffect","useRef","useMemo","dayjs","routeDetails","airlines","getSegmentColumns","useFlightDetails","getColumns","initialCombinations","_s","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","selectedFlights","setSelectedFlights","validCombinations","setValidCombinations","processedSegments","setProcessedSegments","originalFlights","setOriginalFlights","originalCombinations","processedFlights","setProcessedFlights","initialFlights","setInitialFlights","combinationsRef","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","segmentIndex","_data$results","_data$results$","_data$results$$data","_data$results$$data$d","_data$results$$data$d2","_data$results2","_data$results2$","_data$results2$$data","flights","results","DepartsAt","Date","rawFlights","length","start","end","filter","trip","FlightNumbers","Carriers","ArrivesAt","Stops","departureTime","isValid","isAfter","isBefore","forEach","flightNumber","existingFlight","existingDeparture","arrivalTime","baseDayjs","departDayDiff","diff","arrivalDayDiff","aircraftName","Aircraft","OriginAirport","DestinationAirport","aircraft","duration","TotalDuration","departs","arrives","economy","business","first","isSelected","Cabin","toLowerCase","Object","values","handleDateSearch","currentRoute","newProcessedSegments","startDate","endDate","i","dates","Set","startDay","startOf","endDay","endOf","d","valueOf","add","prevSegment","arrivals","map","f","sort","b","allFlights","ID","response","fetch","method","headers","ok","json","push","error","searchDates","earliestArrival","latestArrival","firstSegmentWithFlights","findIndex","segment","lastSegmentWithFlights","reverse","lastSegmentIndex","findValidCombinations","currentPath","validCombos","currentSegment","flight","combos","previousFlight","previousArrival","departure","connectionTime","allCombinations","combo","flightInfo","idx","prevFlight","hours","Math","floor","minutes","toString","padStart","join","validFlightsBySegment","Map","segmentKey","has","set","get","filteredFlights","validFlightsForSegment","flightKey","segmentFlights","flatMap","index","resetDetails","handleFlightSelect","newSelected","keys","selectedFlight","isSame","validFlights","seenFlights","uniqueFlights","key","allValidFlights","resetFlights","Array","entries","columns","current","comboIndex"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState, useEffect, useRef, useMemo } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport routeDetails from '../../../data/route_details.json';\r\nimport airlines from '../../../data/airlines';\r\nimport { getSegmentColumns } from '../segmentColumns';\r\n\r\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\r\n  const [selectedDates, setSelectedDates] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [segmentDetails, setSegmentDetails] = useState([]);\r\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\r\n  const [selectedFlights, setSelectedFlights] = useState({});\r\n  const [validCombinations, setValidCombinations] = useState([]);\r\n  const [processedSegments, setProcessedSegments] = useState([]);\r\n  const [originalFlights, setOriginalFlights] = useState(null);\r\n  const [originalCombinations] = useState(initialCombinations);\r\n  const [processedFlights, setProcessedFlights] = useState(null);\r\n  const [initialFlights, setInitialFlights] = useState(null);\r\n  const combinationsRef = useRef([]);\r\n\r\n  const formatTime = (dateStr, baseDate) => {\r\n    const date = dayjs(dateStr);\r\n    const base = dayjs(baseDate);\r\n    \r\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\r\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\r\n    \r\n    const timeStr = date.format('HH:mm');\r\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\r\n  };\r\n\r\n  const getAirlineName = (code) => {\r\n    const airline = airlines.find(a => a.value === code);\r\n    return airline ? airline.label.replace(` (${code})`, '') : code;\r\n  };\r\n\r\n  const getSegmentDistance = (from, to) => {\r\n    const route = routeDetails.find(r => \r\n      r.origin === from && \r\n      r.destination === to\r\n    );\r\n\r\n    if (!route) {\r\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\r\n      return 1000;\r\n    }\r\n\r\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\r\n    return route.distance;\r\n  };\r\n\r\n  const processFlightData = (data, timeWindow, segmentIndex) => {\r\n    const flights = {};\r\n    const baseDate = dayjs(data.results?.[0]?.data?.data?.[0]?.DepartsAt || new Date()).format('YYYY-MM-DD');\r\n    \r\n    const rawFlights = data.results?.[0]?.data?.data || [];\r\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\r\n    \r\n    if (timeWindow) {\r\n      console.log('Time Window:', {\r\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\r\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\r\n      });\r\n    }\r\n    \r\n    rawFlights\r\n      .filter(trip => {\r\n        console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\r\n        console.log(`  Carrier: ${trip.Carriers}`);\r\n        console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\r\n        console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\r\n        \r\n        // Filter out non-direct flights\r\n        if (trip.Stops !== 0) {\r\n          console.log('  ❌ Skipped: Not a direct flight');\r\n          return false;\r\n        }\r\n        \r\n        // Filter out EK and FZ carriers\r\n        if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\r\n          console.log('  ❌ Skipped: Excluded carrier');\r\n          return false;\r\n        }\r\n        \r\n        if (timeWindow) {\r\n          const departureTime = dayjs(trip.DepartsAt);\r\n          const isValid = departureTime.isAfter(timeWindow.start) && \r\n                         departureTime.isBefore(timeWindow.end);\r\n          \r\n          if (!isValid) {\r\n            console.log('  ❌ Skipped: Outside time window');\r\n            console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\r\n          } else {\r\n            console.log('  ✓ Accepted: Within time window');\r\n          }\r\n          return isValid;\r\n        }\r\n        \r\n        console.log('  ✓ Accepted: No time window restrictions');\r\n        return true;\r\n      })\r\n      .forEach(trip => {\r\n        const flightNumber = trip.FlightNumbers;\r\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\r\n        const existingFlight = flights[flightNumber];\r\n\r\n        // If this is a duplicate flight, only keep the later one\r\n        if (existingFlight) {\r\n          const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\r\n          if (departureTime.isBefore(existingDeparture)) {\r\n            return; // Skip this one, keep the existing later flight\r\n          }\r\n        }\r\n\r\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\r\n        const baseDayjs = dayjs(baseDate);\r\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\r\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\r\n\r\n        // Process aircraft name\r\n        let aircraftName = trip.Aircraft[0];\r\n        if (aircraftName && aircraftName === '787  All') {\r\n          aircraftName = 'Boeing 787-10';\r\n        }\r\n\r\n        flights[flightNumber] = {\r\n          from: trip.OriginAirport,\r\n          to: trip.DestinationAirport,\r\n          flightNumber: flightNumber,\r\n          airlines: getAirlineName(trip.Carriers),\r\n          aircraft: aircraftName,\r\n          duration: trip.TotalDuration,\r\n          departs: departDayDiff > 0 ? \r\n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \r\n            departureTime.format('HH:mm'),\r\n          arrives: arrivalDayDiff > 0 ? \r\n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \r\n            arrivalTime.format('HH:mm'),\r\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          economy: false,\r\n          business: false,\r\n          first: false,\r\n          isSelected: false,\r\n          segmentIndex: segmentIndex\r\n        };\r\n        \r\n        switch(trip.Cabin.toLowerCase()) {\r\n          case 'economy':\r\n            flights[flightNumber].economy = true;\r\n            break;\r\n          case 'business':\r\n            flights[flightNumber].business = true;\r\n            break;\r\n          case 'first':\r\n            flights[flightNumber].first = true;\r\n            break;\r\n        }\r\n      });\r\n    \r\n    return Object.values(flights);\r\n  };\r\n\r\n  const handleDateSearch = async (currentRoute) => {\r\n    if (!selectedDates || !currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingSegments(true);\r\n    const newProcessedSegments = [];\r\n    const [startDate, endDate] = selectedDates;\r\n    const baseDate = dayjs(startDate).format('YYYY-MM-DD');\r\n    \r\n    console.log('\\n=== Processing Segments ===');\r\n    console.log('Date Range:', {\r\n      start: dayjs(startDate).format('YYYY-MM-DD'),\r\n      end: dayjs(endDate).format('YYYY-MM-DD')\r\n    });\r\n    \r\n    try {\r\n      // Process all segments\r\n      for (let i = 0; i < currentRoute.length - 1; i++) {\r\n        const from = currentRoute[i];\r\n        const to = currentRoute[i + 1];\r\n        \r\n        console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\r\n        \r\n        let timeWindow = null;\r\n        const dates = new Set();\r\n\r\n        if (i === 0) {\r\n          // First segment - use full date range\r\n          const startDay = dayjs(startDate).startOf('day');\r\n          const endDay = dayjs(endDate).endOf('day');\r\n          \r\n          console.log('\\n=== First Segment Details ===');\r\n          console.log('Time Window: 00:00 on first date to 23:59 on last date');\r\n          console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\r\n          console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\r\n          \r\n          // Get all dates in range\r\n          for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\r\n            dates.add(d.format('YYYY-MM-DD'));\r\n          }\r\n        } else {\r\n          // Handle subsequent segments\r\n          const prevSegment = newProcessedSegments[i - 1];\r\n          \r\n          // If no previous flights found, use full date range for all segments\r\n          if (!prevSegment || prevSegment.flights.length === 0) {\r\n            const startDay = dayjs(startDate).startOf('day');\r\n            const endDay = dayjs(endDate).endOf('day');\r\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\r\n              dates.add(d.format('YYYY-MM-DD'));\r\n            }\r\n            console.log('No previous flights found. Using full date range for this segment');\r\n          } else {\r\n            // Calculate time window from previous segment's flights\r\n            const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\r\n            arrivals.sort((a, b) => a.valueOf() - b.valueOf());\r\n            \r\n            timeWindow = {\r\n              start: arrivals[0],\r\n              end: arrivals[arrivals.length - 1].add(24, 'hours')\r\n            };\r\n            \r\n            // Get dates for time window\r\n            for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\r\n              dates.add(d.format('YYYY-MM-DD'));\r\n            }\r\n            \r\n            console.log('Time Window based on previous segment arrivals:');\r\n            console.log('  Start:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\r\n            console.log('  End:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\r\n          }\r\n        }\r\n\r\n        // Process each date\r\n        const allFlights = [];\r\n        for (const date of dates) {\r\n          const route = routeDetails.find(r => \r\n            r.origin === from && \r\n            r.destination === to &&\r\n            r.date === date\r\n          );\r\n\r\n          if (!route) {\r\n            console.log(`No route found for ${from}-${to} on ${date}`);\r\n            continue;\r\n          }\r\n\r\n          console.log(`\\nFetching ${from}-${to} for ${date}:`);\r\n          console.log(`Segment ID: ${route.ID}`);\r\n          \r\n          try {\r\n            const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\r\n              method: 'GET',\r\n              headers: {\r\n                'accept': 'application/json',\r\n                'Partner-Authorization': apiKey,\r\n                'Segment-ID': route.ID\r\n              }\r\n            });\r\n\r\n            if (!response.ok) {\r\n              console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\r\n              continue;\r\n            }\r\n\r\n            const data = await response.json();\r\n            const processedFlights = processFlightData(data, timeWindow, i);\r\n            console.log(`✓ Found ${processedFlights.length} valid flights`);\r\n            allFlights.push(...processedFlights);\r\n          } catch (error) {\r\n            console.error(`Error processing ${from}-${to} for ${date}:`, error);\r\n          }\r\n        }\r\n\r\n        console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\r\n\r\n        // Store searched dates in segment data\r\n        newProcessedSegments[i] = {\r\n          route: `${from}-${to}`,\r\n          flights: allFlights,\r\n          searchDates: dates, // Add this field\r\n          earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\r\n          latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\r\n        };\r\n\r\n        // Only break if previous segment had flights but current segment found none\r\n        if (allFlights.length === 0 && i > 0 && newProcessedSegments[i-1].flights.length > 0) {\r\n          console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\r\n          console.log('Skipping remaining segments');\r\n          break;\r\n        }\r\n      }\r\n\r\n      // After processing all segments\r\n      if (newProcessedSegments.length >= 1) {\r\n        console.log('\\n=== Flight Combinations ===');\r\n        \r\n        // Find the first and last segments with flights\r\n        const firstSegmentWithFlights = newProcessedSegments.findIndex(\r\n          segment => segment.flights && segment.flights.length > 0\r\n        );\r\n        \r\n        const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(\r\n          segment => segment.flights && segment.flights.length > 0\r\n        );\r\n        const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\r\n\r\n        console.log(`First segment with flights: ${firstSegmentWithFlights}`);\r\n        console.log(`Last segment with flights: ${lastSegmentIndex}`);\r\n\r\n        // Find all valid combinations recursively\r\n        const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\r\n          // If we've reached beyond the last valid segment, this is a valid combination\r\n          if (segmentIndex > lastSegmentIndex) {\r\n            return [currentPath];\r\n          }\r\n\r\n          const validCombos = [];\r\n          const currentSegment = newProcessedSegments[segmentIndex];\r\n\r\n          // If no flights in current segment, try next segment\r\n          if (!currentSegment.flights || currentSegment.flights.length === 0) {\r\n            return findValidCombinations(currentPath, segmentIndex + 1);\r\n          }\r\n\r\n          // For the first flight in the path, accept any flight\r\n          if (currentPath.length === 0) {\r\n            currentSegment.flights.forEach(flight => {\r\n              const combos = findValidCombinations([flight], segmentIndex + 1);\r\n              validCombos.push(...combos);\r\n            });\r\n          } \r\n          // For subsequent segments, check connection times\r\n          else {\r\n            const previousFlight = currentPath[currentPath.length - 1];\r\n            const previousArrival = dayjs(previousFlight.ArrivesAt);\r\n\r\n            currentSegment.flights.forEach(flight => {\r\n              const departure = dayjs(flight.DepartsAt);\r\n              const connectionTime = departure.diff(previousArrival, 'minutes');\r\n\r\n              // Check if departure is within 24 hours of previous arrival\r\n              if (connectionTime >= 60 && connectionTime <= 24 * 60) {\r\n                const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\r\n                validCombos.push(...combos);\r\n              }\r\n            });\r\n          }\r\n\r\n          return validCombos;\r\n        };\r\n\r\n        // Get all valid combinations\r\n        const allCombinations = findValidCombinations();\r\n\r\n        // Log the combinations\r\n        console.log('\\n=== Valid Combinations ===');\r\n        allCombinations.forEach(combo => {\r\n          const flightInfo = combo.map((flight, idx) => {\r\n            if (idx === 0) return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\r\n            \r\n            const prevFlight = combo[idx - 1];\r\n            const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\r\n            const hours = Math.floor(connectionTime / 60);\r\n            const minutes = connectionTime % 60;\r\n            return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\r\n          });\r\n          \r\n          console.log(flightInfo.join(' → '));\r\n        });\r\n\r\n        // Create a map of valid flights by segment\r\n        const validFlightsBySegment = new Map();\r\n        allCombinations.forEach(combo => {\r\n          combo.forEach(flight => {\r\n            const segmentKey = flight.segmentIndex;\r\n            if (!validFlightsBySegment.has(segmentKey)) {\r\n              validFlightsBySegment.set(segmentKey, new Set());\r\n            }\r\n            validFlightsBySegment.get(segmentKey).add(\r\n              `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`\r\n            );\r\n          });\r\n        });\r\n\r\n        // Filter and process flights\r\n        const filteredFlights = [];\r\n        for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\r\n          const segment = newProcessedSegments[i];\r\n          if (!segment || !segment.flights) continue;\r\n\r\n          const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\r\n          \r\n          // Add valid flights from this segment\r\n          segment.flights.forEach(flight => {\r\n            const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\r\n            if (validFlightsForSegment.has(flightKey)) {\r\n              filteredFlights.push({\r\n                ...flight,\r\n                isSelected: false,\r\n                segmentIndex: i\r\n              });\r\n            }\r\n          });\r\n        }\r\n\r\n        setSegmentDetails(filteredFlights);\r\n        setValidCombinations(allCombinations);\r\n\r\n        // Log flights by segment\r\n        console.log('\\n=== Flights By Segment ===');\r\n        for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\r\n          const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\r\n          if (segmentFlights.length > 0) {\r\n            console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\r\n            segmentFlights\r\n              .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\r\n              .forEach(flight => {\r\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\r\n              });\r\n          }\r\n        }\r\n        \r\n        console.log('\\n======================');\r\n      } else {\r\n        setSegmentDetails(newProcessedSegments.flatMap((segment, index) => \r\n          segment.flights.map(flight => ({\r\n            ...flight,\r\n            isSelected: false,\r\n            segmentIndex: index\r\n          }))\r\n        ));\r\n        setValidCombinations([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching segment details:', error);\r\n    } finally {\r\n      setIsLoadingSegments(false);\r\n    }\r\n  };\r\n\r\n  const resetDetails = () => {\r\n    setSelectedDates(null);\r\n    setApiKey('');\r\n    setSegmentDetails([]);\r\n  };\r\n\r\n  const handleFlightSelect = (flight, segmentIndex) => {\r\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD')}`;\r\n    console.log('Selected flight:', flightKey, 'from segment:', segmentIndex);\r\n    \r\n    // Create new selected flights object\r\n    const newSelected = { ...selectedFlights };\r\n    \r\n    // Toggle selection\r\n    if (newSelected[segmentIndex] && \r\n        `${newSelected[segmentIndex].flightNumber}_${dayjs(newSelected[segmentIndex].DepartsAt).format('YYYY-MM-DD')}` === flightKey) {\r\n      delete newSelected[segmentIndex];\r\n      console.log('Deselected flight');\r\n    } else {\r\n      newSelected[segmentIndex] = flight;\r\n      console.log('Selected flight');\r\n    }\r\n    \r\n    setSelectedFlights(newSelected);\r\n    \r\n    if (Object.keys(newSelected).length > 0) {\r\n      // Find ALL valid combinations that include the selected flight\r\n      const validCombos = validCombinations.filter(combo => {\r\n        const selectedFlight = combo[segmentIndex];\r\n        return selectedFlight.flightNumber === flight.flightNumber &&\r\n               dayjs(selectedFlight.DepartsAt).isSame(dayjs(flight.DepartsAt));\r\n      });\r\n\r\n      console.log(`Found ${validCombos.length} valid combinations with ${flight.flightNumber}`);\r\n\r\n      // Get all valid flights from these combinations\r\n      const validFlights = new Set();\r\n      validCombos.forEach(combo => {\r\n        combo.forEach((f, idx) => {\r\n          validFlights.add(`${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${idx}`);\r\n        });\r\n      });\r\n\r\n      // Deduplicate and update segment details\r\n      const filteredFlights = validCombos.flatMap(combo => \r\n        combo.map((f, idx) => ({\r\n          ...f,\r\n          isSelected: idx === segmentIndex && f.flightNumber === flight.flightNumber,\r\n          segmentIndex: idx\r\n        }))\r\n      );\r\n\r\n      // Remove duplicates while preserving order\r\n      const seenFlights = new Set();\r\n      const uniqueFlights = filteredFlights.filter(f => {\r\n        const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${f.segmentIndex}`;\r\n        if (!seenFlights.has(key)) {\r\n          seenFlights.add(key);\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n\r\n      setSegmentDetails(uniqueFlights);\r\n    } else {\r\n      // When deselecting, show all unique flights from valid combinations\r\n      const allValidFlights = new Map(); // Use Map to track flights by segment\r\n      \r\n      validCombinations.forEach(combo => {\r\n        combo.forEach((f, idx) => {\r\n          const segmentKey = `${f.from}-${f.to}`;\r\n          if (!allValidFlights.has(segmentKey)) {\r\n            allValidFlights.set(segmentKey, new Map());\r\n          }\r\n          \r\n          const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\r\n          if (!allValidFlights.get(segmentKey).has(flightKey)) {\r\n            allValidFlights.get(segmentKey).set(flightKey, {\r\n              ...f,\r\n              isSelected: false,\r\n              segmentIndex: idx\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      // Flatten the Map of Maps into an array\r\n      const resetFlights = Array.from(allValidFlights.values())\r\n        .flatMap(segmentFlights => Array.from(segmentFlights.values()));\r\n      \r\n      console.log('\\n=== Resetting to All Valid Flights ===');\r\n      Array.from(allValidFlights.entries()).forEach(([route, flights]) => {\r\n        console.log(`\\n${route}:`);\r\n        Array.from(flights.values())\r\n          .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\r\n          .forEach(f => console.log(`  ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`));\r\n      });\r\n      console.log('\\n======================');\r\n\r\n      setSegmentDetails(resetFlights);\r\n    }\r\n  };\r\n\r\n  const columns = useMemo(() => {\r\n    if (!selectedDates) return getColumns(handleFlightSelect);\r\n    const [startDate] = selectedDates;\r\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\r\n  }, [handleFlightSelect, selectedDates, getColumns]);\r\n\r\n  // Initialize with all flights from all combinations\r\n  useEffect(() => {\r\n    console.log('Updating combinations ref:', initialCombinations);\r\n    combinationsRef.current = initialCombinations;\r\n  }, [initialCombinations]);\r\n\r\n  // Initialize segment details\r\n  useEffect(() => {\r\n    if (initialCombinations.length > 0) {\r\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => \r\n        combo.map((f, idx) => ({\r\n          ...f,\r\n          isSelected: false,\r\n          segmentIndex: idx\r\n        }))\r\n      );\r\n\r\n      const uniqueFlights = Array.from(\r\n        new Map(allFlights.map(f => [\r\n          `${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`,\r\n          f\r\n        ])).values()\r\n      );\r\n\r\n      setSegmentDetails(uniqueFlights);\r\n    }\r\n  }, [initialCombinations]);\r\n\r\n  return {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    resetDetails,\r\n    selectedFlights,\r\n    setSelectedFlights,\r\n    validCombinations,\r\n    setValidCombinations,\r\n    handleFlightSelect,\r\n    columns\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}