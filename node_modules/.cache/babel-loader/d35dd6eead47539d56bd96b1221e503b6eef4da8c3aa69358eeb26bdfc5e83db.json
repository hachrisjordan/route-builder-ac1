{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nguyen77\\\\docker-neo4j\\\\route-builder-ac1\\\\src\\\\components\\\\FlightSearch\\\\FlightDetailsModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Modal, DatePicker, Input, Spin, Table, Button, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport { getSegmentColumns } from './segmentColumns';\nimport useFlightDetails from './hooks/useFlightDetails';\nimport FlightAvailabilityCalendar from './FlightAvailabilityCalendar';\nimport airlines from './data/airlines';\nimport { airports } from './data/airports';\nimport pricingData from './data/pricing.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  RangePicker\n} = DatePicker;\nconst FlightDetailsModal = ({\n  isVisible,\n  currentRoute,\n  onClose\n}) => {\n  _s();\n  var _selectedFlights$, _selectedFlights$$, _selectedFlights, _selectedFlights$2, _selectedFlights$3, _selectedFlights$3$, _selectedFlights2, _selectedFlights2$;\n  const [dateRangeError, setDateRangeError] = useState(false);\n  const {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability\n  } = useFlightDetails(getSegmentColumns);\n\n  // Clear data when modal closes\n  useEffect(() => {\n    if (!isVisible) {\n      resetDetails();\n      setDateRangeError(false);\n      setSelectedDates(null);\n      setApiKey('');\n    }\n  }, [isVisible]);\n  const handleOk = () => {\n    handleDateSearch(currentRoute);\n  };\n  const handleCancel = () => {\n    onClose();\n  };\n  const handleCalendarDateSelect = dateRange => {\n    setSelectedDates(dateRange);\n    setDateRangeError(false);\n  };\n  const handleCalendarSearchClick = () => {\n    if (!selectedDates) {\n      setDateRangeError(true);\n      return;\n    }\n    handleDateSearch(currentRoute);\n  };\n\n  // Function to group flights by segment with safety checks\n  const getSegmentTables = () => {\n    if (!(segmentDetails !== null && segmentDetails !== void 0 && segmentDetails.length) || !(currentRoute !== null && currentRoute !== void 0 && currentRoute.length)) return [];\n\n    // Group flights by segment index\n    const segmentGroups = segmentDetails.reduce((acc, flight) => {\n      const segmentIndex = flight.segmentIndex;\n      if (!acc[segmentIndex]) {\n        acc[segmentIndex] = [];\n      }\n      acc[segmentIndex].push(flight);\n      return acc;\n    }, {});\n\n    // Convert to array format with segment info\n    return Object.entries(segmentGroups).map(([index, flights]) => {\n      const currentIndex = parseInt(index);\n      const nextIndex = currentIndex + 1;\n\n      // Safety check for route indices\n      if (nextIndex >= currentRoute.length) return null;\n      const segmentRoute = `${currentRoute[currentIndex]}-${currentRoute[nextIndex]}`;\n      return {\n        index: currentIndex,\n        route: segmentRoute,\n        flights\n      };\n    }).filter(Boolean); // Remove any null entries\n  };\n\n  // Add pagination settings\n  const paginationConfig = {\n    pageSize: 5,\n    showSizeChanger: true,\n    showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} flights`,\n    pageSizeOptions: ['5', '10', '20', '50'],\n    position: ['bottomLeft']\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: \"Flight Details\",\n    open: isVisible,\n    onCancel: handleCancel,\n    footer: null,\n    width: 1600,\n    styles: {\n      body: {\n        padding: '12px',\n        maxHeight: '90vh',\n        overflow: 'auto'\n      },\n      content: {\n        maxWidth: '100vw'\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '8px',\n          marginBottom: 16\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '8px',\n            flex: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Enter your yapping password (Under Development)\",\n            value: apiKey,\n            onChange: e => setApiKey(e.target.value),\n            style: {\n              flex: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            disabled: !apiKey || !apiKey.toLowerCase().startsWith('pro'),\n            onClick: () => handleCalendarSearch(currentRoute),\n            children: \"Apply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), dateRangeError && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red'\n        },\n        children: \"Please select a date range in the calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlightAvailabilityCalendar, {\n      flightData: availabilityData,\n      currentRoute: currentRoute,\n      onDateRangeSelect: handleCalendarDateSelect,\n      selectedRange: selectedDates,\n      onSearch: handleCalendarSearchClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), isLoadingSegments ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        margin: '20px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this) : (segmentDetails === null || segmentDetails === void 0 ? void 0 : segmentDetails.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n        level: 4,\n        style: {\n          marginBottom: 0\n        },\n        children: \"Flights By Segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), getSegmentTables().map((segment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n          level: 5,\n          style: {\n            marginBottom: 12\n          },\n          children: [\"Segment \", segment.index + 1, \" (\", segment.route, \"):\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          columns: columns,\n          dataSource: segment.flights,\n          pagination: paginationConfig,\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this), index < getSegmentTables().length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: '0px',\n            margin: '0px',\n            textAlign: 'center',\n            fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography.Text, {\n            strong: true,\n            children: (() => {\n              const currentSegmentFlights = selectedFlights[segment.index];\n              const nextSegmentFlights = selectedFlights[segment.index + 1];\n              if (!(currentSegmentFlights !== null && currentSegmentFlights !== void 0 && currentSegmentFlights[0]) || !(nextSegmentFlights !== null && nextSegmentFlights !== void 0 && nextSegmentFlights[0])) {\n                return 'Select flights to see layover duration';\n              }\n              const currentFlight = currentSegmentFlights[0];\n              const nextFlight = nextSegmentFlights[0];\n              const arrivalTime = dayjs(currentFlight.ArrivesAt);\n              const departureTime = dayjs(nextFlight.DepartsAt);\n              const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n              const hours = Math.floor(layoverMinutes / 60);\n              const minutes = layoverMinutes % 60;\n              return `Layover duration: ${hours}h ${minutes}m`;\n            })()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 19\n        }, this)]\n      }, segment.index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }, this), Object.keys(selectedFlights).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 24\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n        level: 4,\n        children: \"Journey Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        columns: [{\n          title: 'From',\n          dataIndex: 'from',\n          key: 'from',\n          render: () => {\n            var _selectedFlights$firs;\n            // Get the first selected segment's origin\n            const firstSegmentIndex = Math.min(...Object.keys(selectedFlights).map(Number));\n            const firstFlight = (_selectedFlights$firs = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs === void 0 ? void 0 : _selectedFlights$firs[0];\n            return (firstFlight === null || firstFlight === void 0 ? void 0 : firstFlight.from) || '-';\n          }\n        }, {\n          title: 'To',\n          dataIndex: 'to',\n          key: 'to'\n        }, {\n          title: 'Airlines',\n          dataIndex: 'airlines',\n          key: 'airlines',\n          render: airlinesList => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: '4px'\n            },\n            children: airlinesList.split(', ').map(airlineName => {\n              const airline = airlines.find(a => airlineName.startsWith(a.label.replace(` (${a.value})`, '')));\n              const airlineCode = airline === null || airline === void 0 ? void 0 : airline.value;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: '8px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `${process.env.PUBLIC_URL}/${airlineCode}.png`,\n                  alt: airlineCode,\n                  style: {\n                    width: '24px',\n                    height: '24px',\n                    objectFit: 'contain',\n                    borderRadius: '4px'\n                  },\n                  onError: e => {\n                    e.target.style.display = 'none';\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 27\n                }, this), airlineName]\n              }, airlineCode, true, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 25\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 19\n          }, this)\n        }, {\n          title: 'Duration',\n          dataIndex: 'duration',\n          key: 'duration'\n        }, {\n          title: 'Departs',\n          dataIndex: 'departs',\n          key: 'departs'\n        }, {\n          title: 'Arrives',\n          dataIndex: 'arrives',\n          key: 'arrives'\n        }, {\n          title: 'Economy Price',\n          dataIndex: 'economyPrice',\n          key: 'economyPrice'\n        }, {\n          title: 'Business Price (Max %)',\n          dataIndex: 'businessPrice',\n          key: 'businessPrice',\n          render: (text, record) => {\n            if (text === 'N/A') return text;\n            const [price, percentage] = text.split(' (');\n            if (!percentage) return text;\n            return `${price} (${percentage}`;\n          }\n        }, {\n          title: 'First Price (Max %)',\n          dataIndex: 'firstPrice',\n          key: 'firstPrice',\n          render: (text, record) => {\n            if (text === 'N/A') return text;\n            const [price, percentage] = text.split(' (');\n            if (!percentage) return text;\n            return `${price} (${percentage}`;\n          }\n        }],\n        dataSource: [{\n          key: 'summary',\n          from: ((_selectedFlights$ = selectedFlights[0]) === null || _selectedFlights$ === void 0 ? void 0 : (_selectedFlights$$ = _selectedFlights$[0]) === null || _selectedFlights$$ === void 0 ? void 0 : _selectedFlights$$.from) || '-',\n          to: ((_selectedFlights = selectedFlights[Object.keys(selectedFlights).length - 1]) === null || _selectedFlights === void 0 ? void 0 : (_selectedFlights$2 = _selectedFlights[0]) === null || _selectedFlights$2 === void 0 ? void 0 : _selectedFlights$2.to) || '-',\n          airlines: [...new Set(Object.values(selectedFlights).flatMap(flights => flights.map(f => f.airlines)))].join(', '),\n          duration: (() => {\n            let totalMinutes = 0;\n            const segments = Object.keys(selectedFlights).sort((a, b) => parseInt(a) - parseInt(b));\n            segments.forEach(segmentIndex => {\n              const flight = selectedFlights[segmentIndex][0];\n              totalMinutes += parseInt(flight.duration);\n              const nextSegmentIndex = (parseInt(segmentIndex) + 1).toString();\n              if (selectedFlights[nextSegmentIndex]) {\n                const currentFlight = selectedFlights[segmentIndex][0];\n                const nextFlight = selectedFlights[nextSegmentIndex][0];\n                const arrivalTime = dayjs(currentFlight.ArrivesAt);\n                const departureTime = dayjs(nextFlight.DepartsAt);\n                const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n                totalMinutes += layoverMinutes;\n              }\n            });\n            const hours = Math.floor(totalMinutes / 60);\n            const minutes = totalMinutes % 60;\n            return `${hours}h ${minutes}m`;\n          })(),\n          departs: dayjs((_selectedFlights$3 = selectedFlights[0]) === null || _selectedFlights$3 === void 0 ? void 0 : (_selectedFlights$3$ = _selectedFlights$3[0]) === null || _selectedFlights$3$ === void 0 ? void 0 : _selectedFlights$3$.DepartsAt).format('HH:mm MM-DD'),\n          arrives: dayjs((_selectedFlights2 = selectedFlights[Object.keys(selectedFlights).length - 1]) === null || _selectedFlights2 === void 0 ? void 0 : (_selectedFlights2$ = _selectedFlights2[0]) === null || _selectedFlights2$ === void 0 ? void 0 : _selectedFlights2$.ArrivesAt).format('HH:mm MM-DD'),\n          economyPrice: (() => {\n            // Get origin and destination airports\n            const originAirport = airports.find(a => {\n              var _selectedFlights$4, _selectedFlights$4$;\n              return a.IATA === ((_selectedFlights$4 = selectedFlights[0]) === null || _selectedFlights$4 === void 0 ? void 0 : (_selectedFlights$4$ = _selectedFlights$4[0]) === null || _selectedFlights$4$ === void 0 ? void 0 : _selectedFlights$4$.from);\n            });\n            const destAirport = airports.find(a => {\n              var _selectedFlights3, _selectedFlights3$;\n              return a.IATA === ((_selectedFlights3 = selectedFlights[Object.keys(selectedFlights).length - 1]) === null || _selectedFlights3 === void 0 ? void 0 : (_selectedFlights3$ = _selectedFlights3[0]) === null || _selectedFlights3$ === void 0 ? void 0 : _selectedFlights3$.to);\n            });\n            if (!originAirport || !destAirport) return '-';\n\n            // Calculate total distance\n            let totalDistance = 0;\n            Object.values(selectedFlights).forEach(flights => {\n              flights.forEach(flight => {\n                totalDistance += parseInt(flight.distance || 0);\n              });\n            });\n\n            // Find matching price in pricing data\n            const pricing = pricingData.find(p => p[\"From Region\"] === originAirport.Zone && p[\"To Region\"] === destAirport.Zone && totalDistance >= p[\"Min Distance\"] && totalDistance <= p[\"Max Distance\"]);\n            return pricing ? pricing.Economy.toLocaleString() : '-';\n          })(),\n          businessPrice: (() => {\n            // Check if any segment has first class only (no eco or business)\n            const hasFirstOnly = Object.values(selectedFlights).some(flights => flights.some(flight => flight.first && !flight.economy && !flight.business));\n\n            // Return N/A if any of these conditions are true\n            if (hasFirstOnly) return 'N/A';\n            const originAirport = airports.find(a => {\n              var _selectedFlights$5, _selectedFlights$5$;\n              return a.IATA === ((_selectedFlights$5 = selectedFlights[0]) === null || _selectedFlights$5 === void 0 ? void 0 : (_selectedFlights$5$ = _selectedFlights$5[0]) === null || _selectedFlights$5$ === void 0 ? void 0 : _selectedFlights$5$.from);\n            });\n            const destAirport = airports.find(a => {\n              var _selectedFlights4, _selectedFlights4$;\n              return a.IATA === ((_selectedFlights4 = selectedFlights[Object.keys(selectedFlights).length - 1]) === null || _selectedFlights4 === void 0 ? void 0 : (_selectedFlights4$ = _selectedFlights4[0]) === null || _selectedFlights4$ === void 0 ? void 0 : _selectedFlights4$.to);\n            });\n            if (!originAirport || !destAirport) return '-';\n            let totalDistance = 0;\n            let businessDistance = 0;\n            Object.values(selectedFlights).forEach((flights, index) => {\n              flights.forEach(flight => {\n                const distance = parseInt(flight.distance || 0);\n                totalDistance += distance;\n                if (flight.business) businessDistance += distance;\n              });\n            });\n            const businessPercentage = Math.round(businessDistance / totalDistance * 100);\n            const pricing = pricingData.find(p => p[\"From Region\"] === originAirport.Zone && p[\"To Region\"] === destAirport.Zone && totalDistance >= p[\"Min Distance\"] && totalDistance <= p[\"Max Distance\"]);\n            if (!pricing || !pricing.Business) return '-';\n\n            // Simplified percentage text to only show business class\n            const percentageText = `${businessPercentage}%)`;\n            return `${pricing.Business.toLocaleString()} (${percentageText}`;\n          })(),\n          firstPrice: (() => {\n            // Check if any segment has first class availability\n            const hasAnyFirst = Object.values(selectedFlights).some(flights => flights.some(flight => flight.first));\n\n            // Return N/A if there's no first class segment\n            if (!hasAnyFirst) return 'N/A';\n            const originAirport = airports.find(a => {\n              var _selectedFlights$6, _selectedFlights$6$;\n              return a.IATA === ((_selectedFlights$6 = selectedFlights[0]) === null || _selectedFlights$6 === void 0 ? void 0 : (_selectedFlights$6$ = _selectedFlights$6[0]) === null || _selectedFlights$6$ === void 0 ? void 0 : _selectedFlights$6$.from);\n            });\n            const destAirport = airports.find(a => {\n              var _selectedFlights5, _selectedFlights5$;\n              return a.IATA === ((_selectedFlights5 = selectedFlights[Object.keys(selectedFlights).length - 1]) === null || _selectedFlights5 === void 0 ? void 0 : (_selectedFlights5$ = _selectedFlights5[0]) === null || _selectedFlights5$ === void 0 ? void 0 : _selectedFlights5$.to);\n            });\n            if (!originAirport || !destAirport) return '-';\n            let totalDistance = 0;\n            let businessDistance = 0;\n            let firstDistance = 0;\n            Object.values(selectedFlights).forEach(flights => {\n              flights.forEach(flight => {\n                const distance = parseInt(flight.distance || 0);\n                totalDistance += distance;\n\n                // Only count business class distance if the segment doesn't have first class\n                if (flight.business && !flight.first) {\n                  businessDistance += distance;\n                }\n                if (flight.first) {\n                  firstDistance += distance;\n                }\n              });\n            });\n            const businessPercentage = Math.round(businessDistance / totalDistance * 100);\n            const firstPercentage = Math.round(firstDistance / totalDistance * 100);\n            const pricing = pricingData.find(p => p[\"From Region\"] === originAirport.Zone && p[\"To Region\"] === destAirport.Zone && totalDistance >= p[\"Min Distance\"] && totalDistance <= p[\"Max Distance\"]);\n            if (!pricing || !pricing.First) return '-';\n            let percentageText = '';\n            if (businessPercentage > 0 && firstPercentage > 0) {\n              percentageText = `${firstPercentage}% F, ${businessPercentage}% J)`;\n            } else if (firstPercentage > 0) {\n              percentageText = `${firstPercentage}%)`;\n            } else {\n              percentageText = '0%)';\n            }\n            return `${pricing.First.toLocaleString()} (${percentageText}`;\n          })()\n        }],\n        pagination: false,\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 12,\n          fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography.Text, {\n          children: (() => {\n            // Get origin and destination airports\n            const originAirport = airports.find(a => {\n              var _selectedFlights$7, _selectedFlights$7$;\n              return a.IATA === ((_selectedFlights$7 = selectedFlights[0]) === null || _selectedFlights$7 === void 0 ? void 0 : (_selectedFlights$7$ = _selectedFlights$7[0]) === null || _selectedFlights$7$ === void 0 ? void 0 : _selectedFlights$7$.from);\n            });\n            const destAirport = airports.find(a => {\n              var _selectedFlights6, _selectedFlights6$;\n              return a.IATA === ((_selectedFlights6 = selectedFlights[Object.keys(selectedFlights).length - 1]) === null || _selectedFlights6 === void 0 ? void 0 : (_selectedFlights6$ = _selectedFlights6[0]) === null || _selectedFlights6$ === void 0 ? void 0 : _selectedFlights6$.to);\n            });\n            if (!originAirport || !destAirport) return 'Unable to validate route: airport data missing';\n\n            // Haversine formula\n            const R = 3959; // Earth's radius in miles\n            const lat1 = originAirport.Latitude * Math.PI / 180;\n            const lat2 = destAirport.Latitude * Math.PI / 180;\n            const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n            const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            const directDistance = Math.round(R * c);\n\n            // Calculate total segment distance\n            let totalSegmentDistance = 0;\n            Object.values(selectedFlights).forEach(flights => {\n              flights.forEach(flight => {\n                totalSegmentDistance += parseInt(flight.distance || 0);\n              });\n            });\n            const isValid = totalSegmentDistance <= 2 * directDistance;\n            const percentage = Math.round(totalSegmentDistance / directDistance * 100);\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginTop: 8,\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                  color: isValid ? '#52c41a' : '#f5222d',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  gap: '8px',\n                  width: '100%'\n                },\n                children: isValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"\\u2713\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 521,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"ROUTING VALIDATED\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 522,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"\\u2717\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 526,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"THIS ROUTING IS INVALID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 527,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 21\n              }, this)\n            }, void 0, false);\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        :global(.ant-table) {\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(FlightDetailsModal, \"ZWtkI/7EBoe9m9vNkfWBmDZJCmQ=\", false, function () {\n  return [useFlightDetails];\n});\n_c = FlightDetailsModal;\nexport default FlightDetailsModal;\nvar _c;\n$RefreshReg$(_c, \"FlightDetailsModal\");","map":{"version":3,"names":["React","useState","useEffect","Modal","DatePicker","Input","Spin","Table","Button","Typography","dayjs","getSegmentColumns","useFlightDetails","FlightAvailabilityCalendar","airlines","airports","pricingData","jsxDEV","_jsxDEV","Fragment","_Fragment","RangePicker","FlightDetailsModal","isVisible","currentRoute","onClose","_s","_selectedFlights$","_selectedFlights$$","_selectedFlights","_selectedFlights$2","_selectedFlights$3","_selectedFlights$3$","_selectedFlights2","_selectedFlights2$","dateRangeError","setDateRangeError","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","isLoadingSegments","handleDateSearch","handleCalendarSearch","resetDetails","columns","selectedFlights","availabilityData","isLoadingAvailability","handleOk","handleCancel","handleCalendarDateSelect","dateRange","handleCalendarSearchClick","getSegmentTables","length","segmentGroups","reduce","acc","flight","segmentIndex","push","Object","entries","map","index","flights","currentIndex","parseInt","nextIndex","segmentRoute","route","filter","Boolean","paginationConfig","pageSize","showSizeChanger","showTotal","total","range","pageSizeOptions","position","title","open","onCancel","footer","width","styles","body","padding","maxHeight","overflow","content","maxWidth","children","style","marginBottom","display","gap","flex","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","type","disabled","toLowerCase","startsWith","onClick","color","flightData","onDateRangeSelect","selectedRange","onSearch","textAlign","margin","marginTop","Title","level","segment","dataSource","pagination","size","fontFamily","Text","strong","currentSegmentFlights","nextSegmentFlights","currentFlight","nextFlight","arrivalTime","ArrivesAt","departureTime","DepartsAt","layoverMinutes","diff","hours","Math","floor","minutes","keys","dataIndex","key","render","_selectedFlights$firs","firstSegmentIndex","min","Number","firstFlight","from","airlinesList","flexDirection","split","airlineName","airline","find","a","label","replace","airlineCode","alignItems","src","process","env","PUBLIC_URL","alt","height","objectFit","borderRadius","onError","text","record","price","percentage","to","Set","values","flatMap","f","join","duration","totalMinutes","segments","sort","b","forEach","nextSegmentIndex","toString","departs","format","arrives","economyPrice","originAirport","_selectedFlights$4","_selectedFlights$4$","IATA","destAirport","_selectedFlights3","_selectedFlights3$","totalDistance","distance","pricing","p","Zone","Economy","toLocaleString","businessPrice","hasFirstOnly","some","first","economy","business","_selectedFlights$5","_selectedFlights$5$","_selectedFlights4","_selectedFlights4$","businessDistance","businessPercentage","round","Business","percentageText","firstPrice","hasAnyFirst","_selectedFlights$6","_selectedFlights$6$","_selectedFlights5","_selectedFlights5$","firstDistance","firstPercentage","First","_selectedFlights$7","_selectedFlights$7$","_selectedFlights6","_selectedFlights6$","R","lat1","Latitude","PI","lat2","dLat","dLon","Longitude","sin","cos","c","atan2","sqrt","directDistance","totalSegmentDistance","isValid","fontSize","fontWeight","justifyContent","jsx","_c","$RefreshReg$"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/FlightDetailsModal.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Modal, DatePicker, Input, Spin, Table, Button, Typography } from 'antd';\r\nimport dayjs from 'dayjs';\r\nimport { getSegmentColumns } from './segmentColumns';\r\nimport useFlightDetails from './hooks/useFlightDetails';\r\nimport FlightAvailabilityCalendar from './FlightAvailabilityCalendar';\r\nimport airlines from './data/airlines';\r\nimport { airports } from './data/airports';\r\nimport pricingData from './data/pricing.json';\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst FlightDetailsModal = ({ isVisible, currentRoute, onClose }) => {\r\n  const [dateRangeError, setDateRangeError] = useState(false);\r\n  const {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    handleCalendarSearch,\r\n    resetDetails,\r\n    columns,\r\n    selectedFlights,\r\n    availabilityData,\r\n    isLoadingAvailability,\r\n  } = useFlightDetails(getSegmentColumns);\r\n\r\n  // Clear data when modal closes\r\n  useEffect(() => {\r\n    if (!isVisible) {\r\n      resetDetails();\r\n      setDateRangeError(false);\r\n      setSelectedDates(null);\r\n      setApiKey('');\r\n    }\r\n  }, [isVisible]);\r\n\r\n  const handleOk = () => {\r\n    handleDateSearch(currentRoute);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    onClose();\r\n  };\r\n\r\n  const handleCalendarDateSelect = (dateRange) => {\r\n    setSelectedDates(dateRange);\r\n    setDateRangeError(false);\r\n  };\r\n\r\n  const handleCalendarSearchClick = () => {\r\n    if (!selectedDates) {\r\n      setDateRangeError(true);\r\n      return;\r\n    }\r\n    handleDateSearch(currentRoute);\r\n  };\r\n\r\n  // Function to group flights by segment with safety checks\r\n  const getSegmentTables = () => {\r\n    if (!segmentDetails?.length || !currentRoute?.length) return [];\r\n\r\n    // Group flights by segment index\r\n    const segmentGroups = segmentDetails.reduce((acc, flight) => {\r\n      const segmentIndex = flight.segmentIndex;\r\n      if (!acc[segmentIndex]) {\r\n        acc[segmentIndex] = [];\r\n      }\r\n      acc[segmentIndex].push(flight);\r\n      return acc;\r\n    }, {});\r\n\r\n    // Convert to array format with segment info\r\n    return Object.entries(segmentGroups).map(([index, flights]) => {\r\n      const currentIndex = parseInt(index);\r\n      const nextIndex = currentIndex + 1;\r\n      \r\n      // Safety check for route indices\r\n      if (nextIndex >= currentRoute.length) return null;\r\n      \r\n      const segmentRoute = `${currentRoute[currentIndex]}-${currentRoute[nextIndex]}`;\r\n      return {\r\n        index: currentIndex,\r\n        route: segmentRoute,\r\n        flights\r\n      };\r\n    }).filter(Boolean); // Remove any null entries\r\n  };\r\n\r\n  // Add pagination settings\r\n  const paginationConfig = {\r\n    pageSize: 5,\r\n    showSizeChanger: true,\r\n    showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} flights`,\r\n    pageSizeOptions: ['5', '10', '20', '50'],\r\n    position: ['bottomLeft']\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Flight Details\"\r\n      open={isVisible}\r\n      onCancel={handleCancel}\r\n      footer={null}\r\n      width={1600}\r\n      styles={{\r\n        body: { \r\n          padding: '12px',\r\n          maxHeight: '90vh',\r\n          overflow: 'auto'\r\n        },\r\n        content: {\r\n          maxWidth: '100vw'\r\n        }\r\n      }}\r\n    >\r\n      <div style={{ marginBottom: 16 }}>\r\n        <div style={{ display: 'flex', gap: '8px', marginBottom: 16 }}>\r\n          <div style={{ display: 'flex', gap: '8px', flex: 1 }}>\r\n            <Input\r\n              placeholder=\"Enter your yapping password (Under Development)\"\r\n              value={apiKey}\r\n              onChange={(e) => setApiKey(e.target.value)}\r\n              style={{ flex: 1 }}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              disabled={!apiKey || !apiKey.toLowerCase().startsWith('pro')}\r\n              onClick={() => handleCalendarSearch(currentRoute)}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        {dateRangeError && (\r\n          <div style={{ color: 'red' }}>\r\n            Please select a date range in the calendar\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <FlightAvailabilityCalendar \r\n        flightData={availabilityData}\r\n        currentRoute={currentRoute}\r\n        onDateRangeSelect={handleCalendarDateSelect}\r\n        selectedRange={selectedDates}\r\n        onSearch={handleCalendarSearchClick}\r\n      />\r\n\r\n      {isLoadingSegments ? (\r\n        <div style={{ textAlign: 'center', margin: '20px 0' }}>\r\n          <Spin />\r\n        </div>\r\n      ) : (\r\n        segmentDetails?.length > 0 && (\r\n          <div style={{ marginTop: 0 }}>\r\n            <Typography.Title level={4} style={{ marginBottom: 0 }}>\r\n              Flights By Segment\r\n            </Typography.Title>\r\n            {getSegmentTables().map((segment, index) => (\r\n              <div key={segment.index} style={{ marginBottom: 0 }}>\r\n                <Typography.Title level={5} style={{ marginBottom: 12 }}>\r\n                  Segment {segment.index+1} ({segment.route}):\r\n                </Typography.Title>\r\n                <Table\r\n                  columns={columns}\r\n                  dataSource={segment.flights}\r\n                  pagination={paginationConfig}\r\n                  size=\"small\"\r\n                />\r\n                \r\n                {/* Add layover duration if there's a next segment and flights are selected */}\r\n                {index < getSegmentTables().length - 1 && (\r\n                  <div style={{ \r\n                    padding: '0px',\r\n                    margin: '0px',\r\n                    textAlign: 'center',\r\n                    fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\r\n                  }}>\r\n                    <Typography.Text strong>\r\n                      {(() => {\r\n                        const currentSegmentFlights = selectedFlights[segment.index];\r\n                        const nextSegmentFlights = selectedFlights[segment.index + 1];\r\n                        \r\n                        if (!currentSegmentFlights?.[0] || !nextSegmentFlights?.[0]) {\r\n                          return 'Select flights to see layover duration';\r\n                        }\r\n\r\n                        const currentFlight = currentSegmentFlights[0];\r\n                        const nextFlight = nextSegmentFlights[0];\r\n                        \r\n                        const arrivalTime = dayjs(currentFlight.ArrivesAt);\r\n                        const departureTime = dayjs(nextFlight.DepartsAt);\r\n                        const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\r\n                        \r\n                        const hours = Math.floor(layoverMinutes / 60);\r\n                        const minutes = layoverMinutes % 60;\r\n                        \r\n                        return `Layover duration: ${hours}h ${minutes}m`;\r\n                      })()}\r\n                    </Typography.Text>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )\r\n      )}\r\n\r\n      {/* Add Summary Table */}\r\n      {Object.keys(selectedFlights).length > 0 && (\r\n        <div style={{ marginTop: 24 }}>\r\n          <Typography.Title level={4}>Journey Summary</Typography.Title>\r\n          <Table\r\n            columns={[\r\n              {\r\n                title: 'From',\r\n                dataIndex: 'from',\r\n                key: 'from',\r\n                render: () => {\r\n                  // Get the first selected segment's origin\r\n                  const firstSegmentIndex = Math.min(...Object.keys(selectedFlights).map(Number));\r\n                  const firstFlight = selectedFlights[firstSegmentIndex]?.[0];\r\n                  return firstFlight?.from || '-';\r\n                }\r\n              },\r\n              {\r\n                title: 'To',\r\n                dataIndex: 'to',\r\n                key: 'to',\r\n              },\r\n              {\r\n                title: 'Airlines',\r\n                dataIndex: 'airlines',\r\n                key: 'airlines',\r\n                render: (airlinesList) => (\r\n                  <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\r\n                    {airlinesList.split(', ').map(airlineName => {\r\n                      const airline = airlines.find(a => airlineName.startsWith(a.label.replace(` (${a.value})`, '')));\r\n                      const airlineCode = airline?.value;\r\n                      return (\r\n                        <div key={airlineCode} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                          <img \r\n                            src={`${process.env.PUBLIC_URL}/${airlineCode}.png`}\r\n                            alt={airlineCode}\r\n                            style={{ \r\n                              width: '24px', \r\n                              height: '24px',\r\n                              objectFit: 'contain',\r\n                              borderRadius: '4px'\r\n                            }} \r\n                            onError={(e) => {\r\n                              e.target.style.display = 'none';\r\n                            }}\r\n                          />\r\n                          {airlineName}\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                ),\r\n              },\r\n              {\r\n                title: 'Duration',\r\n                dataIndex: 'duration',\r\n                key: 'duration',\r\n              },\r\n              {\r\n                title: 'Departs',\r\n                dataIndex: 'departs',\r\n                key: 'departs',\r\n              },\r\n              {\r\n                title: 'Arrives',\r\n                dataIndex: 'arrives',\r\n                key: 'arrives',\r\n              },\r\n              {\r\n                title: 'Economy Price',\r\n                dataIndex: 'economyPrice',\r\n                key: 'economyPrice',\r\n              },\r\n              {\r\n                title: 'Business Price (Max %)',\r\n                dataIndex: 'businessPrice',\r\n                key: 'businessPrice',\r\n                render: (text, record) => {\r\n                  if (text === 'N/A') return text;\r\n                  const [price, percentage] = text.split(' (');\r\n                  if (!percentage) return text;\r\n                  return `${price} (${percentage}`;\r\n                }\r\n              },\r\n              {\r\n                title: 'First Price (Max %)',\r\n                dataIndex: 'firstPrice',\r\n                key: 'firstPrice',\r\n                render: (text, record) => {\r\n                  if (text === 'N/A') return text;\r\n                  const [price, percentage] = text.split(' (');\r\n                  if (!percentage) return text;\r\n                  return `${price} (${percentage}`;\r\n                }\r\n              },\r\n            ]}\r\n            dataSource={[{\r\n              key: 'summary',\r\n              from: selectedFlights[0]?.[0]?.from || '-',\r\n              to: selectedFlights[Object.keys(selectedFlights).length - 1]?.[0]?.to || '-',\r\n              airlines: [...new Set(Object.values(selectedFlights).flatMap(flights => \r\n                flights.map(f => f.airlines)\r\n              ))].join(', '),\r\n              duration: (() => {\r\n                let totalMinutes = 0;\r\n                const segments = Object.keys(selectedFlights).sort((a, b) => parseInt(a) - parseInt(b));\r\n                \r\n                segments.forEach(segmentIndex => {\r\n                  const flight = selectedFlights[segmentIndex][0];\r\n                  totalMinutes += parseInt(flight.duration);\r\n                  \r\n                  const nextSegmentIndex = (parseInt(segmentIndex) + 1).toString();\r\n                  if (selectedFlights[nextSegmentIndex]) {\r\n                    const currentFlight = selectedFlights[segmentIndex][0];\r\n                    const nextFlight = selectedFlights[nextSegmentIndex][0];\r\n                    \r\n                    const arrivalTime = dayjs(currentFlight.ArrivesAt);\r\n                    const departureTime = dayjs(nextFlight.DepartsAt);\r\n                    const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\r\n                    \r\n                    totalMinutes += layoverMinutes;\r\n                  }\r\n                });\r\n                \r\n                const hours = Math.floor(totalMinutes / 60);\r\n                const minutes = totalMinutes % 60;\r\n                return `${hours}h ${minutes}m`;\r\n              })(),\r\n              departs: dayjs(selectedFlights[0]?.[0]?.DepartsAt).format('HH:mm MM-DD'),\r\n              arrives: dayjs(selectedFlights[Object.keys(selectedFlights).length - 1]?.[0]?.ArrivesAt).format('HH:mm MM-DD'),\r\n              economyPrice: (() => {\r\n                // Get origin and destination airports\r\n                const originAirport = airports.find(a => a.IATA === selectedFlights[0]?.[0]?.from);\r\n                const destAirport = airports.find(a => a.IATA === selectedFlights[Object.keys(selectedFlights).length - 1]?.[0]?.to);\r\n                \r\n                if (!originAirport || !destAirport) return '-';\r\n\r\n                // Calculate total distance\r\n                let totalDistance = 0;\r\n                Object.values(selectedFlights).forEach(flights => {\r\n                  flights.forEach(flight => {\r\n                    totalDistance += parseInt(flight.distance || 0);\r\n                  });\r\n                });\r\n\r\n                // Find matching price in pricing data\r\n                const pricing = pricingData.find(p => \r\n                  p[\"From Region\"] === originAirport.Zone &&\r\n                  p[\"To Region\"] === destAirport.Zone &&\r\n                  totalDistance >= p[\"Min Distance\"] &&\r\n                  totalDistance <= p[\"Max Distance\"]\r\n                );\r\n\r\n                return pricing ? pricing.Economy.toLocaleString() : '-';\r\n              })(),\r\n              businessPrice: (() => {\r\n                // Check if any segment has first class only (no eco or business)\r\n                const hasFirstOnly = Object.values(selectedFlights).some(flights => \r\n                  flights.some(flight => flight.first && !flight.economy && !flight.business)\r\n                );\r\n\r\n                // Return N/A if any of these conditions are true\r\n                if (hasFirstOnly) return 'N/A';\r\n\r\n                const originAirport = airports.find(a => a.IATA === selectedFlights[0]?.[0]?.from);\r\n                const destAirport = airports.find(a => a.IATA === selectedFlights[Object.keys(selectedFlights).length - 1]?.[0]?.to);\r\n                \r\n                if (!originAirport || !destAirport) return '-';\r\n\r\n                let totalDistance = 0;\r\n                let businessDistance = 0;\r\n\r\n                Object.values(selectedFlights).forEach((flights, index) => {\r\n                  flights.forEach(flight => {\r\n                    const distance = parseInt(flight.distance || 0);\r\n                    totalDistance += distance;\r\n                    if (flight.business) businessDistance += distance;\r\n                  });\r\n                });\r\n\r\n                const businessPercentage = Math.round((businessDistance / totalDistance) * 100);\r\n\r\n                const pricing = pricingData.find(p => \r\n                  p[\"From Region\"] === originAirport.Zone &&\r\n                  p[\"To Region\"] === destAirport.Zone &&\r\n                  totalDistance >= p[\"Min Distance\"] &&\r\n                  totalDistance <= p[\"Max Distance\"]\r\n                );\r\n\r\n                if (!pricing || !pricing.Business) return '-';\r\n\r\n                // Simplified percentage text to only show business class\r\n                const percentageText = `${businessPercentage}%)`;\r\n\r\n                return `${pricing.Business.toLocaleString()} (${percentageText}`;\r\n              })(),\r\n              firstPrice: (() => {\r\n                // Check if any segment has first class availability\r\n                const hasAnyFirst = Object.values(selectedFlights).some(flights => \r\n                  flights.some(flight => flight.first)\r\n                );\r\n\r\n                // Return N/A if there's no first class segment\r\n                if (!hasAnyFirst) return 'N/A';\r\n\r\n                const originAirport = airports.find(a => a.IATA === selectedFlights[0]?.[0]?.from);\r\n                const destAirport = airports.find(a => a.IATA === selectedFlights[Object.keys(selectedFlights).length - 1]?.[0]?.to);\r\n                \r\n                if (!originAirport || !destAirport) return '-';\r\n\r\n                let totalDistance = 0;\r\n                let businessDistance = 0;\r\n                let firstDistance = 0;\r\n\r\n                Object.values(selectedFlights).forEach(flights => {\r\n                  flights.forEach(flight => {\r\n                    const distance = parseInt(flight.distance || 0);\r\n                    totalDistance += distance;\r\n                    \r\n                    // Only count business class distance if the segment doesn't have first class\r\n                    if (flight.business && !flight.first) {\r\n                      businessDistance += distance;\r\n                    }\r\n                    if (flight.first) {\r\n                      firstDistance += distance;\r\n                    }\r\n                  });\r\n                });\r\n\r\n                const businessPercentage = Math.round((businessDistance / totalDistance) * 100);\r\n                const firstPercentage = Math.round((firstDistance / totalDistance) * 100);\r\n\r\n                const pricing = pricingData.find(p => \r\n                  p[\"From Region\"] === originAirport.Zone &&\r\n                  p[\"To Region\"] === destAirport.Zone &&\r\n                  totalDistance >= p[\"Min Distance\"] &&\r\n                  totalDistance <= p[\"Max Distance\"]\r\n                );\r\n\r\n                if (!pricing || !pricing.First) return '-';\r\n\r\n                let percentageText = '';\r\n                if (businessPercentage > 0 && firstPercentage > 0) {\r\n                  percentageText = `${firstPercentage}% F, ${businessPercentage}% J)`;\r\n                } else if (firstPercentage > 0) {\r\n                  percentageText = `${firstPercentage}%)`;\r\n                } else {\r\n                  percentageText = '0%)';\r\n                }\r\n\r\n                return `${pricing.First.toLocaleString()} (${percentageText}`;\r\n              })(),\r\n            }]}\r\n            pagination={false}\r\n            size=\"small\"\r\n          />\r\n          \r\n          {/* Add Route Validation */}\r\n          <div style={{ marginTop: 12, fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace' }}>\r\n            <Typography.Text>\r\n              {(() => {\r\n                // Get origin and destination airports\r\n                const originAirport = airports.find(a => a.IATA === selectedFlights[0]?.[0]?.from);\r\n                const destAirport = airports.find(a => \r\n                  a.IATA === selectedFlights[Object.keys(selectedFlights).length - 1]?.[0]?.to\r\n                );\r\n\r\n                if (!originAirport || !destAirport) return 'Unable to validate route: airport data missing';\r\n\r\n                // Haversine formula\r\n                const R = 3959; // Earth's radius in miles\r\n                const lat1 = originAirport.Latitude * Math.PI / 180;\r\n                const lat2 = destAirport.Latitude * Math.PI / 180;\r\n                const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\r\n                const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\r\n\r\n                const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n                          Math.cos(lat1) * Math.cos(lat2) *\r\n                          Math.sin(dLon/2) * Math.sin(dLon/2);\r\n                \r\n                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n                const directDistance = Math.round(R * c);\r\n\r\n                // Calculate total segment distance\r\n                let totalSegmentDistance = 0;\r\n                Object.values(selectedFlights).forEach(flights => {\r\n                  flights.forEach(flight => {\r\n                    totalSegmentDistance += parseInt(flight.distance || 0);\r\n                  });\r\n                });\r\n\r\n                const isValid = totalSegmentDistance <= (2 * directDistance);\r\n                const percentage = Math.round(totalSegmentDistance/directDistance * 100);\r\n\r\n                return (\r\n                  <>\r\n                    <div style={{ \r\n                      marginTop: 8,\r\n                      fontSize: '16px',\r\n                      fontWeight: 'bold',\r\n                      color: isValid ? '#52c41a' : '#f5222d',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      gap: '8px',\r\n                      width: '100%'\r\n                    }}>\r\n                      {isValid ? (\r\n                        <>\r\n                          <span>✓</span>\r\n                          <span>ROUTING VALIDATED</span>\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <span>✗</span>\r\n                          <span>THIS ROUTING IS INVALID</span>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                );\r\n              })()}\r\n            </Typography.Text>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <style jsx>{`\r\n        :global(.ant-table) {\r\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\r\n        }\r\n      `}</style>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default FlightDetailsModal; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}