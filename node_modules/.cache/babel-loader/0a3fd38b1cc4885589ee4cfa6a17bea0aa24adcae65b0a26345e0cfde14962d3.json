{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nimport { getSegmentColumns } from '../segmentColumns';\nexport default function useFlightDetails(getColumns) {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    var _data$results, _data$results$, _data$results$$data;\n    const flights = {};\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    const rawFlights = ((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : _data$results$$data.data) || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    rawFlights.filter(trip => {\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n      console.log(`  Carrier: ${trip.Carriers}`);\n      console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n      console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\n\n      // Filter out non-direct flights\n      if (trip.Stops !== 0) {\n        console.log('  ❌ Skipped: Not a direct flight');\n        return false;\n      }\n\n      // Filter out EK and FZ carriers\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log('  ❌ Skipped: Excluded carrier');\n        return false;\n      }\n      if (timeWindow) {\n        const departureTime = dayjs(trip.DepartsAt);\n        const isValid = departureTime.isAfter(timeWindow.start) && departureTime.isBefore(timeWindow.end);\n        if (!isValid) {\n          console.log('  ❌ Skipped: Outside time window');\n          console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n        } else {\n          console.log('  ✓ Accepted: Within time window');\n        }\n        return isValid;\n      }\n      console.log('  ✓ Accepted: No time window restrictions');\n      return true;\n    }).forEach(trip => {\n      const flightNumber = trip.FlightNumbers;\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const existingFlight = flights[flightNumber];\n\n      // If this is a duplicate flight, only keep the later one\n      if (existingFlight) {\n        const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n        if (departureTime.isBefore(existingDeparture)) {\n          return; // Skip this one, keep the existing later flight\n        }\n      }\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n      // Process aircraft name\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName && aircraftName === '787  All') {\n        aircraftName = 'Boeing 787-10';\n      }\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(trip.Carriers),\n        aircraft: aircraftName,\n        duration: trip.TotalDuration,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false,\n        isSelected: false,\n        segmentIndex: segmentIndex\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const handleDateSearch = async currentRoute => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    const newProcessedSegments = [];\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    try {\n      // Process all segments\n      for (let i = 0; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        const prevSegment = processedSegments[i - 1];\n        let timeWindow = null;\n        if (prevSegment) {\n          if (prevSegment.flights.length === 0) {\n            if (i === 1) {\n              timeWindow = {\n                start: dayjs(baseDate).startOf('day'),\n                end: dayjs(baseDate).add(1, 'day').endOf('day')\n              };\n            } else {\n              break;\n            }\n          } else {\n            // Calculate time window from previous segment's flights\n            const arrivals = prevSegment.flights.map(f => {\n              // Always base times on the selected date for all segments\n              const arrivalTime = dayjs(f.ArrivesAt);\n              return dayjs(`${baseDate} ${arrivalTime.format('HH:mm')}`).add(arrivalTime.diff(dayjs(f.ArrivesAt).startOf('day'), 'day'), 'day');\n            });\n            arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n            timeWindow = {\n              start: arrivals[0],\n              end: arrivals[arrivals.length - 1].add(24, 'hours')\n            };\n          }\n          console.log('\\nTime Window for', `${from}-${to}:`);\n          console.log('From:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\n          console.log('To:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\n        }\n\n        // Get all required dates for this segment\n        const dates = new Set();\n        if (timeWindow) {\n          let currentDate = timeWindow.start;\n          while (currentDate.isBefore(timeWindow.end) || currentDate.isSame(timeWindow.end, 'day')) {\n            dates.add(currentDate.format('YYYY-MM-DD'));\n            currentDate = currentDate.add(1, 'day');\n          }\n        } else {\n          dates.add(baseDate);\n        }\n        console.log(`\\nFetching dates for ${from}-${to}:`, Array.from(dates));\n\n        // Process each date\n        const allFlights = [];\n        for (const date of dates) {\n          const route = routeDetails.find(r => r.origin === from && r.destination === to && r.date === date);\n          if (!route) {\n            console.log(`No route found for ${from}-${to} on ${date}`);\n            continue;\n          }\n          console.log(`Processing route ${from}-${to} for ${date}:`);\n          console.log(`Segment ID: ${route.ID}`);\n          try {\n            const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n              method: 'GET',\n              headers: {\n                'accept': 'application/json',\n                'Partner-Authorization': apiKey,\n                'Segment-ID': route.ID\n              }\n            });\n            if (!response.ok) {\n              throw new Error(`Failed to fetch flight details for ${from}-${to}`);\n            }\n            const data = await response.json();\n            const processedFlights = processFlightData(data, timeWindow, i);\n            allFlights.push(...processedFlights);\n          } catch (error) {\n            console.error(`Error processing segment ${from}-${to} for ${date}:`, error);\n          }\n        }\n\n        // If no flights found for this segment and it's not the first one\n        if (allFlights.length === 0 && i > 0) {\n          console.log(`\\nNo flights found for segment ${from}-${to}`);\n          console.log('Skipping remaining segments');\n          break;\n        }\n        const earliestArrival = allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null;\n        const latestArrival = allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null;\n        newProcessedSegments.push({\n          route: `${from}-${to}`,\n          flights: allFlights,\n          earliestArrival,\n          latestArrival\n        });\n      }\n\n      // After processing all segments\n      if (newProcessedSegments.length >= 2) {\n        console.log('\\n=== Flight Combinations ===');\n\n        // Store valid combinations\n        const validCombinations = new Set();\n\n        // For each flight in first segment\n        newProcessedSegments[0].flights.forEach(firstFlight => {\n          const firstArrival = dayjs(firstFlight.ArrivesAt);\n\n          // Find all valid connections in second segment\n          const connections = newProcessedSegments[1].flights.filter(secondFlight => {\n            const secondDeparture = dayjs(secondFlight.DepartsAt);\n            return secondDeparture.isAfter(firstArrival) && secondDeparture.isBefore(firstArrival.add(24, 'hours'));\n          });\n\n          // Format and log each valid connection\n          connections.forEach(secondFlight => {\n            const connectionTime = dayjs(secondFlight.DepartsAt).diff(firstArrival, 'minutes');\n            const hours = Math.floor(connectionTime / 60);\n            const minutes = connectionTime % 60;\n            const connectionTimeFormatted = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n\n            // Add both flights to valid combinations set\n            const firstFlightKey = `${firstFlight.flightNumber}_${dayjs(firstFlight.DepartsAt).format('YYYY-MM-DD')}`;\n            const secondFlightKey = `${secondFlight.flightNumber}_${dayjs(secondFlight.DepartsAt).format('YYYY-MM-DD')}`;\n            validCombinations.add(firstFlightKey);\n            validCombinations.add(secondFlightKey);\n            console.log(`${firstFlight.flightNumber} (${dayjs(firstFlight.DepartsAt).format('MM-DD')}), ` + `${secondFlight.flightNumber} (${dayjs(secondFlight.DepartsAt).format('MM-DD')}) ` + `(${connectionTimeFormatted})`);\n          });\n        });\n        console.log('======================');\n\n        // Filter out flights that aren't part of any valid combination\n        const filteredFlights = newProcessedSegments.flatMap((segment, segmentIndex) => segment.flights.filter(flight => {\n          const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD')}`;\n          return validCombinations.has(flightKey);\n        }).map(flight => ({\n          ...flight,\n          isSelected: false,\n          segmentIndex\n        })));\n        setSegmentDetails(filteredFlights);\n      } else {\n        setSegmentDetails(newProcessedSegments.flatMap((segment, index) => segment.flights.map(flight => ({\n          ...flight,\n          isSelected: false,\n          segmentIndex: index\n        }))));\n      }\n    } catch (error) {\n      console.error('Error fetching segment details:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const resetDetails = () => {\n    setSelectedDates(null);\n    setApiKey('');\n    setSegmentDetails([]);\n  };\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD')}`;\n    console.log('Selected flight:', flightKey, 'from segment:', segmentIndex);\n\n    // Create new selected flights object\n    const newSelected = {\n      ...selectedFlights\n    };\n\n    // Toggle selection using the unique flight key\n    if (newSelected[segmentIndex] && `${newSelected[segmentIndex].flightNumber}_${dayjs(newSelected[segmentIndex].DepartsAt).format('YYYY-MM-DD')}` === flightKey) {\n      delete newSelected[segmentIndex];\n      console.log('Deselected flight');\n    } else {\n      newSelected[segmentIndex] = flight;\n      console.log('Selected flight');\n    }\n    setSelectedFlights(newSelected);\n\n    // Update all flights with new selection state\n    const updatedFlights = segmentDetails.map(f => {\n      var _newSelected$f$segmen, _newSelected$f$segmen2;\n      return {\n        ...f,\n        isSelected: ((_newSelected$f$segmen = newSelected[f.segmentIndex]) === null || _newSelected$f$segmen === void 0 ? void 0 : _newSelected$f$segmen.flightNumber) === f.flightNumber && dayjs((_newSelected$f$segmen2 = newSelected[f.segmentIndex]) === null || _newSelected$f$segmen2 === void 0 ? void 0 : _newSelected$f$segmen2.DepartsAt).format('YYYY-MM-DD') === dayjs(f.DepartsAt).format('YYYY-MM-DD')\n      };\n    });\n    setSegmentDetails(updatedFlights);\n\n    // Filter next segment if needed\n    if (Object.keys(newSelected).length > 0) {\n      const lastSegmentIndex = Math.max(...Object.keys(newSelected).map(Number));\n      const nextSegmentIndex = lastSegmentIndex + 1;\n      if (nextSegmentIndex < processedSegments.length) {\n        const lastFlight = newSelected[lastSegmentIndex];\n        const lastArrival = dayjs(lastFlight.ArrivesAt);\n\n        // Get valid next flights\n        const validNextFlights = processedSegments[nextSegmentIndex].flights.filter(nextFlight => {\n          const departure = dayjs(nextFlight.DepartsAt);\n          return departure.isAfter(lastArrival) && departure.isBefore(lastArrival.add(24, 'hours'));\n        }).map(f => ({\n          ...f,\n          isSelected: false,\n          segmentIndex: nextSegmentIndex\n        }));\n\n        // Combine selected flights with valid next flights\n        const filteredFlights = [...Object.entries(newSelected).map(([idx, f]) => ({\n          ...f,\n          isSelected: true,\n          segmentIndex: Number(idx)\n        })), ...validNextFlights];\n        setSegmentDetails(filteredFlights);\n      }\n    } else {\n      // Reset to show all flights\n      const allFlights = processedSegments.flatMap((segment, idx) => segment.flights.map(f => ({\n        ...f,\n        isSelected: false,\n        segmentIndex: idx\n      })));\n      setSegmentDetails(allFlights);\n    }\n  };\n\n  // Create columns with the handler\n  const columns = getColumns(handleFlightSelect);\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    resetDetails,\n    selectedFlights,\n    setSelectedFlights,\n    validCombinations,\n    setValidCombinations,\n    handleFlightSelect,\n    columns\n  };\n}\n_s(useFlightDetails, \"/cG0XP2KX+HDa/7SF1w6XX1+dKM=\");","map":{"version":3,"names":["useState","dayjs","routeDetails","airlines","getSegmentColumns","useFlightDetails","getColumns","_s","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","selectedFlights","setSelectedFlights","validCombinations","setValidCombinations","processedSegments","setProcessedSegments","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","segmentIndex","_data$results","_data$results$","_data$results$$data","flights","rawFlights","results","length","start","end","filter","trip","FlightNumbers","Carriers","DepartsAt","ArrivesAt","Stops","departureTime","isValid","isAfter","isBefore","forEach","flightNumber","existingFlight","existingDeparture","arrivalTime","baseDayjs","departDayDiff","diff","arrivalDayDiff","aircraftName","Aircraft","OriginAirport","DestinationAirport","aircraft","duration","TotalDuration","departs","arrives","economy","business","first","isSelected","Cabin","toLowerCase","Object","values","handleDateSearch","currentRoute","newProcessedSegments","i","prevSegment","startOf","add","endOf","arrivals","map","f","sort","b","valueOf","dates","Set","currentDate","isSame","Array","allFlights","ID","response","fetch","method","headers","ok","Error","json","processedFlights","push","error","earliestArrival","latestArrival","firstFlight","firstArrival","connections","secondFlight","secondDeparture","connectionTime","hours","Math","floor","minutes","connectionTimeFormatted","toString","padStart","firstFlightKey","secondFlightKey","filteredFlights","flatMap","segment","flight","flightKey","has","index","resetDetails","handleFlightSelect","newSelected","updatedFlights","_newSelected$f$segmen","_newSelected$f$segmen2","keys","lastSegmentIndex","max","Number","nextSegmentIndex","lastFlight","lastArrival","validNextFlights","nextFlight","departure","entries","idx","columns"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport routeDetails from '../../../data/route_details.json';\r\nimport airlines from '../../../data/airlines';\r\nimport { getSegmentColumns } from '../segmentColumns';\r\n\r\nexport default function useFlightDetails(getColumns) {\r\n  const [selectedDates, setSelectedDates] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [segmentDetails, setSegmentDetails] = useState([]);\r\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\r\n  const [selectedFlights, setSelectedFlights] = useState({});\r\n  const [validCombinations, setValidCombinations] = useState([]);\r\n  const [processedSegments, setProcessedSegments] = useState([]);\r\n\r\n  const formatTime = (dateStr, baseDate) => {\r\n    const date = dayjs(dateStr);\r\n    const base = dayjs(baseDate);\r\n    \r\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\r\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\r\n    \r\n    const timeStr = date.format('HH:mm');\r\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\r\n  };\r\n\r\n  const getAirlineName = (code) => {\r\n    const airline = airlines.find(a => a.value === code);\r\n    return airline ? airline.label.replace(` (${code})`, '') : code;\r\n  };\r\n\r\n  const getSegmentDistance = (from, to) => {\r\n    const route = routeDetails.find(r => \r\n      r.origin === from && \r\n      r.destination === to\r\n    );\r\n\r\n    if (!route) {\r\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\r\n      return 1000;\r\n    }\r\n\r\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\r\n    return route.distance;\r\n  };\r\n\r\n  const processFlightData = (data, timeWindow, segmentIndex) => {\r\n    const flights = {};\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    const rawFlights = data.results?.[0]?.data?.data || [];\r\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\r\n    \r\n    if (timeWindow) {\r\n      console.log('Time Window:', {\r\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\r\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\r\n      });\r\n    }\r\n    \r\n    rawFlights\r\n      .filter(trip => {\r\n        console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\r\n        console.log(`  Carrier: ${trip.Carriers}`);\r\n        console.log(`  Departs: ${dayjs(trip.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\r\n        console.log(`  Arrives: ${dayjs(trip.ArrivesAt).format('YYYY-MM-DD HH:mm')}`);\r\n        \r\n        // Filter out non-direct flights\r\n        if (trip.Stops !== 0) {\r\n          console.log('  ❌ Skipped: Not a direct flight');\r\n          return false;\r\n        }\r\n        \r\n        // Filter out EK and FZ carriers\r\n        if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\r\n          console.log('  ❌ Skipped: Excluded carrier');\r\n          return false;\r\n        }\r\n        \r\n        if (timeWindow) {\r\n          const departureTime = dayjs(trip.DepartsAt);\r\n          const isValid = departureTime.isAfter(timeWindow.start) && \r\n                         departureTime.isBefore(timeWindow.end);\r\n          \r\n          if (!isValid) {\r\n            console.log('  ❌ Skipped: Outside time window');\r\n            console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\r\n          } else {\r\n            console.log('  ✓ Accepted: Within time window');\r\n          }\r\n          return isValid;\r\n        }\r\n        \r\n        console.log('  ✓ Accepted: No time window restrictions');\r\n        return true;\r\n      })\r\n      .forEach(trip => {\r\n        const flightNumber = trip.FlightNumbers;\r\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\r\n        const existingFlight = flights[flightNumber];\r\n\r\n        // If this is a duplicate flight, only keep the later one\r\n        if (existingFlight) {\r\n          const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\r\n          if (departureTime.isBefore(existingDeparture)) {\r\n            return; // Skip this one, keep the existing later flight\r\n          }\r\n        }\r\n\r\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\r\n        const baseDayjs = dayjs(baseDate);\r\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\r\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\r\n\r\n        // Process aircraft name\r\n        let aircraftName = trip.Aircraft[0];\r\n        if (aircraftName && aircraftName === '787  All') {\r\n          aircraftName = 'Boeing 787-10';\r\n        }\r\n\r\n        flights[flightNumber] = {\r\n          from: trip.OriginAirport,\r\n          to: trip.DestinationAirport,\r\n          flightNumber: flightNumber,\r\n          airlines: getAirlineName(trip.Carriers),\r\n          aircraft: aircraftName,\r\n          duration: trip.TotalDuration,\r\n          departs: departDayDiff > 0 ? \r\n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \r\n            departureTime.format('HH:mm'),\r\n          arrives: arrivalDayDiff > 0 ? \r\n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \r\n            arrivalTime.format('HH:mm'),\r\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          economy: false,\r\n          business: false,\r\n          first: false,\r\n          isSelected: false,\r\n          segmentIndex: segmentIndex\r\n        };\r\n        \r\n        switch(trip.Cabin.toLowerCase()) {\r\n          case 'economy':\r\n            flights[flightNumber].economy = true;\r\n            break;\r\n          case 'business':\r\n            flights[flightNumber].business = true;\r\n            break;\r\n          case 'first':\r\n            flights[flightNumber].first = true;\r\n            break;\r\n        }\r\n      });\r\n    \r\n    return Object.values(flights);\r\n  };\r\n\r\n  const handleDateSearch = async (currentRoute) => {\r\n    if (!selectedDates || !currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingSegments(true);\r\n    const newProcessedSegments = [];\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    try {\r\n      // Process all segments\r\n      for (let i = 0; i < currentRoute.length - 1; i++) {\r\n        const from = currentRoute[i];\r\n        const to = currentRoute[i + 1];\r\n        const prevSegment = processedSegments[i - 1];\r\n        \r\n        let timeWindow = null;\r\n        if (prevSegment) {\r\n          if (prevSegment.flights.length === 0) {\r\n            if (i === 1) {\r\n              timeWindow = {\r\n                start: dayjs(baseDate).startOf('day'),\r\n                end: dayjs(baseDate).add(1, 'day').endOf('day')\r\n              };\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            // Calculate time window from previous segment's flights\r\n            const arrivals = prevSegment.flights.map(f => {\r\n              // Always base times on the selected date for all segments\r\n              const arrivalTime = dayjs(f.ArrivesAt);\r\n              return dayjs(`${baseDate} ${arrivalTime.format('HH:mm')}`).add(arrivalTime.diff(dayjs(f.ArrivesAt).startOf('day'), 'day'), 'day');\r\n            });\r\n            \r\n            arrivals.sort((a, b) => a.valueOf() - b.valueOf());\r\n            \r\n            timeWindow = {\r\n              start: arrivals[0],\r\n              end: arrivals[arrivals.length - 1].add(24, 'hours')\r\n            };\r\n          }\r\n          \r\n          console.log('\\nTime Window for', `${from}-${to}:`);\r\n          console.log('From:', timeWindow.start.format('YYYY-MM-DD HH:mm'));\r\n          console.log('To:', timeWindow.end.format('YYYY-MM-DD HH:mm'));\r\n        }\r\n\r\n        // Get all required dates for this segment\r\n        const dates = new Set();\r\n        if (timeWindow) {\r\n          let currentDate = timeWindow.start;\r\n          while (currentDate.isBefore(timeWindow.end) || currentDate.isSame(timeWindow.end, 'day')) {\r\n            dates.add(currentDate.format('YYYY-MM-DD'));\r\n            currentDate = currentDate.add(1, 'day');\r\n          }\r\n        } else {\r\n          dates.add(baseDate);\r\n        }\r\n\r\n        console.log(`\\nFetching dates for ${from}-${to}:`, Array.from(dates));\r\n        \r\n        // Process each date\r\n        const allFlights = [];\r\n        for (const date of dates) {\r\n          const route = routeDetails.find(r => \r\n            r.origin === from && \r\n            r.destination === to &&\r\n            r.date === date\r\n          );\r\n\r\n          if (!route) {\r\n            console.log(`No route found for ${from}-${to} on ${date}`);\r\n            continue;\r\n          }\r\n\r\n          console.log(`Processing route ${from}-${to} for ${date}:`);\r\n          console.log(`Segment ID: ${route.ID}`);\r\n          \r\n          try {\r\n            const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\r\n              method: 'GET',\r\n              headers: {\r\n                'accept': 'application/json',\r\n                'Partner-Authorization': apiKey,\r\n                'Segment-ID': route.ID\r\n              }\r\n            });\r\n\r\n            if (!response.ok) {\r\n              throw new Error(`Failed to fetch flight details for ${from}-${to}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            const processedFlights = processFlightData(data, timeWindow, i);\r\n            allFlights.push(...processedFlights);\r\n          } catch (error) {\r\n            console.error(`Error processing segment ${from}-${to} for ${date}:`, error);\r\n          }\r\n        }\r\n\r\n        // If no flights found for this segment and it's not the first one\r\n        if (allFlights.length === 0 && i > 0) {\r\n          console.log(`\\nNo flights found for segment ${from}-${to}`);\r\n          console.log('Skipping remaining segments');\r\n          break;\r\n        }\r\n\r\n        const earliestArrival = allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null;\r\n        const latestArrival = allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null;\r\n\r\n        newProcessedSegments.push({\r\n          route: `${from}-${to}`,\r\n          flights: allFlights,\r\n          earliestArrival,\r\n          latestArrival\r\n        });\r\n      }\r\n\r\n      // After processing all segments\r\n      if (newProcessedSegments.length >= 2) {\r\n        console.log('\\n=== Flight Combinations ===');\r\n        \r\n        // Store valid combinations\r\n        const validCombinations = new Set();\r\n        \r\n        // For each flight in first segment\r\n        newProcessedSegments[0].flights.forEach(firstFlight => {\r\n          const firstArrival = dayjs(firstFlight.ArrivesAt);\r\n          \r\n          // Find all valid connections in second segment\r\n          const connections = newProcessedSegments[1].flights.filter(secondFlight => {\r\n            const secondDeparture = dayjs(secondFlight.DepartsAt);\r\n            return secondDeparture.isAfter(firstArrival) && \r\n                   secondDeparture.isBefore(firstArrival.add(24, 'hours'));\r\n          });\r\n          \r\n          // Format and log each valid connection\r\n          connections.forEach(secondFlight => {\r\n            const connectionTime = dayjs(secondFlight.DepartsAt).diff(firstArrival, 'minutes');\r\n            const hours = Math.floor(connectionTime / 60);\r\n            const minutes = connectionTime % 60;\r\n            const connectionTimeFormatted = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\r\n            \r\n            // Add both flights to valid combinations set\r\n            const firstFlightKey = `${firstFlight.flightNumber}_${dayjs(firstFlight.DepartsAt).format('YYYY-MM-DD')}`;\r\n            const secondFlightKey = `${secondFlight.flightNumber}_${dayjs(secondFlight.DepartsAt).format('YYYY-MM-DD')}`;\r\n            validCombinations.add(firstFlightKey);\r\n            validCombinations.add(secondFlightKey);\r\n            \r\n            console.log(\r\n              `${firstFlight.flightNumber} (${dayjs(firstFlight.DepartsAt).format('MM-DD')}), ` +\r\n              `${secondFlight.flightNumber} (${dayjs(secondFlight.DepartsAt).format('MM-DD')}) ` +\r\n              `(${connectionTimeFormatted})`\r\n            );\r\n          });\r\n        });\r\n        \r\n        console.log('======================');\r\n\r\n        // Filter out flights that aren't part of any valid combination\r\n        const filteredFlights = newProcessedSegments.flatMap((segment, segmentIndex) => \r\n          segment.flights.filter(flight => {\r\n            const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD')}`;\r\n            return validCombinations.has(flightKey);\r\n          }).map(flight => ({\r\n            ...flight,\r\n            isSelected: false,\r\n            segmentIndex\r\n          }))\r\n        );\r\n\r\n        setSegmentDetails(filteredFlights);\r\n      } else {\r\n        setSegmentDetails(newProcessedSegments.flatMap((segment, index) => \r\n          segment.flights.map(flight => ({\r\n            ...flight,\r\n            isSelected: false,\r\n            segmentIndex: index\r\n          }))\r\n        ));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching segment details:', error);\r\n    } finally {\r\n      setIsLoadingSegments(false);\r\n    }\r\n  };\r\n\r\n  const resetDetails = () => {\r\n    setSelectedDates(null);\r\n    setApiKey('');\r\n    setSegmentDetails([]);\r\n  };\r\n\r\n  const handleFlightSelect = (flight, segmentIndex) => {\r\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD')}`;\r\n    console.log('Selected flight:', flightKey, 'from segment:', segmentIndex);\r\n    \r\n    // Create new selected flights object\r\n    const newSelected = { ...selectedFlights };\r\n    \r\n    // Toggle selection using the unique flight key\r\n    if (newSelected[segmentIndex] && \r\n        `${newSelected[segmentIndex].flightNumber}_${dayjs(newSelected[segmentIndex].DepartsAt).format('YYYY-MM-DD')}` === flightKey) {\r\n      delete newSelected[segmentIndex];\r\n      console.log('Deselected flight');\r\n    } else {\r\n      newSelected[segmentIndex] = flight;\r\n      console.log('Selected flight');\r\n    }\r\n    \r\n    setSelectedFlights(newSelected);\r\n    \r\n    // Update all flights with new selection state\r\n    const updatedFlights = segmentDetails.map(f => ({\r\n      ...f,\r\n      isSelected: newSelected[f.segmentIndex]?.flightNumber === f.flightNumber && \r\n                  dayjs(newSelected[f.segmentIndex]?.DepartsAt).format('YYYY-MM-DD') === \r\n                  dayjs(f.DepartsAt).format('YYYY-MM-DD')\r\n    }));\r\n    \r\n    setSegmentDetails(updatedFlights);\r\n    \r\n    // Filter next segment if needed\r\n    if (Object.keys(newSelected).length > 0) {\r\n      const lastSegmentIndex = Math.max(...Object.keys(newSelected).map(Number));\r\n      const nextSegmentIndex = lastSegmentIndex + 1;\r\n      \r\n      if (nextSegmentIndex < processedSegments.length) {\r\n        const lastFlight = newSelected[lastSegmentIndex];\r\n        const lastArrival = dayjs(lastFlight.ArrivesAt);\r\n        \r\n        // Get valid next flights\r\n        const validNextFlights = processedSegments[nextSegmentIndex].flights\r\n          .filter(nextFlight => {\r\n            const departure = dayjs(nextFlight.DepartsAt);\r\n            return departure.isAfter(lastArrival) && \r\n                   departure.isBefore(lastArrival.add(24, 'hours'));\r\n          })\r\n          .map(f => ({\r\n            ...f,\r\n            isSelected: false,\r\n            segmentIndex: nextSegmentIndex\r\n          }));\r\n        \r\n        // Combine selected flights with valid next flights\r\n        const filteredFlights = [\r\n          ...Object.entries(newSelected).map(([idx, f]) => ({\r\n            ...f,\r\n            isSelected: true,\r\n            segmentIndex: Number(idx)\r\n          })),\r\n          ...validNextFlights\r\n        ];\r\n        \r\n        setSegmentDetails(filteredFlights);\r\n      }\r\n    } else {\r\n      // Reset to show all flights\r\n      const allFlights = processedSegments.flatMap((segment, idx) => \r\n        segment.flights.map(f => ({\r\n          ...f,\r\n          isSelected: false,\r\n          segmentIndex: idx\r\n        }))\r\n      );\r\n      setSegmentDetails(allFlights);\r\n    }\r\n  };\r\n\r\n  // Create columns with the handler\r\n  const columns = getColumns(handleFlightSelect);\r\n\r\n  return {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    resetDetails,\r\n    selectedFlights,\r\n    setSelectedFlights,\r\n    validCombinations,\r\n    setValidCombinations,\r\n    handleFlightSelect,\r\n    columns\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}