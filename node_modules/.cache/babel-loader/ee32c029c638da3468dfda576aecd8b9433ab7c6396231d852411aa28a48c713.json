{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport dayjs from 'dayjs';\nimport { processFlightData } from '../utils/flightDataProcessor';\nimport { calculateTimeWindow } from '../utils/timeCalculations';\nexport default function useFlightDetails() {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const handleDateSearch = async currentRoute => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    const processedSegments = [];\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    try {\n      // Process each segment in the route\n      for (let i = 0; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        const prevSegment = processedSegments[i - 1];\n\n        // Calculate time window based on previous segment\n        const timeWindow = calculateTimeWindow(prevSegment, from, to, baseDate);\n\n        // Fetch and process segment data\n        const response = await fetch('https://backend-284998006367.us-central1.run.app/api/flight-details', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${apiKey}`\n          },\n          body: JSON.stringify({\n            from,\n            to,\n            date: baseDate\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`Failed to fetch flight details for ${from}-${to}`);\n        }\n        const data = await response.json();\n        const processedData = processFlightData(data, from, to);\n        processedSegments.push({\n          from,\n          to,\n          flights: processedData\n        });\n      }\n\n      // Flatten all segments into a single array\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\n    } catch (error) {\n      console.error('Error fetching segment details:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const resetDetails = () => {\n    setSelectedDates(null);\n    setApiKey('');\n    setSegmentDetails([]);\n  };\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    resetDetails\n  };\n}\n_s(useFlightDetails, \"eNL6x3p2kS9/dPwFDvdCZanJHcQ=\");","map":{"version":3,"names":["useState","dayjs","processFlightData","calculateTimeWindow","useFlightDetails","_s","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","handleDateSearch","currentRoute","processedSegments","baseDate","format","i","length","from","to","prevSegment","timeWindow","response","fetch","method","headers","body","JSON","stringify","date","ok","Error","data","json","processedData","push","flights","flatMap","segment","error","console","resetDetails"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport { processFlightData } from '../utils/flightDataProcessor';\r\nimport { calculateTimeWindow } from '../utils/timeCalculations';\r\n\r\nexport default function useFlightDetails() {\r\n  const [selectedDates, setSelectedDates] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [segmentDetails, setSegmentDetails] = useState([]);\r\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\r\n\r\n  const handleDateSearch = async (currentRoute) => {\r\n    if (!selectedDates || !currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingSegments(true);\r\n    const processedSegments = [];\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    try {\r\n      // Process each segment in the route\r\n      for (let i = 0; i < currentRoute.length - 1; i++) {\r\n        const from = currentRoute[i];\r\n        const to = currentRoute[i + 1];\r\n        const prevSegment = processedSegments[i - 1];\r\n        \r\n        // Calculate time window based on previous segment\r\n        const timeWindow = calculateTimeWindow(prevSegment, from, to, baseDate);\r\n        \r\n        // Fetch and process segment data\r\n        const response = await fetch('https://backend-284998006367.us-central1.run.app/api/flight-details', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${apiKey}`\r\n          },\r\n          body: JSON.stringify({\r\n            from,\r\n            to,\r\n            date: baseDate\r\n          })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch flight details for ${from}-${to}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        const processedData = processFlightData(data, from, to);\r\n        processedSegments.push({\r\n          from,\r\n          to,\r\n          flights: processedData\r\n        });\r\n      }\r\n\r\n      // Flatten all segments into a single array\r\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\r\n    } catch (error) {\r\n      console.error('Error fetching segment details:', error);\r\n    } finally {\r\n      setIsLoadingSegments(false);\r\n    }\r\n  };\r\n\r\n  const resetDetails = () => {\r\n    setSelectedDates(null);\r\n    setApiKey('');\r\n    setSegmentDetails([]);\r\n  };\r\n\r\n  return {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    resetDetails\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}