{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nexport default function useFlightDetails() {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow) => {\n    var _data$results, _data$results$, _data$results$$data;\n    const flights = {};\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    const rawFlights = ((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : _data$results$$data.data) || [];\n    console.log(`  Processing ${rawFlights.length} raw flights`);\n    rawFlights.filter(trip => {\n      // Filter out non-direct flights\n      if (trip.Stops !== 0) {\n        console.log(`  Skipping flight with ${trip.Stops} stops`);\n        return false;\n      }\n\n      // Filter out EK and FZ carriers\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log(`  Skipping ${trip.Carriers} flight: ${trip.FlightNumbers}`);\n        return false;\n      }\n      if (timeWindow) {\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n        const isValid = departureTime.isAfter(timeWindow.earliestDeparture) && departureTime.isBefore(timeWindow.latestDeparture);\n        if (!isValid) {\n          console.log(`  Skipping flight outside time window: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n        }\n        return isValid;\n      }\n      return true;\n    }).forEach(trip => {\n      const flightNumber = trip.FlightNumbers;\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const existingFlight = flights[flightNumber];\n\n      // If this is a duplicate flight, only keep the later one\n      if (existingFlight) {\n        const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\n        if (departureTime.isBefore(existingDeparture)) {\n          return; // Skip this one, keep the existing later flight\n        }\n      }\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n      // Process aircraft name\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName && aircraftName.includes('787')) {\n        aircraftName = 'Boeing 787-10';\n      }\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(trip.Carriers),\n        aircraft: aircraftName,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const handleDateSearch = async currentRoute => {\n    if (!selectedDates || !currentRoute || !apiKey) return;\n    setIsLoadingSegments(true);\n    const processedSegments = [];\n    const baseDate = selectedDates.format('YYYY-MM-DD');\n    try {\n      // Process all segments first\n      for (let i = 0; i < currentRoute.length - 1; i++) {\n        const from = currentRoute[i];\n        const to = currentRoute[i + 1];\n        const prevSegment = processedSegments[i - 1];\n        let timeWindow = null;\n        if (prevSegment) {\n          if (prevSegment.flights.length === 0) {\n            const prevFrom = currentRoute[i - 1];\n            const prevTo = currentRoute[i];\n            const prevDistance = getSegmentDistance(prevFrom, prevTo);\n            const minConnectionHours = Math.ceil(prevDistance / 575);\n            const baseTime = prevSegment.earliestArrival || dayjs(baseDate);\n            const endTime = prevSegment.latestArrival || baseTime;\n            timeWindow = {\n              earliestDeparture: baseTime.add(minConnectionHours, 'hour'),\n              latestDeparture: endTime.add(24, 'hour').add(minConnectionHours, 'hour')\n            };\n          } else {\n            timeWindow = {\n              earliestDeparture: prevSegment.earliestArrival,\n              latestDeparture: prevSegment.latestArrival.add(24, 'hour')\n            };\n          }\n        }\n        const route = routeDetails.find(r => r.origin === from && r.destination === to && r.date === selectedDates.format('YYYY-MM-DD'));\n        if (!route) {\n          console.log(`\\nNo route found for ${from}-${to} on ${selectedDates.format('YYYY-MM-DD')}`);\n          console.log('Available dates for this route:');\n          const availableRoutes = routeDetails.filter(r => r.origin === from && r.destination === to);\n          availableRoutes.forEach(r => console.log(`  ${r.date}: ID ${r.ID}`));\n          processedSegments.push({\n            flights: [],\n            earliestArrival: null,\n            latestArrival: null\n          });\n          continue;\n        }\n        console.log(`\\nProcessing route ${from}-${to}:`);\n        console.log(`Date: ${selectedDates.format('YYYY-MM-DD')}`);\n        console.log(`Segment ID: ${route.ID}`);\n        try {\n          const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n            method: 'GET',\n            headers: {\n              'accept': 'application/json',\n              'Partner-Authorization': apiKey,\n              'Segment-ID': route.ID\n            }\n          });\n          if (!response.ok) {\n            throw new Error(`Failed to fetch flight details for ${from}-${to}`);\n          }\n          const data = await response.json();\n          const flights = processFlightData(data, timeWindow);\n\n          // Add summary log\n          console.log('\\nSegment Summary:');\n          console.log('================');\n          console.log(`From: ${from}`);\n          console.log(`To: ${to}`);\n          console.log(`Segment ID: ${route.ID}`);\n          console.log(`Total Flights: ${flights.length}`);\n          console.log('\\nFlights:');\n          flights.forEach(flight => {\n            console.log(`  ${flight.flightNumber}: Departs ${flight.departs}, Arrives ${flight.arrives}`);\n          });\n          console.log('================\\n');\n          let earliestArrival = null;\n          let latestArrival = null;\n          if (flights.length > 0) {\n            earliestArrival = dayjs(flights[0].ArrivesAt);\n            latestArrival = dayjs(flights[flights.length - 1].ArrivesAt);\n          }\n          processedSegments.push({\n            route: `${from}-${to}`,\n            flights,\n            earliestArrival,\n            latestArrival\n          });\n        } catch (error) {\n          console.error(`Error processing segment ${from}-${to}:`, error);\n          processedSegments.push({\n            flights: [],\n            earliestArrival: null,\n            latestArrival: null\n          });\n        }\n      }\n\n      // Temporarily disabled connection validation\n      // if (processedSegments.length >= 2 && processedSegments[1].flights.length > 0) {\n      //   ... disabled code ...\n      // }\n\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\n    } catch (error) {\n      console.error('Error fetching segment details:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const resetDetails = () => {\n    setSelectedDates(null);\n    setApiKey('');\n    setSegmentDetails([]);\n  };\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    resetDetails\n  };\n}\n_s(useFlightDetails, \"eNL6x3p2kS9/dPwFDvdCZanJHcQ=\");","map":{"version":3,"names":["useState","dayjs","routeDetails","airlines","useFlightDetails","_s","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","_data$results","_data$results$","_data$results$$data","flights","rawFlights","results","length","filter","trip","Stops","Carriers","FlightNumbers","departureTime","DepartsAt","isValid","isAfter","earliestDeparture","isBefore","latestDeparture","forEach","flightNumber","existingFlight","existingDeparture","arrivalTime","ArrivesAt","baseDayjs","departDayDiff","diff","arrivalDayDiff","aircraftName","Aircraft","includes","OriginAirport","DestinationAirport","aircraft","departs","arrives","economy","business","first","Cabin","toLowerCase","Object","values","handleDateSearch","currentRoute","processedSegments","i","prevSegment","prevFrom","prevTo","prevDistance","minConnectionHours","Math","ceil","baseTime","earliestArrival","endTime","latestArrival","add","availableRoutes","ID","push","response","fetch","method","headers","ok","Error","json","flight","error","flatMap","segment","resetDetails"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport routeDetails from '../../../data/route_details.json';\r\nimport airlines from '../../../data/airlines';\r\n\r\nexport default function useFlightDetails() {\r\n  const [selectedDates, setSelectedDates] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [segmentDetails, setSegmentDetails] = useState([]);\r\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\r\n\r\n  const formatTime = (dateStr, baseDate) => {\r\n    const date = dayjs(dateStr);\r\n    const base = dayjs(baseDate);\r\n    \r\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\r\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\r\n    \r\n    const timeStr = date.format('HH:mm');\r\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\r\n  };\r\n\r\n  const getAirlineName = (code) => {\r\n    const airline = airlines.find(a => a.value === code);\r\n    return airline ? airline.label.replace(` (${code})`, '') : code;\r\n  };\r\n\r\n  const getSegmentDistance = (from, to) => {\r\n    const route = routeDetails.find(r => \r\n      r.origin === from && \r\n      r.destination === to\r\n    );\r\n\r\n    if (!route) {\r\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\r\n      return 1000;\r\n    }\r\n\r\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\r\n    return route.distance;\r\n  };\r\n\r\n  const processFlightData = (data, timeWindow) => {\r\n    const flights = {};\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    const rawFlights = data.results?.[0]?.data?.data || [];\r\n    console.log(`  Processing ${rawFlights.length} raw flights`);\r\n    \r\n    rawFlights\r\n      .filter(trip => {\r\n        // Filter out non-direct flights\r\n        if (trip.Stops !== 0) {\r\n          console.log(`  Skipping flight with ${trip.Stops} stops`);\r\n          return false;\r\n        }\r\n        \r\n        // Filter out EK and FZ carriers\r\n        if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\r\n          console.log(`  Skipping ${trip.Carriers} flight: ${trip.FlightNumbers}`);\r\n          return false;\r\n        }\r\n        \r\n        if (timeWindow) {\r\n          const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\r\n          const isValid = departureTime.isAfter(timeWindow.earliestDeparture) && \r\n                         departureTime.isBefore(timeWindow.latestDeparture);\r\n          \r\n          if (!isValid) {\r\n            console.log(`  Skipping flight outside time window: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\r\n          }\r\n          return isValid;\r\n        }\r\n        \r\n        return true;\r\n      })\r\n      .forEach(trip => {\r\n        const flightNumber = trip.FlightNumbers;\r\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\r\n        const existingFlight = flights[flightNumber];\r\n\r\n        // If this is a duplicate flight, only keep the later one\r\n        if (existingFlight) {\r\n          const existingDeparture = dayjs(existingFlight.DepartsAt.replace('Z', '')); // Remove Z to treat as local time\r\n          if (departureTime.isBefore(existingDeparture)) {\r\n            return; // Skip this one, keep the existing later flight\r\n          }\r\n        }\r\n\r\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); // Remove Z to treat as local time\r\n        const baseDayjs = dayjs(baseDate);\r\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\r\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\r\n\r\n        // Process aircraft name\r\n        let aircraftName = trip.Aircraft[0];\r\n        if (aircraftName && aircraftName.includes('787')) {\r\n          aircraftName = 'Boeing 787-10';\r\n        }\r\n\r\n        flights[flightNumber] = {\r\n          from: trip.OriginAirport,\r\n          to: trip.DestinationAirport,\r\n          flightNumber: flightNumber,\r\n          airlines: getAirlineName(trip.Carriers),\r\n          aircraft: aircraftName,\r\n          departs: departDayDiff > 0 ? \r\n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \r\n            departureTime.format('HH:mm'),\r\n          arrives: arrivalDayDiff > 0 ? \r\n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \r\n            arrivalTime.format('HH:mm'),\r\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          economy: false,\r\n          business: false,\r\n          first: false\r\n        };\r\n        \r\n        switch(trip.Cabin.toLowerCase()) {\r\n          case 'economy':\r\n            flights[flightNumber].economy = true;\r\n            break;\r\n          case 'business':\r\n            flights[flightNumber].business = true;\r\n            break;\r\n          case 'first':\r\n            flights[flightNumber].first = true;\r\n            break;\r\n        }\r\n      });\r\n    \r\n    return Object.values(flights);\r\n  };\r\n\r\n  const handleDateSearch = async (currentRoute) => {\r\n    if (!selectedDates || !currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingSegments(true);\r\n    const processedSegments = [];\r\n    const baseDate = selectedDates.format('YYYY-MM-DD');\r\n    \r\n    try {\r\n      // Process all segments first\r\n      for (let i = 0; i < currentRoute.length - 1; i++) {\r\n        const from = currentRoute[i];\r\n        const to = currentRoute[i + 1];\r\n        const prevSegment = processedSegments[i - 1];\r\n        \r\n        let timeWindow = null;\r\n        if (prevSegment) {\r\n          if (prevSegment.flights.length === 0) {\r\n            const prevFrom = currentRoute[i - 1];\r\n            const prevTo = currentRoute[i];\r\n            const prevDistance = getSegmentDistance(prevFrom, prevTo);\r\n            const minConnectionHours = Math.ceil(prevDistance / 575);\r\n            \r\n            const baseTime = prevSegment.earliestArrival || dayjs(baseDate);\r\n            const endTime = prevSegment.latestArrival || baseTime;\r\n            \r\n            timeWindow = {\r\n              earliestDeparture: baseTime.add(minConnectionHours, 'hour'),\r\n              latestDeparture: endTime.add(24, 'hour').add(minConnectionHours, 'hour')\r\n            };\r\n          } else {\r\n            timeWindow = {\r\n              earliestDeparture: prevSegment.earliestArrival,\r\n              latestDeparture: prevSegment.latestArrival.add(24, 'hour')\r\n            };\r\n          }\r\n        }\r\n\r\n        const route = routeDetails.find(r => \r\n          r.origin === from && \r\n          r.destination === to &&\r\n          r.date === selectedDates.format('YYYY-MM-DD')\r\n        );\r\n\r\n        if (!route) {\r\n          console.log(`\\nNo route found for ${from}-${to} on ${selectedDates.format('YYYY-MM-DD')}`);\r\n          console.log('Available dates for this route:');\r\n          const availableRoutes = routeDetails.filter(r => \r\n            r.origin === from && \r\n            r.destination === to\r\n          );\r\n          availableRoutes.forEach(r => console.log(`  ${r.date}: ID ${r.ID}`));\r\n          processedSegments.push({ flights: [], earliestArrival: null, latestArrival: null });\r\n          continue;\r\n        }\r\n\r\n        console.log(`\\nProcessing route ${from}-${to}:`);\r\n        console.log(`Date: ${selectedDates.format('YYYY-MM-DD')}`);\r\n        console.log(`Segment ID: ${route.ID}`);\r\n        \r\n        try {\r\n          const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'accept': 'application/json',\r\n              'Partner-Authorization': apiKey,\r\n              'Segment-ID': route.ID\r\n            }\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to fetch flight details for ${from}-${to}`);\r\n          }\r\n\r\n          const data = await response.json();\r\n          const flights = processFlightData(data, timeWindow);\r\n\r\n          // Add summary log\r\n          console.log('\\nSegment Summary:');\r\n          console.log('================');\r\n          console.log(`From: ${from}`);\r\n          console.log(`To: ${to}`);\r\n          console.log(`Segment ID: ${route.ID}`);\r\n          console.log(`Total Flights: ${flights.length}`);\r\n          console.log('\\nFlights:');\r\n          flights.forEach(flight => {\r\n            console.log(`  ${flight.flightNumber}: Departs ${flight.departs}, Arrives ${flight.arrives}`);\r\n          });\r\n          console.log('================\\n');\r\n\r\n          let earliestArrival = null;\r\n          let latestArrival = null;\r\n\r\n          if (flights.length > 0) {\r\n            earliestArrival = dayjs(flights[0].ArrivesAt);\r\n            latestArrival = dayjs(flights[flights.length - 1].ArrivesAt);\r\n          }\r\n\r\n          processedSegments.push({\r\n            route: `${from}-${to}`,\r\n            flights,\r\n            earliestArrival,\r\n            latestArrival\r\n          });\r\n\r\n        } catch (error) {\r\n          console.error(`Error processing segment ${from}-${to}:`, error);\r\n          processedSegments.push({ flights: [], earliestArrival: null, latestArrival: null });\r\n        }\r\n      }\r\n\r\n      // Temporarily disabled connection validation\r\n      // if (processedSegments.length >= 2 && processedSegments[1].flights.length > 0) {\r\n      //   ... disabled code ...\r\n      // }\r\n\r\n      setSegmentDetails(processedSegments.flatMap(segment => segment.flights));\r\n    } catch (error) {\r\n      console.error('Error fetching segment details:', error);\r\n    } finally {\r\n      setIsLoadingSegments(false);\r\n    }\r\n  };\r\n\r\n  const resetDetails = () => {\r\n    setSelectedDates(null);\r\n    setApiKey('');\r\n    setSegmentDetails([]);\r\n  };\r\n\r\n  return {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    resetDetails\r\n  };\r\n} "],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,kCAAkC;AAC3D,OAAOC,QAAQ,MAAM,wBAAwB;AAE7C,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACzC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACY,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEjE,MAAMc,UAAU,GAAGA,CAACC,OAAO,EAAEC,QAAQ,KAAK;IACxC,MAAMC,IAAI,GAAGhB,KAAK,CAACc,OAAO,CAAC;IAC3B,MAAMG,IAAI,GAAGjB,KAAK,CAACe,QAAQ,CAAC;;IAE5B;IACA,MAAMG,OAAO,GAAGF,IAAI,CAACG,IAAI,CAAC,CAAC,GAAG,EAAE,IAAIH,IAAI,CAACI,MAAM,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC;IAE1E,MAAMC,OAAO,GAAGL,IAAI,CAACI,MAAM,CAAC,OAAO,CAAC;IACpC,OAAOF,OAAO,GAAG,CAAC,GAAG,GAAGG,OAAO,MAAMH,OAAO,GAAG,GAAGG,OAAO;EAC3D,CAAC;EAED,MAAMC,cAAc,GAAIC,IAAI,IAAK;IAC/B,MAAMC,OAAO,GAAGtB,QAAQ,CAACuB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKJ,IAAI,CAAC;IACpD,OAAOC,OAAO,GAAGA,OAAO,CAACI,KAAK,CAACC,OAAO,CAAC,KAAKN,IAAI,GAAG,EAAE,EAAE,CAAC,GAAGA,IAAI;EACjE,CAAC;EAED,MAAMO,kBAAkB,GAAGA,CAACC,IAAI,EAAEC,EAAE,KAAK;IACvC,MAAMC,KAAK,GAAGhC,YAAY,CAACwB,IAAI,CAACS,CAAC,IAC/BA,CAAC,CAACC,MAAM,KAAKJ,IAAI,IACjBG,CAAC,CAACE,WAAW,KAAKJ,EACpB,CAAC;IAED,IAAI,CAACC,KAAK,EAAE;MACVI,OAAO,CAACC,GAAG,CAAC,+BAA+BP,IAAI,IAAIC,EAAE,0BAA0B,CAAC;MAChF,OAAO,IAAI;IACb;IAEAK,OAAO,CAACC,GAAG,CAAC,gBAAgBP,IAAI,IAAIC,EAAE,KAAKC,KAAK,CAACM,QAAQ,CAACC,cAAc,CAAC,CAAC,QAAQ,CAAC;IACnF,OAAOP,KAAK,CAACM,QAAQ;EACvB,CAAC;EAED,MAAME,iBAAiB,GAAGA,CAACC,IAAI,EAAEC,UAAU,KAAK;IAAA,IAAAC,aAAA,EAAAC,cAAA,EAAAC,mBAAA;IAC9C,MAAMC,OAAO,GAAG,CAAC,CAAC;IAClB,MAAMhC,QAAQ,GAAGV,aAAa,CAACe,MAAM,CAAC,YAAY,CAAC;IAEnD,MAAM4B,UAAU,GAAG,EAAAJ,aAAA,GAAAF,IAAI,CAACO,OAAO,cAAAL,aAAA,wBAAAC,cAAA,GAAZD,aAAA,CAAe,CAAC,CAAC,cAAAC,cAAA,wBAAAC,mBAAA,GAAjBD,cAAA,CAAmBH,IAAI,cAAAI,mBAAA,uBAAvBA,mBAAA,CAAyBJ,IAAI,KAAI,EAAE;IACtDL,OAAO,CAACC,GAAG,CAAC,gBAAgBU,UAAU,CAACE,MAAM,cAAc,CAAC;IAE5DF,UAAU,CACPG,MAAM,CAACC,IAAI,IAAI;MACd;MACA,IAAIA,IAAI,CAACC,KAAK,KAAK,CAAC,EAAE;QACpBhB,OAAO,CAACC,GAAG,CAAC,0BAA0Bc,IAAI,CAACC,KAAK,QAAQ,CAAC;QACzD,OAAO,KAAK;MACd;;MAEA;MACA,IAAID,IAAI,CAACE,QAAQ,KAAK,IAAI,IAAIF,IAAI,CAACE,QAAQ,KAAK,IAAI,EAAE;QACpDjB,OAAO,CAACC,GAAG,CAAC,cAAcc,IAAI,CAACE,QAAQ,YAAYF,IAAI,CAACG,aAAa,EAAE,CAAC;QACxE,OAAO,KAAK;MACd;MAEA,IAAIZ,UAAU,EAAE;QACd,MAAMa,aAAa,GAAGxD,KAAK,CAACoD,IAAI,CAACK,SAAS,CAAC5B,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC5D,MAAM6B,OAAO,GAAGF,aAAa,CAACG,OAAO,CAAChB,UAAU,CAACiB,iBAAiB,CAAC,IACpDJ,aAAa,CAACK,QAAQ,CAAClB,UAAU,CAACmB,eAAe,CAAC;QAEjE,IAAI,CAACJ,OAAO,EAAE;UACZrB,OAAO,CAACC,GAAG,CAAC,0CAA0CkB,aAAa,CAACpC,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC;QACnG;QACA,OAAOsC,OAAO;MAChB;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,CACDK,OAAO,CAACX,IAAI,IAAI;MACf,MAAMY,YAAY,GAAGZ,IAAI,CAACG,aAAa;MACvC,MAAMC,aAAa,GAAGxD,KAAK,CAACoD,IAAI,CAACK,SAAS,CAAC5B,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;MAC5D,MAAMoC,cAAc,GAAGlB,OAAO,CAACiB,YAAY,CAAC;;MAE5C;MACA,IAAIC,cAAc,EAAE;QAClB,MAAMC,iBAAiB,GAAGlE,KAAK,CAACiE,cAAc,CAACR,SAAS,CAAC5B,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5E,IAAI2B,aAAa,CAACK,QAAQ,CAACK,iBAAiB,CAAC,EAAE;UAC7C,OAAO,CAAC;QACV;MACF;MAEA,MAAMC,WAAW,GAAGnE,KAAK,CAACoD,IAAI,CAACgB,SAAS,CAACvC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MAC5D,MAAMwC,SAAS,GAAGrE,KAAK,CAACe,QAAQ,CAAC;MACjC,MAAMuD,aAAa,GAAGd,aAAa,CAACe,IAAI,CAACF,SAAS,EAAE,KAAK,CAAC;MAC1D,MAAMG,cAAc,GAAGL,WAAW,CAACI,IAAI,CAACF,SAAS,EAAE,KAAK,CAAC;;MAEzD;MACA,IAAII,YAAY,GAAGrB,IAAI,CAACsB,QAAQ,CAAC,CAAC,CAAC;MACnC,IAAID,YAAY,IAAIA,YAAY,CAACE,QAAQ,CAAC,KAAK,CAAC,EAAE;QAChDF,YAAY,GAAG,eAAe;MAChC;MAEA1B,OAAO,CAACiB,YAAY,CAAC,GAAG;QACtBjC,IAAI,EAAEqB,IAAI,CAACwB,aAAa;QACxB5C,EAAE,EAAEoB,IAAI,CAACyB,kBAAkB;QAC3Bb,YAAY,EAAEA,YAAY;QAC1B9D,QAAQ,EAAEoB,cAAc,CAAC8B,IAAI,CAACE,QAAQ,CAAC;QACvCwB,QAAQ,EAAEL,YAAY;QACtBM,OAAO,EAAET,aAAa,GAAG,CAAC,GACxB,GAAGd,aAAa,CAACpC,MAAM,CAAC,OAAO,CAAC,MAAMkD,aAAa,GAAG,GACtDd,aAAa,CAACpC,MAAM,CAAC,OAAO,CAAC;QAC/B4D,OAAO,EAAER,cAAc,GAAG,CAAC,GACzB,GAAGL,WAAW,CAAC/C,MAAM,CAAC,OAAO,CAAC,MAAMoD,cAAc,GAAG,GACrDL,WAAW,CAAC/C,MAAM,CAAC,OAAO,CAAC;QAC7BqC,SAAS,EAAED,aAAa,CAACpC,MAAM,CAAC,qBAAqB,CAAC;QACtDgD,SAAS,EAAED,WAAW,CAAC/C,MAAM,CAAC,qBAAqB,CAAC;QACpD6D,OAAO,EAAE,KAAK;QACdC,QAAQ,EAAE,KAAK;QACfC,KAAK,EAAE;MACT,CAAC;MAED,QAAO/B,IAAI,CAACgC,KAAK,CAACC,WAAW,CAAC,CAAC;QAC7B,KAAK,SAAS;UACZtC,OAAO,CAACiB,YAAY,CAAC,CAACiB,OAAO,GAAG,IAAI;UACpC;QACF,KAAK,UAAU;UACblC,OAAO,CAACiB,YAAY,CAAC,CAACkB,QAAQ,GAAG,IAAI;UACrC;QACF,KAAK,OAAO;UACVnC,OAAO,CAACiB,YAAY,CAAC,CAACmB,KAAK,GAAG,IAAI;UAClC;MACJ;IACF,CAAC,CAAC;IAEJ,OAAOG,MAAM,CAACC,MAAM,CAACxC,OAAO,CAAC;EAC/B,CAAC;EAED,MAAMyC,gBAAgB,GAAG,MAAOC,YAAY,IAAK;IAC/C,IAAI,CAACpF,aAAa,IAAI,CAACoF,YAAY,IAAI,CAAClF,MAAM,EAAE;IAEhDK,oBAAoB,CAAC,IAAI,CAAC;IAC1B,MAAM8E,iBAAiB,GAAG,EAAE;IAC5B,MAAM3E,QAAQ,GAAGV,aAAa,CAACe,MAAM,CAAC,YAAY,CAAC;IAEnD,IAAI;MACF;MACA,KAAK,IAAIuE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,YAAY,CAACvC,MAAM,GAAG,CAAC,EAAEyC,CAAC,EAAE,EAAE;QAChD,MAAM5D,IAAI,GAAG0D,YAAY,CAACE,CAAC,CAAC;QAC5B,MAAM3D,EAAE,GAAGyD,YAAY,CAACE,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAMC,WAAW,GAAGF,iBAAiB,CAACC,CAAC,GAAG,CAAC,CAAC;QAE5C,IAAIhD,UAAU,GAAG,IAAI;QACrB,IAAIiD,WAAW,EAAE;UACf,IAAIA,WAAW,CAAC7C,OAAO,CAACG,MAAM,KAAK,CAAC,EAAE;YACpC,MAAM2C,QAAQ,GAAGJ,YAAY,CAACE,CAAC,GAAG,CAAC,CAAC;YACpC,MAAMG,MAAM,GAAGL,YAAY,CAACE,CAAC,CAAC;YAC9B,MAAMI,YAAY,GAAGjE,kBAAkB,CAAC+D,QAAQ,EAAEC,MAAM,CAAC;YACzD,MAAME,kBAAkB,GAAGC,IAAI,CAACC,IAAI,CAACH,YAAY,GAAG,GAAG,CAAC;YAExD,MAAMI,QAAQ,GAAGP,WAAW,CAACQ,eAAe,IAAIpG,KAAK,CAACe,QAAQ,CAAC;YAC/D,MAAMsF,OAAO,GAAGT,WAAW,CAACU,aAAa,IAAIH,QAAQ;YAErDxD,UAAU,GAAG;cACXiB,iBAAiB,EAAEuC,QAAQ,CAACI,GAAG,CAACP,kBAAkB,EAAE,MAAM,CAAC;cAC3DlC,eAAe,EAAEuC,OAAO,CAACE,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAACA,GAAG,CAACP,kBAAkB,EAAE,MAAM;YACzE,CAAC;UACH,CAAC,MAAM;YACLrD,UAAU,GAAG;cACXiB,iBAAiB,EAAEgC,WAAW,CAACQ,eAAe;cAC9CtC,eAAe,EAAE8B,WAAW,CAACU,aAAa,CAACC,GAAG,CAAC,EAAE,EAAE,MAAM;YAC3D,CAAC;UACH;QACF;QAEA,MAAMtE,KAAK,GAAGhC,YAAY,CAACwB,IAAI,CAACS,CAAC,IAC/BA,CAAC,CAACC,MAAM,KAAKJ,IAAI,IACjBG,CAAC,CAACE,WAAW,KAAKJ,EAAE,IACpBE,CAAC,CAAClB,IAAI,KAAKX,aAAa,CAACe,MAAM,CAAC,YAAY,CAC9C,CAAC;QAED,IAAI,CAACa,KAAK,EAAE;UACVI,OAAO,CAACC,GAAG,CAAC,wBAAwBP,IAAI,IAAIC,EAAE,OAAO3B,aAAa,CAACe,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC;UAC1FiB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;UAC9C,MAAMkE,eAAe,GAAGvG,YAAY,CAACkD,MAAM,CAACjB,CAAC,IAC3CA,CAAC,CAACC,MAAM,KAAKJ,IAAI,IACjBG,CAAC,CAACE,WAAW,KAAKJ,EACpB,CAAC;UACDwE,eAAe,CAACzC,OAAO,CAAC7B,CAAC,IAAIG,OAAO,CAACC,GAAG,CAAC,KAAKJ,CAAC,CAAClB,IAAI,QAAQkB,CAAC,CAACuE,EAAE,EAAE,CAAC,CAAC;UACpEf,iBAAiB,CAACgB,IAAI,CAAC;YAAE3D,OAAO,EAAE,EAAE;YAAEqD,eAAe,EAAE,IAAI;YAAEE,aAAa,EAAE;UAAK,CAAC,CAAC;UACnF;QACF;QAEAjE,OAAO,CAACC,GAAG,CAAC,sBAAsBP,IAAI,IAAIC,EAAE,GAAG,CAAC;QAChDK,OAAO,CAACC,GAAG,CAAC,SAASjC,aAAa,CAACe,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC;QAC1DiB,OAAO,CAACC,GAAG,CAAC,eAAeL,KAAK,CAACwE,EAAE,EAAE,CAAC;QAEtC,IAAI;UACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8DAA8D3E,KAAK,CAACwE,EAAE,EAAE,EAAE;YACrGI,MAAM,EAAE,KAAK;YACbC,OAAO,EAAE;cACP,QAAQ,EAAE,kBAAkB;cAC5B,uBAAuB,EAAEvG,MAAM;cAC/B,YAAY,EAAE0B,KAAK,CAACwE;YACtB;UACF,CAAC,CAAC;UAEF,IAAI,CAACE,QAAQ,CAACI,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAC,sCAAsCjF,IAAI,IAAIC,EAAE,EAAE,CAAC;UACrE;UAEA,MAAMU,IAAI,GAAG,MAAMiE,QAAQ,CAACM,IAAI,CAAC,CAAC;UAClC,MAAMlE,OAAO,GAAGN,iBAAiB,CAACC,IAAI,EAAEC,UAAU,CAAC;;UAEnD;UACAN,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;UACjCD,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;UAC/BD,OAAO,CAACC,GAAG,CAAC,SAASP,IAAI,EAAE,CAAC;UAC5BM,OAAO,CAACC,GAAG,CAAC,OAAON,EAAE,EAAE,CAAC;UACxBK,OAAO,CAACC,GAAG,CAAC,eAAeL,KAAK,CAACwE,EAAE,EAAE,CAAC;UACtCpE,OAAO,CAACC,GAAG,CAAC,kBAAkBS,OAAO,CAACG,MAAM,EAAE,CAAC;UAC/Cb,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;UACzBS,OAAO,CAACgB,OAAO,CAACmD,MAAM,IAAI;YACxB7E,OAAO,CAACC,GAAG,CAAC,KAAK4E,MAAM,CAAClD,YAAY,aAAakD,MAAM,CAACnC,OAAO,aAAamC,MAAM,CAAClC,OAAO,EAAE,CAAC;UAC/F,CAAC,CAAC;UACF3C,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;UAEjC,IAAI8D,eAAe,GAAG,IAAI;UAC1B,IAAIE,aAAa,GAAG,IAAI;UAExB,IAAIvD,OAAO,CAACG,MAAM,GAAG,CAAC,EAAE;YACtBkD,eAAe,GAAGpG,KAAK,CAAC+C,OAAO,CAAC,CAAC,CAAC,CAACqB,SAAS,CAAC;YAC7CkC,aAAa,GAAGtG,KAAK,CAAC+C,OAAO,CAACA,OAAO,CAACG,MAAM,GAAG,CAAC,CAAC,CAACkB,SAAS,CAAC;UAC9D;UAEAsB,iBAAiB,CAACgB,IAAI,CAAC;YACrBzE,KAAK,EAAE,GAAGF,IAAI,IAAIC,EAAE,EAAE;YACtBe,OAAO;YACPqD,eAAe;YACfE;UACF,CAAC,CAAC;QAEJ,CAAC,CAAC,OAAOa,KAAK,EAAE;UACd9E,OAAO,CAAC8E,KAAK,CAAC,4BAA4BpF,IAAI,IAAIC,EAAE,GAAG,EAAEmF,KAAK,CAAC;UAC/DzB,iBAAiB,CAACgB,IAAI,CAAC;YAAE3D,OAAO,EAAE,EAAE;YAAEqD,eAAe,EAAE,IAAI;YAAEE,aAAa,EAAE;UAAK,CAAC,CAAC;QACrF;MACF;;MAEA;MACA;MACA;MACA;;MAEA5F,iBAAiB,CAACgF,iBAAiB,CAAC0B,OAAO,CAACC,OAAO,IAAIA,OAAO,CAACtE,OAAO,CAAC,CAAC;IAC1E,CAAC,CAAC,OAAOoE,KAAK,EAAE;MACd9E,OAAO,CAAC8E,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD,CAAC,SAAS;MACRvG,oBAAoB,CAAC,KAAK,CAAC;IAC7B;EACF,CAAC;EAED,MAAM0G,YAAY,GAAGA,CAAA,KAAM;IACzBhH,gBAAgB,CAAC,IAAI,CAAC;IACtBE,SAAS,CAAC,EAAE,CAAC;IACbE,iBAAiB,CAAC,EAAE,CAAC;EACvB,CAAC;EAED,OAAO;IACLL,aAAa;IACbC,gBAAgB;IAChBC,MAAM;IACNC,SAAS;IACTC,cAAc;IACdE,iBAAiB;IACjB6E,gBAAgB;IAChB8B;EACF,CAAC;AACH;AAAClH,EAAA,CA7QuBD,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}