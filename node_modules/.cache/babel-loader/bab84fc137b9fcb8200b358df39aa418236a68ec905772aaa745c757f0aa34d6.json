{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nguyen77\\\\docker-neo4j\\\\route-builder-ac1\\\\src\\\\components\\\\FlightSearch\\\\FlightAvailabilityCalendar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, Card, Typography, Badge } from 'antd';\nimport dayjs from 'dayjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title\n} = Typography;\nconst FlightAvailabilityCalendar = ({\n  flightData,\n  currentRoute,\n  onDateRangeSelect,\n  selectedRange,\n  onSearch\n}) => {\n  _s();\n  const [currentMonth, setCurrentMonth] = useState(dayjs().month());\n  const [currentYear, setCurrentYear] = useState(dayjs().year());\n  const [selectionStart, setSelectionStart] = useState(null);\n  const [selectionEnd, setSelectionEnd] = useState(null);\n  const [error, setError] = useState('');\n  const [showCalendar, setShowCalendar] = useState(false);\n\n  // Get days in month\n  const getDaysInMonth = (year, month) => {\n    return dayjs(`${year}-${month + 1}`).daysInMonth();\n  };\n\n  // Get first day of month (0 = Sunday, 1 = Monday, etc.)\n  const getFirstDayOfMonth = (year, month) => {\n    return dayjs(`${year}-${month + 1}-01`).day();\n  };\n\n  // Helper to format date as \"YYYY-MM-DD\"\n  const formatDate = (year, month, day) => {\n    return dayjs(`${year}-${month + 1}-${day}`).format('YYYY-MM-DD');\n  };\n  const daysInMonth = getDaysInMonth(currentYear, currentMonth);\n  const firstDayOfMonth = getFirstDayOfMonth(currentYear, currentMonth);\n\n  // Previous and next month handlers\n  const goToPrevMonth = () => {\n    if (currentMonth === 0) {\n      setCurrentMonth(11);\n      setCurrentYear(currentYear - 1);\n    } else {\n      setCurrentMonth(currentMonth - 1);\n    }\n  };\n  const goToNextMonth = () => {\n    if (currentMonth === 11) {\n      setCurrentMonth(0);\n      setCurrentYear(currentYear + 1);\n    } else {\n      setCurrentMonth(currentMonth + 1);\n    }\n  };\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  // Function to render availability badges\n  const renderAvailabilityBadges = (route, classes) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: '2px'\n      },\n      children: Object.entries(classes).map(([classCode, available]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: available ? '#52c41a' : '#f5222d',\n          color: 'white',\n          padding: '0px 4px',\n          borderRadius: '2px',\n          fontSize: '13px',\n          fontFamily: 'Menlo'\n        },\n        children: classCode\n      }, classCode, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Function to check if a segment is valid for the current route\n  const isValidSegment = segment => {\n    const [from, to] = segment.route.split('-');\n\n    // Check if this segment exists as consecutive airports in currentRoute\n    for (let i = 0; i < currentRoute.length - 1; i++) {\n      if (currentRoute[i] === from && currentRoute[i + 1] === to) {\n        return {\n          isValid: true,\n          index: i\n        };\n      }\n    }\n    return {\n      isValid: false,\n      index: -1\n    };\n  };\n\n  // Function to get all required segments for a date\n  const getRequiredSegments = existingSegments => {\n    // Create a map of existing segments for easy lookup\n    const segmentMap = new Map(existingSegments.map(segment => [segment.route, segment]));\n\n    // Generate all required segments\n    const allSegments = [];\n    for (let i = 0; i < currentRoute.length - 1; i++) {\n      const route = `${currentRoute[i]}-${currentRoute[i + 1]}`;\n      const segment = segmentMap.get(route) || {\n        route,\n        classes: {\n          Y: false,\n          J: false,\n          F: false\n        },\n        // Default to all unavailable\n        index: i\n      };\n      allSegments.push(segment);\n    }\n    return allSegments.sort((a, b) => a.index - b.index);\n  };\n\n  // Function to sort segments by their position in the route\n  const sortSegments = segments => {\n    const validSegments = segments.map(segment => ({\n      ...segment,\n      ...isValidSegment(segment)\n    })).filter(segment => segment.isValid);\n    return getRequiredSegments(validSegments);\n  };\n\n  // Add function to check if any segment has availability\n  const hasAnyAvailability = segments => {\n    return segments.some(segment => segment.classes.Y || segment.classes.J || segment.classes.F);\n  };\n  const handleDateClick = dateString => {\n    if (!selectionStart) {\n      setSelectionStart(dateString);\n      setSelectionEnd(null);\n      setError('');\n    } else if (!selectionEnd) {\n      const start = dayjs(selectionStart);\n      const end = dayjs(dateString);\n      if (end.isBefore(start)) {\n        setError('End date cannot be before start date');\n        return;\n      }\n      if (end.diff(start, 'days') > 7) {\n        setError('Date range cannot exceed 7 days');\n        return;\n      }\n      setSelectionEnd(dateString);\n      onDateRangeSelect([start, end]);\n    } else {\n      setSelectionStart(dateString);\n      setSelectionEnd(null);\n      setError('');\n    }\n  };\n  const isDateInRange = dateString => {\n    if (!selectionStart || !selectionEnd) return false;\n    const date = dayjs(dateString);\n    const start = dayjs(selectionStart);\n    const end = dayjs(selectionEnd);\n    return date.isAfter(start.subtract(1, 'day')) && date.isBefore(end.add(1, 'day'));\n  };\n  const handleApplyClick = () => {\n    setShowCalendar(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: showCalendar && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          onClick: goToPrevMonth,\n          style: {\n            backgroundColor: '#1677ff'\n          },\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Title, {\n          level: 4,\n          style: {\n            margin: 0\n          },\n          children: [monthNames[currentMonth], \" \", currentYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          onClick: goToNextMonth,\n          style: {\n            backgroundColor: '#1677ff'\n          },\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(7, 1fr)',\n          border: '1px solid #f0f0f0',\n          backgroundColor: '#f0f0f0',\n          gap: '1px',\n          fontFamily: 'Menlo, monospace'\n        },\n        children: [dayNames.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: '#f5f5f5',\n            padding: '8px',\n            textAlign: 'center',\n            fontWeight: '500'\n          },\n          children: day\n        }, day, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this)), Array.from({\n          length: firstDayOfMonth\n        }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: 'white',\n            minHeight: '120px',\n            padding: '8px'\n          }\n        }, `empty-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this)), Array.from({\n          length: daysInMonth\n        }).map((_, index) => {\n          const day = index + 1;\n          const dateString = formatDate(currentYear, currentMonth, day);\n          const flights = flightData[dateString] || [];\n          const validFlights = flights.length > 0 ? sortSegments(flights) : [];\n          const showFlights = validFlights.length > 0 && hasAnyAvailability(validFlights);\n          const isSelected = isDateInRange(dateString);\n          const isStart = dateString === selectionStart;\n          const isEnd = dateString === selectionEnd;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: isSelected ? '#e6f4ff' : 'white',\n              minHeight: '120px',\n              padding: '8px',\n              fontFamily: 'Menlo, monospace',\n              cursor: 'pointer',\n              border: isStart || isEnd ? '2px solid #1890ff' : 'none'\n            },\n            onClick: () => handleDateClick(dateString),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontWeight: 'bold',\n                marginBottom: '8px',\n                fontSize: '13px'\n              },\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 19\n            }, this), showFlights ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: '12px'\n              },\n              children: validFlights.map((segment, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: '4px',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  alignItems: 'center'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    fontSize: '14px',\n                    fontFamily: 'Menlo, monospace'\n                  },\n                  children: segment.route\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 27\n                }, this), renderAvailabilityBadges(segment.route, segment.classes)]\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                textAlign: 'center',\n                color: '#999',\n                fontSize: '12px',\n                marginTop: '32px',\n                fontFamily: 'Menlo, monospace'\n              },\n              children: \"No flights\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 21\n            }, this)]\n          }, `day-${day}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: '#ff4d4f',\n          marginTop: '16px',\n          textAlign: 'center'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '16px',\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          onClick: onSearch,\n          disabled: !selectionStart || !selectionEnd,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s(FlightAvailabilityCalendar, \"FJdwe38Domu0suS5kdiOnDx6Hnc=\");\n_c = FlightAvailabilityCalendar;\nexport default FlightAvailabilityCalendar;\nvar _c;\n$RefreshReg$(_c, \"FlightAvailabilityCalendar\");","map":{"version":3,"names":["React","useState","Button","Card","Typography","Badge","dayjs","jsxDEV","_jsxDEV","Title","FlightAvailabilityCalendar","flightData","currentRoute","onDateRangeSelect","selectedRange","onSearch","_s","currentMonth","setCurrentMonth","month","currentYear","setCurrentYear","year","selectionStart","setSelectionStart","selectionEnd","setSelectionEnd","error","setError","showCalendar","setShowCalendar","getDaysInMonth","daysInMonth","getFirstDayOfMonth","day","formatDate","format","firstDayOfMonth","goToPrevMonth","goToNextMonth","monthNames","dayNames","renderAvailabilityBadges","route","classes","style","display","gap","children","Object","entries","map","classCode","available","backgroundColor","color","padding","borderRadius","fontSize","fontFamily","fileName","_jsxFileName","lineNumber","columnNumber","isValidSegment","segment","from","to","split","i","length","isValid","index","getRequiredSegments","existingSegments","segmentMap","Map","allSegments","get","Y","J","F","push","sort","a","b","sortSegments","segments","validSegments","filter","hasAnyAvailability","some","handleDateClick","dateString","start","end","isBefore","diff","isDateInRange","date","isAfter","subtract","add","handleApplyClick","justifyContent","alignItems","marginBottom","type","onClick","level","margin","gridTemplateColumns","border","textAlign","fontWeight","Array","_","minHeight","flights","validFlights","showFlights","isSelected","isStart","isEnd","cursor","idx","marginTop","disabled","_c","$RefreshReg$"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/FlightAvailabilityCalendar.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Card, Typography, Badge } from 'antd';\r\nimport dayjs from 'dayjs';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst FlightAvailabilityCalendar = ({ flightData, currentRoute, onDateRangeSelect, selectedRange, onSearch }) => {\r\n  const [currentMonth, setCurrentMonth] = useState(dayjs().month());\r\n  const [currentYear, setCurrentYear] = useState(dayjs().year());\r\n  const [selectionStart, setSelectionStart] = useState(null);\r\n  const [selectionEnd, setSelectionEnd] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [showCalendar, setShowCalendar] = useState(false);\r\n\r\n  // Get days in month\r\n  const getDaysInMonth = (year, month) => {\r\n    return dayjs(`${year}-${month + 1}`).daysInMonth();\r\n  };\r\n\r\n  // Get first day of month (0 = Sunday, 1 = Monday, etc.)\r\n  const getFirstDayOfMonth = (year, month) => {\r\n    return dayjs(`${year}-${month + 1}-01`).day();\r\n  };\r\n\r\n  // Helper to format date as \"YYYY-MM-DD\"\r\n  const formatDate = (year, month, day) => {\r\n    return dayjs(`${year}-${month + 1}-${day}`).format('YYYY-MM-DD');\r\n  };\r\n\r\n  const daysInMonth = getDaysInMonth(currentYear, currentMonth);\r\n  const firstDayOfMonth = getFirstDayOfMonth(currentYear, currentMonth);\r\n\r\n  // Previous and next month handlers\r\n  const goToPrevMonth = () => {\r\n    if (currentMonth === 0) {\r\n      setCurrentMonth(11);\r\n      setCurrentYear(currentYear - 1);\r\n    } else {\r\n      setCurrentMonth(currentMonth - 1);\r\n    }\r\n  };\r\n\r\n  const goToNextMonth = () => {\r\n    if (currentMonth === 11) {\r\n      setCurrentMonth(0);\r\n      setCurrentYear(currentYear + 1);\r\n    } else {\r\n      setCurrentMonth(currentMonth + 1);\r\n    }\r\n  };\r\n\r\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n  const dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n  // Function to render availability badges\r\n  const renderAvailabilityBadges = (route, classes) => {\r\n    return (\r\n      <div style={{ display: 'flex', gap: '2px' }}>\r\n        {Object.entries(classes).map(([classCode, available]) => (\r\n          <div\r\n            key={classCode}\r\n            style={{\r\n              backgroundColor: available ? '#52c41a' : '#f5222d',\r\n              color: 'white',\r\n              padding: '0px 4px',\r\n              borderRadius: '2px',\r\n              fontSize: '13px',\r\n              fontFamily: 'Menlo'\r\n            }}\r\n          >\r\n            {classCode}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Function to check if a segment is valid for the current route\r\n  const isValidSegment = (segment) => {\r\n    const [from, to] = segment.route.split('-');\r\n    \r\n    // Check if this segment exists as consecutive airports in currentRoute\r\n    for (let i = 0; i < currentRoute.length - 1; i++) {\r\n      if (currentRoute[i] === from && currentRoute[i + 1] === to) {\r\n        return { isValid: true, index: i };\r\n      }\r\n    }\r\n    return { isValid: false, index: -1 };\r\n  };\r\n\r\n  // Function to get all required segments for a date\r\n  const getRequiredSegments = (existingSegments) => {\r\n    // Create a map of existing segments for easy lookup\r\n    const segmentMap = new Map(\r\n      existingSegments.map(segment => [segment.route, segment])\r\n    );\r\n\r\n    // Generate all required segments\r\n    const allSegments = [];\r\n    for (let i = 0; i < currentRoute.length - 1; i++) {\r\n      const route = `${currentRoute[i]}-${currentRoute[i + 1]}`;\r\n      const segment = segmentMap.get(route) || {\r\n        route,\r\n        classes: { Y: false, J: false, F: false }, // Default to all unavailable\r\n        index: i\r\n      };\r\n      allSegments.push(segment);\r\n    }\r\n\r\n    return allSegments.sort((a, b) => a.index - b.index);\r\n  };\r\n\r\n  // Function to sort segments by their position in the route\r\n  const sortSegments = (segments) => {\r\n    const validSegments = segments\r\n      .map(segment => ({\r\n        ...segment,\r\n        ...isValidSegment(segment)\r\n      }))\r\n      .filter(segment => segment.isValid);\r\n\r\n    return getRequiredSegments(validSegments);\r\n  };\r\n\r\n  // Add function to check if any segment has availability\r\n  const hasAnyAvailability = (segments) => {\r\n    return segments.some(segment => \r\n      segment.classes.Y || segment.classes.J || segment.classes.F\r\n    );\r\n  };\r\n\r\n  const handleDateClick = (dateString) => {\r\n    if (!selectionStart) {\r\n      setSelectionStart(dateString);\r\n      setSelectionEnd(null);\r\n      setError('');\r\n    } else if (!selectionEnd) {\r\n      const start = dayjs(selectionStart);\r\n      const end = dayjs(dateString);\r\n      \r\n      if (end.isBefore(start)) {\r\n        setError('End date cannot be before start date');\r\n        return;\r\n      }\r\n      \r\n      if (end.diff(start, 'days') > 7) {\r\n        setError('Date range cannot exceed 7 days');\r\n        return;\r\n      }\r\n\r\n      setSelectionEnd(dateString);\r\n      onDateRangeSelect([start, end]);\r\n    } else {\r\n      setSelectionStart(dateString);\r\n      setSelectionEnd(null);\r\n      setError('');\r\n    }\r\n  };\r\n\r\n  const isDateInRange = (dateString) => {\r\n    if (!selectionStart || !selectionEnd) return false;\r\n    const date = dayjs(dateString);\r\n    const start = dayjs(selectionStart);\r\n    const end = dayjs(selectionEnd);\r\n    return date.isAfter(start.subtract(1, 'day')) && \r\n           date.isBefore(end.add(1, 'day'));\r\n  };\r\n\r\n  const handleApplyClick = () => {\r\n    setShowCalendar(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      \r\n      {showCalendar && (\r\n        <div style={{ padding: '20px' }}>\r\n          {/* Calendar header */}\r\n          <div style={{ \r\n            display: 'flex', \r\n            justifyContent: 'space-between', \r\n            alignItems: 'center', \r\n            marginBottom: '20px' \r\n          }}>\r\n            <Button \r\n              type=\"primary\"\r\n              onClick={goToPrevMonth}\r\n              style={{ backgroundColor: '#1677ff' }}\r\n            >\r\n              &larr;\r\n            </Button>\r\n            <Title level={4} style={{ margin: 0 }}>{monthNames[currentMonth]} {currentYear}</Title>\r\n            <Button \r\n              type=\"primary\"\r\n              onClick={goToNextMonth}\r\n              style={{ backgroundColor: '#1677ff' }}\r\n            >\r\n              &rarr;\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Calendar grid */}\r\n          <div style={{ \r\n            display: 'grid', \r\n            gridTemplateColumns: 'repeat(7, 1fr)',\r\n            border: '1px solid #f0f0f0',\r\n            backgroundColor: '#f0f0f0',\r\n            gap: '1px',\r\n            fontFamily: 'Menlo, monospace'\r\n          }}>\r\n            {/* Day headers */}\r\n            {dayNames.map(day => (\r\n              <div key={day} style={{ \r\n                backgroundColor: '#f5f5f5',\r\n                padding: '8px',\r\n                textAlign: 'center',\r\n                fontWeight: '500'\r\n              }}>\r\n                {day}\r\n              </div>\r\n            ))}\r\n\r\n            {/* Calendar cells */}\r\n            {Array.from({ length: firstDayOfMonth }).map((_, index) => (\r\n              <div key={`empty-${index}`} style={{ \r\n                backgroundColor: 'white',\r\n                minHeight: '120px',\r\n                padding: '8px'\r\n              }} />\r\n            ))}\r\n\r\n            {Array.from({ length: daysInMonth }).map((_, index) => {\r\n              const day = index + 1;\r\n              const dateString = formatDate(currentYear, currentMonth, day);\r\n              const flights = flightData[dateString] || [];\r\n              const validFlights = flights.length > 0 ? sortSegments(flights) : [];\r\n              const showFlights = validFlights.length > 0 && hasAnyAvailability(validFlights);\r\n              const isSelected = isDateInRange(dateString);\r\n              const isStart = dateString === selectionStart;\r\n              const isEnd = dateString === selectionEnd;\r\n\r\n              return (\r\n                <div\r\n                  key={`day-${day}`}\r\n                  style={{\r\n                    backgroundColor: isSelected ? '#e6f4ff' : 'white',\r\n                    minHeight: '120px',\r\n                    padding: '8px',\r\n                    fontFamily: 'Menlo, monospace',\r\n                    cursor: 'pointer',\r\n                    border: isStart || isEnd ? '2px solid #1890ff' : 'none'\r\n                  }}\r\n                  onClick={() => handleDateClick(dateString)}\r\n                >\r\n                  <div style={{ \r\n                    fontWeight: 'bold', \r\n                    marginBottom: '8px',\r\n                    fontSize: '13px'\r\n                  }}>\r\n                    {day}\r\n                  </div>\r\n                  {showFlights ? (\r\n                    <div style={{ fontSize: '12px' }}>\r\n                      {validFlights.map((segment, idx) => (\r\n                        <div \r\n                          key={idx} \r\n                          style={{ \r\n                            marginBottom: '4px',\r\n                            display: 'flex',\r\n                            justifyContent: 'space-between',\r\n                            alignItems: 'center'\r\n                          }}\r\n                        >\r\n                          <div style={{ \r\n                            fontSize: '14px',\r\n                            fontFamily: 'Menlo, monospace'\r\n                          }}>\r\n                            {segment.route}\r\n                          </div>\r\n                          {renderAvailabilityBadges(segment.route, segment.classes)}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <div style={{ \r\n                      textAlign: 'center', \r\n                      color: '#999', \r\n                      fontSize: '12px',\r\n                      marginTop: '32px',\r\n                      fontFamily: 'Menlo, monospace'\r\n                    }}>\r\n                      No flights\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          {error && (\r\n            <div style={{ \r\n              color: '#ff4d4f', \r\n              marginTop: '16px',\r\n              textAlign: 'center' \r\n            }}>\r\n              {error}\r\n            </div>\r\n          )}\r\n\r\n          <div style={{ \r\n            marginTop: '16px',\r\n            display: 'flex',\r\n            justifyContent: 'center' \r\n          }}>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={onSearch}\r\n              disabled={!selectionStart || !selectionEnd}\r\n            >\r\n              Search\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlightAvailabilityCalendar; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}