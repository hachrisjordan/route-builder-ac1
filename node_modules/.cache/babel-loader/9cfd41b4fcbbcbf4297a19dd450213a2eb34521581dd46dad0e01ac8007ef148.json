{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const [startDate, setStartDate] = useState(null);\n  const combinationsRef = useRef([]);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    var _data$results, _data$results$, _data$results$$data, _data$results$$data$d, _data$results$$data$d2, _data$results2, _data$results2$, _data$results2$$data;\n    const flights = {};\n    const baseDate = dayjs(((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : (_data$results$$data$d = _data$results$$data.data) === null || _data$results$$data$d === void 0 ? void 0 : (_data$results$$data$d2 = _data$results$$data$d[0]) === null || _data$results$$data$d2 === void 0 ? void 0 : _data$results$$data$d2.DepartsAt) || new Date()).format('YYYY-MM-DD');\n    const rawFlights = ((_data$results2 = data.results) === null || _data$results2 === void 0 ? void 0 : (_data$results2$ = _data$results2[0]) === null || _data$results2$ === void 0 ? void 0 : (_data$results2$$data = _data$results2$.data) === null || _data$results2$$data === void 0 ? void 0 : _data$results2$$data.data) || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    rawFlights.filter(trip => {\n      // Remove the Z suffix when parsing times since they're actually local times\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n      console.log(`  Carrier: ${trip.Carriers}`);\n      console.log(`  Cabin: ${trip.Cabin}`);\n      console.log(`  Fare Class: ${trip.FareClass}`);\n      console.log(`  Departs: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n      console.log(`  Arrives: ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\n\n      // Filter out non-direct flights\n      if (trip.Stops !== 0) {\n        console.log('  ❌ Skipped: Not a direct flight');\n        return false;\n      }\n\n      // Filter out EK and FZ carriers\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log('  ❌ Skipped: Excluded carrier');\n        return false;\n      }\n\n      // Filter AC flights to only accept fare class X or I when fare class is present\n      if (trip.Carriers === 'AC' && trip.FareClass) {\n        console.log(`  Checking AC fare class: ${trip.FareClass}`);\n        if (trip.FareClass !== 'X' && trip.FareClass !== 'I') {\n          console.log(`  ❌ Skipped: AC flight with unsupported fare class ${trip.FareClass} (only X and I allowed)`);\n          return false;\n        }\n        console.log(`  ✓ Accepted: AC flight with supported fare class ${trip.FareClass}`);\n      }\n\n      // Filter out 2-character FareClass values\n      if (trip.FareClass && trip.FareClass.length === 2) {\n        console.log('  ❌ Skipped: 2-character FareClass');\n        return false;\n      }\n      if (timeWindow) {\n        const isValid = departureTime.isAfter(timeWindow.start) && departureTime.isBefore(timeWindow.end);\n        if (!isValid) {\n          console.log('  ❌ Skipped: Outside time window');\n          console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n        } else {\n          console.log('  ✓ Accepted: Within time window');\n          console.log(`  ✓ Class: ${trip.Cabin}`);\n        }\n        return isValid;\n      }\n      console.log('  ✓ Accepted: No time window restrictions');\n      console.log(`  ✓ Class: ${trip.Cabin}`);\n      return true;\n    }).forEach(trip => {\n      // Remove the Z suffix when parsing times since they're actually local times\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n\n      // Convert CL carrier and flight numbers to LH\n      const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n      const flightNumber = trip.FlightNumbers.startsWith('CL') ? `LH${trip.FlightNumbers.slice(2)}` : trip.FlightNumbers;\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n      // If flight already exists, merge cabin classes\n      if (flights[flightNumber]) {\n        console.log(`\\n  Merging cabin classes for flight ${flightNumber}:`);\n        console.log(`  Current classes: Y:${flights[flightNumber].economy}, J:${flights[flightNumber].business}, F:${flights[flightNumber].first}`);\n        console.log(`  Adding class: ${trip.Cabin}`);\n        switch (trip.Cabin.toLowerCase()) {\n          case 'economy':\n            flights[flightNumber].economy = true;\n            break;\n          case 'business':\n            flights[flightNumber].business = true;\n            break;\n          case 'first':\n            flights[flightNumber].first = true;\n            break;\n        }\n        console.log(`  Updated classes: Y:${flights[flightNumber].economy}, J:${flights[flightNumber].business}, F:${flights[flightNumber].first}`);\n        return; // Skip creating new flight entry\n      }\n\n      // Process aircraft name and create new flight entry\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName && aircraftName === '787  All') {\n        aircraftName = 'Boeing 787-10';\n      }\n      console.log(`\\n  Creating new flight entry for ${flightNumber}:`);\n      console.log(`  Initial cabin class: ${trip.Cabin}`);\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(carrier),\n        aircraft: aircraftName,\n        duration: trip.TotalDuration,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false,\n        isSelected: false,\n        distance: parseInt(trip.Distance) || getSegmentDistance(trip.OriginAirport, trip.DestinationAirport),\n        segmentIndex: segmentIndex\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && date.isBefore(end.add(1, 'day'));\n  };\n  const handleDateSearch = async (currentRoute, stopoverInfo, preserveCalendarData = false, clearSelections = false) => {\n    console.log('\\n=== useFlightDetails handleDateSearch ===');\n    console.log('Current Route:', currentRoute);\n    console.log('Received Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n    console.log('Preserve Calendar Data:', preserveCalendarData);\n    console.log('Clear Selections:', clearSelections);\n    if (!selectedDates || !currentRoute || !apiKey) {\n      console.log('Missing required data:', {\n        selectedDates: !!selectedDates,\n        currentRoute: !!currentRoute,\n        apiKey: !!apiKey\n      });\n      return;\n    }\n\n    // Always clear flight selections when requested\n    if (clearSelections) {\n      setSelectedFlights({});\n      setSegmentDetails(prevDetails => prevDetails.map(f => ({\n        ...f,\n        isSelected: false,\n        hidden: false\n      })));\n    }\n    setIsLoadingSegments(true);\n    try {\n      const selectedSegments = [];\n      for (const date of Object.keys(availabilityData)) {\n        if (isDateInRange(date, selectedDates)) {\n          // Preserve distance information when collecting segments\n          const segments = availabilityData[date].map(segment => ({\n            ...segment,\n            distance: parseInt(segment.distance) || getSegmentDistance(segment.route.split('-')[0], segment.route.split('-')[1])\n          }));\n          selectedSegments.push(...segments);\n        }\n      }\n\n      // Log selected segments before filtering\n      console.log('=== Flights Before Combination Filtering ===');\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\n        if (!acc[segment.route]) {\n          acc[segment.route] = [];\n        }\n        acc[segment.route].push(segment);\n        return acc;\n      }, {});\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\n        console.log(`\\nRoute ${route}:`);\n        segments.forEach(segment => {\n          console.log(`  ID: ${segment.ID}`);\n          console.log(`  Date: ${segment.date}`);\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\n        });\n      });\n\n      // Continue with existing segment search logic\n      const segmentPromises = selectedSegments.map(segment => {\n        // Create a Set to store unique IDs to fetch\n        const idsToFetch = new Set();\n\n        // Add the main segment ID\n        idsToFetch.add(segment.ID);\n\n        // Add lastUpdate IDs if they exist and are different from the main ID\n        if (segment.lastYUpdate && segment.lastYUpdate !== segment.ID) {\n          idsToFetch.add(segment.lastYUpdate);\n        }\n        if (segment.lastJUpdate && segment.lastJUpdate !== segment.ID) {\n          idsToFetch.add(segment.lastJUpdate);\n        }\n        if (segment.lastFUpdate && segment.lastFUpdate !== segment.ID) {\n          idsToFetch.add(segment.lastFUpdate);\n        }\n        console.log(`\\nFetching details for segment ${segment.route}:`, {\n          mainId: segment.ID,\n          lastYUpdate: segment.lastYUpdate,\n          lastJUpdate: segment.lastJUpdate,\n          lastFUpdate: segment.lastFUpdate,\n          totalIds: Array.from(idsToFetch)\n        });\n\n        // Return an array of promises for each ID\n        return Array.from(idsToFetch).map(id => fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${id}`, {\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey,\n            'Segment-ID': id\n          }\n        }));\n      });\n\n      // Flatten the array of arrays of promises\n      const allSegmentPromises = segmentPromises.flat();\n\n      // Only fetch availability data if we're not preserving it\n      if (!preserveCalendarData) {\n        const routeString = currentRoute.join('-');\n\n        // Add startDate parameter if available\n        let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n        if (startDate) {\n          const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n          url += `?startDate=${formattedDate}`;\n        }\n        const availabilityResponse = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        });\n        if (availabilityResponse.ok) {\n          const availabilityResult = await availabilityResponse.json();\n\n          // Process availability data into a more usable format\n          const processedAvailability = {};\n\n          // Group records by date and route\n          const groupedRecords = {};\n          availabilityResult.forEach(item => {\n            const key = `${item.date}_${item.originAirport}-${item.destinationAirport}`;\n            if (!groupedRecords[key]) {\n              groupedRecords[key] = [];\n            }\n            groupedRecords[key].push(item);\n          });\n\n          // Process each group of records\n          Object.values(groupedRecords).forEach(records => {\n            // Sort records by source priority: united -> velocity -> lufthansa -> aeroplan\n            const sourcePriority = {\n              united: 0,\n              velocity: 1,\n              lufthansa: 2,\n              aeroplan: 3\n            };\n            records.sort((a, b) => sourcePriority[a.source] - sourcePriority[b.source]);\n\n            // Initialize merged record from the first record\n            const mergedRecord = {\n              ...records[0]\n            };\n            const dateKey = mergedRecord.date;\n\n            // Initialize Direct flags as false\n            mergedRecord.YDirect = false;\n            mergedRecord.JDirect = false;\n            mergedRecord.FDirect = false;\n\n            // Process airline lists for each cabin class\n            const processAirlines = airlineStr => {\n              if (!airlineStr) return '';\n              return airlineStr.split(',').map(a => a.trim()).filter(Boolean).join(',');\n            };\n\n            // Filter airlines based on source and update Direct flags using OR operation\n            records.forEach(record => {\n              // Remove specific airlines based on source\n              if (record.source === 'lufthansa') {\n                var _record$YDirectAirlin, _record$JDirectAirlin, _record$FDirectAirlin;\n                record.YDirectAirlines = processAirlines((_record$YDirectAirlin = record.YDirectAirlines) === null || _record$YDirectAirlin === void 0 ? void 0 : _record$YDirectAirlin.replace(/\\bLH\\b/g, ''));\n                record.JDirectAirlines = processAirlines((_record$JDirectAirlin = record.JDirectAirlines) === null || _record$JDirectAirlin === void 0 ? void 0 : _record$JDirectAirlin.replace(/\\bLH\\b/g, ''));\n                record.FDirectAirlines = processAirlines((_record$FDirectAirlin = record.FDirectAirlines) === null || _record$FDirectAirlin === void 0 ? void 0 : _record$FDirectAirlin.replace(/\\bLH\\b/g, ''));\n              } else if (record.source === 'united') {\n                var _record$YDirectAirlin2, _record$JDirectAirlin2, _record$FDirectAirlin2;\n                record.YDirectAirlines = processAirlines((_record$YDirectAirlin2 = record.YDirectAirlines) === null || _record$YDirectAirlin2 === void 0 ? void 0 : _record$YDirectAirlin2.replace(/\\bUA\\b/g, ''));\n                record.JDirectAirlines = processAirlines((_record$JDirectAirlin2 = record.JDirectAirlines) === null || _record$JDirectAirlin2 === void 0 ? void 0 : _record$JDirectAirlin2.replace(/\\bUA\\b/g, ''));\n                record.FDirectAirlines = processAirlines((_record$FDirectAirlin2 = record.FDirectAirlines) === null || _record$FDirectAirlin2 === void 0 ? void 0 : _record$FDirectAirlin2.replace(/\\bUA\\b/g, ''));\n              }\n\n              // Update Direct flags based on remaining airlines\n              record.YDirect = !!record.YDirectAirlines;\n              record.JDirect = !!record.JDirectAirlines;\n              record.FDirect = !!record.FDirectAirlines;\n\n              // Update merged record's Direct flags using OR operation\n              mergedRecord.YDirect = mergedRecord.YDirect || record.YDirect;\n              mergedRecord.JDirect = mergedRecord.JDirect || record.JDirect;\n              mergedRecord.FDirect = mergedRecord.FDirect || record.FDirect;\n              console.log(`\\nProcessed ${record.source} record:`, {\n                YDirectAirlines: record.YDirectAirlines,\n                JDirectAirlines: record.JDirectAirlines,\n                FDirectAirlines: record.FDirectAirlines,\n                YDirect: record.YDirect,\n                JDirect: record.JDirect,\n                FDirect: record.FDirect,\n                mergedYDirect: mergedRecord.YDirect,\n                mergedJDirect: mergedRecord.JDirect,\n                mergedFDirect: mergedRecord.FDirect\n              });\n            });\n\n            // Merge airlines across sources\n            const mergedAirlines = {\n              Y: new Set(),\n              J: new Set(),\n              F: new Set()\n            };\n            let lastYUpdate = null;\n            let lastJUpdate = null;\n            let lastFUpdate = null;\n            records.forEach(record => {\n              const addAirlines = (airlineStr, set) => {\n                if (airlineStr) {\n                  airlineStr.split(',').forEach(airline => {\n                    const trimmed = airline.trim();\n                    if (trimmed) {\n                      console.log(`Adding airline ${trimmed} to set (current size: ${set.size})`);\n                      set.add(trimmed);\n                    }\n                  });\n                }\n              };\n              if (record.YDirect && record.YDirectAirlines) {\n                const prevSize = mergedAirlines.Y.size;\n                console.log(`\\nProcessing Y class from ${record.source}:`, {\n                  airlines: record.YDirectAirlines,\n                  currentSet: Array.from(mergedAirlines.Y)\n                });\n                addAirlines(record.YDirectAirlines, mergedAirlines.Y);\n                if (mergedAirlines.Y.size > prevSize) {\n                  console.log(`New Y airlines added, updating lastYUpdate to ${record.ID}`);\n                  lastYUpdate = record.ID;\n                }\n              }\n              if (record.JDirect && record.JDirectAirlines) {\n                const prevSize = mergedAirlines.J.size;\n                console.log(`\\nProcessing J class from ${record.source}:`, {\n                  airlines: record.JDirectAirlines,\n                  currentSet: Array.from(mergedAirlines.J)\n                });\n                addAirlines(record.JDirectAirlines, mergedAirlines.J);\n                if (mergedAirlines.J.size > prevSize) {\n                  console.log(`New J airlines added, updating lastJUpdate to ${record.ID}`);\n                  lastJUpdate = record.ID;\n                }\n              }\n              if (record.FDirect && record.FDirectAirlines) {\n                const prevSize = mergedAirlines.F.size;\n                console.log(`\\nProcessing F class from ${record.source}:`, {\n                  airlines: record.FDirectAirlines,\n                  currentSet: Array.from(mergedAirlines.F)\n                });\n                addAirlines(record.FDirectAirlines, mergedAirlines.F);\n                if (mergedAirlines.F.size > prevSize) {\n                  console.log(`New F airlines added, updating lastFUpdate to ${record.ID}`);\n                  lastFUpdate = record.ID;\n                }\n              }\n            });\n\n            // Update merged record\n            mergedRecord.YDirectAirlines = Array.from(mergedAirlines.Y).join(',');\n            mergedRecord.JDirectAirlines = Array.from(mergedAirlines.J).join(',');\n            mergedRecord.FDirectAirlines = Array.from(mergedAirlines.F).join(',');\n            mergedRecord.YDirect = mergedAirlines.Y.size > 0;\n            mergedRecord.JDirect = mergedAirlines.J.size > 0;\n            mergedRecord.FDirect = mergedAirlines.F.size > 0;\n            mergedRecord.lastYUpdate = lastYUpdate;\n            mergedRecord.lastJUpdate = lastJUpdate;\n            mergedRecord.lastFUpdate = lastFUpdate;\n            console.log('\\nMerged record:', {\n              YDirectAirlines: mergedRecord.YDirectAirlines,\n              JDirectAirlines: mergedRecord.JDirectAirlines,\n              FDirectAirlines: mergedRecord.FDirectAirlines,\n              YDirect: mergedRecord.YDirect,\n              JDirect: mergedRecord.JDirect,\n              FDirect: mergedRecord.FDirect,\n              lastYUpdate,\n              lastJUpdate,\n              lastFUpdate\n            });\n            if (!processedAvailability[dateKey]) {\n              processedAvailability[dateKey] = [];\n            }\n            processedAvailability[dateKey].push({\n              route: `${mergedRecord.originAirport}-${mergedRecord.destinationAirport}`,\n              classes: {\n                Y: mergedRecord.YDirect,\n                J: mergedRecord.JDirect,\n                F: mergedRecord.FDirect\n              },\n              ID: mergedRecord.ID,\n              lastYUpdate: mergedRecord.lastYUpdate,\n              lastJUpdate: mergedRecord.lastJUpdate,\n              lastFUpdate: mergedRecord.lastFUpdate,\n              distance: mergedRecord.distance,\n              date: mergedRecord.date,\n              Source: mergedRecord.source,\n              YDirectAirlines: mergedRecord.YDirectAirlines,\n              JDirectAirlines: mergedRecord.JDirectAirlines,\n              FDirectAirlines: mergedRecord.FDirectAirlines\n            });\n          });\n          setAvailabilityData(processedAvailability);\n        }\n      }\n\n      // Continue with existing segment search logic\n      const newProcessedSegments = [];\n      const [startDate, endDate] = selectedDates;\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\n      console.log('\\n=== Processing Segments with Stopover ===');\n      if (stopoverInfo) {\n        console.log('Stopover Details:', {\n          airport: stopoverInfo.airport,\n          days: stopoverInfo.days\n        });\n      }\n      console.log('\\n=== Processing Segments ===');\n      console.log('Date Range:', {\n        start: dayjs(startDate).format('YYYY-MM-DD'),\n        end: dayjs(endDate).format('YYYY-MM-DD')\n      });\n      try {\n        // Process all segments\n        for (let i = 0; i < currentRoute.length - 1; i++) {\n          const from = currentRoute[i];\n          const to = currentRoute[i + 1];\n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n          let timeWindow = null;\n          const dates = new Set();\n          if (i === 0) {\n            // First segment - use full date range\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            console.log('\\n=== First Segment Details ===');\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n\n            // Get all dates in range\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n          } else {\n            // Handle subsequent segments with stopover consideration\n            const prevSegment = newProcessedSegments[i - 1];\n            if (!prevSegment || prevSegment.flights.length === 0) {\n              // Use full date range if no previous flights\n              const startDay = dayjs(startDate).startOf('day');\n              const endDay = dayjs(endDate).endOf('day');\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('No previous flights found. Using full date range for this segment');\n            } else {\n              // Calculate time window from previous segment's flights\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n              console.log('\\n=== Processing Subsequent Segment ===');\n              console.log('Segment:', `${currentRoute[i - 1]}-${currentRoute[i]}`);\n              console.log('Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n              console.log('Current Airport:', currentRoute[i]);\n              console.log('Previous Airport:', currentRoute[i - 1]);\n              console.log('Is Stopover Airport:', stopoverInfo && currentRoute[i] === stopoverInfo.airport);\n\n              // Adjust time window based on stopover\n              if (stopoverInfo && currentRoute[i] === stopoverInfo.airport) {\n                console.log(`\\nApplying stopover of ${stopoverInfo.days} days at ${stopoverInfo.airport}`);\n                timeWindow = {\n                  start: arrivals[0].add(stopoverInfo.days, 'days'),\n                  end: arrivals[arrivals.length - 1].add(stopoverInfo.days, 'days').add(24, 'hours'),\n                  isStopover: true,\n                  stopoverDays: stopoverInfo.days\n                };\n              } else {\n                timeWindow = {\n                  start: arrivals[0],\n                  end: arrivals[arrivals.length - 1].add(24, 'hours'),\n                  isStopover: false,\n                  stopoverDays: 0\n                };\n              }\n              console.log('\\nTime Window:', {\n                start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n                end: timeWindow.end.format('YYYY-MM-DD HH:mm'),\n                isStopover: timeWindow.isStopover,\n                stopoverDays: timeWindow.stopoverDays\n              });\n\n              // Get dates for time window\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n            }\n          }\n\n          // Process each date\n          const allFlights = [];\n          for (const date of dates) {\n            // Find route from availability data instead\n            const availableRoutes = availabilityData[date] || [];\n            const route = availableRoutes.find(r => r.route === `${from}-${to}`);\n            if (!route) {\n              console.log(`No route found for ${from}-${to} on ${date}`);\n              continue;\n            }\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\n            console.log(`Main Segment ID: ${route.ID}`);\n            console.log(`Additional IDs:`, {\n              Y: route.lastYUpdate,\n              J: route.lastJUpdate,\n              F: route.lastFUpdate\n            });\n            const idsToFetch = new Set([route.ID, route.lastYUpdate, route.lastJUpdate, route.lastFUpdate].filter(Boolean));\n            try {\n              const responses = await Promise.all(Array.from(idsToFetch).map(id => fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${id}`, {\n                method: 'GET',\n                headers: {\n                  'accept': 'application/json',\n                  'Partner-Authorization': apiKey,\n                  'Segment-ID': id\n                }\n              })));\n              const validResponses = await Promise.all(responses.filter(response => response.ok).map(response => response.json()));\n\n              // Process each response and merge the results\n              const processedFlights = validResponses.map(data => processFlightData(data, timeWindow, i)).flat();\n              console.log('\\nMerging duplicate flights:');\n              // Remove duplicates based on flight number and departure time while merging cabin classes\n              const uniqueFlights = Array.from(new Map(processedFlights.map(flight => {\n                const key = `${flight.flightNumber}_${flight.DepartsAt}`;\n                const existingFlight = processedFlights.find(f => `${f.flightNumber}_${f.DepartsAt}` === key && f !== flight);\n                if (existingFlight) {\n                  console.log(`\\n  Found duplicate flight: ${flight.flightNumber}`);\n                  console.log(`  Flight 1 classes: Y:${flight.economy}, J:${flight.business}, F:${flight.first}`);\n                  console.log(`  Flight 2 classes: Y:${existingFlight.economy}, J:${existingFlight.business}, F:${existingFlight.first}`);\n                  const mergedFlight = {\n                    ...flight,\n                    economy: flight.economy || existingFlight.economy,\n                    business: flight.business || existingFlight.business,\n                    first: flight.first || existingFlight.first\n                  };\n                  console.log(`  Merged classes: Y:${mergedFlight.economy}, J:${mergedFlight.business}, F:${mergedFlight.first}`);\n                  return [key, mergedFlight];\n                }\n                return [key, flight];\n              })).values());\n              console.log(`\\n✓ Found ${uniqueFlights.length} unique valid flights from ${idsToFetch.size} sources`);\n              allFlights.push(...uniqueFlights);\n            } catch (error) {\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\n            }\n          }\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n          // Store searched dates in segment data\n          newProcessedSegments[i] = {\n            route: `${from}-${to}`,\n            flights: allFlights,\n            searchDates: dates,\n            // Add this field\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n          };\n\n          // Only break if previous segment had flights but current segment found none\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i - 1].flights.length > 0) {\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n            console.log('Skipping remaining segments');\n            break;\n          }\n        }\n\n        // After processing all segments\n        if (newProcessedSegments.length >= 1) {\n          // Log all flights found by segment\n          console.log('\\n=== All Flights Found ===');\n          newProcessedSegments.forEach((segment, index) => {\n            if (segment.flights && segment.flights.length > 0) {\n              console.log(`\\nSegment ${index} (${segment.route}):`);\n              segment.flights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n                const classes = [];\n                if (flight.economy) classes.push('Y');\n                if (flight.business) classes.push('J');\n                if (flight.first) classes.push('F');\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft} [${classes.join(',')}]`);\n              });\n            } else {\n              console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\n            }\n          });\n          console.log('\\n=== Flight Combinations ===');\n\n          // Find the first and last segments with flights\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n          // Find all valid combinations recursively\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n            // If we've reached beyond the last valid segment, this is a valid combination\n            if (segmentIndex > lastSegmentIndex) {\n              return [currentPath];\n            }\n            const validCombos = [];\n            const currentSegment = newProcessedSegments[segmentIndex];\n\n            // If no flights in current segment, try next segment\n            if (!(currentSegment !== null && currentSegment !== void 0 && currentSegment.flights) || currentSegment.flights.length === 0) {\n              return findValidCombinations(currentPath, segmentIndex + 1);\n            }\n\n            // For first segment, try all flights\n            if (currentPath.length === 0) {\n              currentSegment.flights.forEach(flight => {\n                const combos = findValidCombinations([flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              });\n            } else {\n              // For subsequent segments, check connection times\n              const prevFlight = currentPath[currentPath.length - 1];\n              const prevArrival = dayjs(prevFlight.ArrivesAt);\n              const isStopoverPoint = stopoverInfo && currentRoute[segmentIndex] === stopoverInfo.airport;\n              currentSegment.flights.forEach(flight => {\n                const departure = dayjs(flight.DepartsAt);\n                const connectionTime = departure.diff(prevArrival, 'minutes');\n                if (isStopoverPoint) {\n                  // For stopover points, connection must be within stopover day window\n                  const minStopoverTime = stopoverInfo.days * 24 * 60; // Convert days to minutes\n                  const maxStopoverTime = (stopoverInfo.days + 1) * 24 * 60; // Add one more day for flexibility\n\n                  if (connectionTime >= minStopoverTime && connectionTime <= maxStopoverTime) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                } else {\n                  // For normal connections, 30 minutes to 24 hours\n                  if (connectionTime >= 30 && connectionTime <= 24 * 60) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                }\n              });\n            }\n            return validCombos;\n          };\n\n          // Get all valid combinations using the new function\n          const allCombinations = findValidCombinations();\n\n          // Store combinations in ref immediately after finding them\n          combinationsRef.current = allCombinations;\n\n          // Log the combinations\n          console.log('\\n=== Valid Combinations ===');\n          if (allCombinations.length === 0) {\n            console.log('No valid combinations found for any segment range');\n          } else {\n            console.log(`Found ${allCombinations.length} valid combinations`);\n            allCombinations.forEach(combo => {\n              const flightInfo = combo.map((flight, idx) => {\n                if (idx === 0) {\n                  return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n                }\n                const prevFlight = combo[idx - 1];\n                const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n                const hours = Math.floor(connectionTime / 60);\n                const minutes = connectionTime % 60;\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n              });\n              console.log(flightInfo.join(' → '));\n            });\n          }\n\n          // Create a map of valid flights by segment\n          const validFlightsBySegment = new Map();\n          allCombinations.forEach(combo => {\n            combo.forEach(flight => {\n              const segmentKey = flight.segmentIndex;\n              if (!validFlightsBySegment.has(segmentKey)) {\n                validFlightsBySegment.set(segmentKey, new Set());\n              }\n              validFlightsBySegment.get(segmentKey).add(`${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n            });\n          });\n\n          // Filter and process flights\n          const filteredFlights = [];\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segment = newProcessedSegments[i];\n            if (!segment || !segment.flights) continue;\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n\n            // Add valid flights from this segment\n            segment.flights.forEach(flight => {\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n              if (validFlightsForSegment.has(flightKey)) {\n                filteredFlights.push({\n                  ...flight,\n                  isSelected: false,\n                  segmentIndex: i\n                });\n              }\n            });\n          }\n          setSegmentDetails(filteredFlights);\n          setValidCombinations(allCombinations);\n\n          // Log flights by segment\n          console.log('\\n=== Flights By Segment ===');\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n            if (segmentFlights.length > 0) {\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n              segmentFlights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n              });\n            }\n          }\n          console.log('\\n======================');\n        } else {\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => segment.flights.map(flight => ({\n            ...flight,\n            isSelected: false,\n            segmentIndex: index\n          }))));\n          setValidCombinations([]);\n        }\n      } catch (error) {\n        console.error('Error processing segments:', error);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const handleCalendarSearch = async currentRoute => {\n    if (!currentRoute || !apiKey) return;\n    setIsLoadingAvailability(true);\n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n\n      // Add startDate parameter if available\n      let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n      if (startDate) {\n        const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n        url += `?startDate=${formattedDate}`;\n        console.log(`Using start date: ${formattedDate} for availability search`);\n      }\n      console.log(`Fetching availability data from: ${url}`);\n      const availabilityResponse = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      });\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n        console.log(`Received ${availabilityResult.length} availability records`);\n\n        // Process availability data into a more usable format\n        const processedAvailability = {};\n\n        // Group records by date and route\n        const groupedRecords = {};\n        availabilityResult.forEach(item => {\n          const key = `${item.date}_${item.originAirport}-${item.destinationAirport}`;\n          if (!groupedRecords[key]) {\n            groupedRecords[key] = [];\n          }\n          groupedRecords[key].push(item);\n        });\n\n        // Process each group of records\n        Object.values(groupedRecords).forEach(records => {\n          // Sort records by source priority: united -> velocity -> lufthansa -> aeroplan\n          const sourcePriority = {\n            united: 0,\n            velocity: 1,\n            lufthansa: 2,\n            aeroplan: 3\n          };\n          records.sort((a, b) => sourcePriority[a.source] - sourcePriority[b.source]);\n\n          // Initialize merged record from the first record\n          const mergedRecord = {\n            ...records[0]\n          };\n          const dateKey = mergedRecord.date;\n\n          // Initialize Direct flags as false\n          mergedRecord.YDirect = false;\n          mergedRecord.JDirect = false;\n          mergedRecord.FDirect = false;\n\n          // Process airline lists for each cabin class\n          const processAirlines = airlineStr => {\n            if (!airlineStr) return '';\n            return airlineStr.split(',').map(a => a.trim()).filter(Boolean).join(',');\n          };\n\n          // Filter airlines based on source and update Direct flags using OR operation\n          records.forEach(record => {\n            // Remove specific airlines based on source\n            if (record.source === 'lufthansa') {\n              var _record$YDirectAirlin3, _record$JDirectAirlin3, _record$FDirectAirlin3;\n              record.YDirectAirlines = processAirlines((_record$YDirectAirlin3 = record.YDirectAirlines) === null || _record$YDirectAirlin3 === void 0 ? void 0 : _record$YDirectAirlin3.replace(/\\bLH\\b/g, ''));\n              record.JDirectAirlines = processAirlines((_record$JDirectAirlin3 = record.JDirectAirlines) === null || _record$JDirectAirlin3 === void 0 ? void 0 : _record$JDirectAirlin3.replace(/\\bLH\\b/g, ''));\n              record.FDirectAirlines = processAirlines((_record$FDirectAirlin3 = record.FDirectAirlines) === null || _record$FDirectAirlin3 === void 0 ? void 0 : _record$FDirectAirlin3.replace(/\\bLH\\b/g, ''));\n            } else if (record.source === 'united') {\n              var _record$YDirectAirlin4, _record$JDirectAirlin4, _record$FDirectAirlin4;\n              record.YDirectAirlines = processAirlines((_record$YDirectAirlin4 = record.YDirectAirlines) === null || _record$YDirectAirlin4 === void 0 ? void 0 : _record$YDirectAirlin4.replace(/\\bUA\\b/g, ''));\n              record.JDirectAirlines = processAirlines((_record$JDirectAirlin4 = record.JDirectAirlines) === null || _record$JDirectAirlin4 === void 0 ? void 0 : _record$JDirectAirlin4.replace(/\\bUA\\b/g, ''));\n              record.FDirectAirlines = processAirlines((_record$FDirectAirlin4 = record.FDirectAirlines) === null || _record$FDirectAirlin4 === void 0 ? void 0 : _record$FDirectAirlin4.replace(/\\bUA\\b/g, ''));\n            }\n\n            // Update Direct flags based on remaining airlines\n            record.YDirect = !!record.YDirectAirlines;\n            record.JDirect = !!record.JDirectAirlines;\n            record.FDirect = !!record.FDirectAirlines;\n\n            // Update merged record's Direct flags using OR operation\n            mergedRecord.YDirect = mergedRecord.YDirect || record.YDirect;\n            mergedRecord.JDirect = mergedRecord.JDirect || record.JDirect;\n            mergedRecord.FDirect = mergedRecord.FDirect || record.FDirect;\n            console.log(`\\nProcessed ${record.source} record:`, {\n              YDirectAirlines: record.YDirectAirlines,\n              JDirectAirlines: record.JDirectAirlines,\n              FDirectAirlines: record.FDirectAirlines,\n              YDirect: record.YDirect,\n              JDirect: record.JDirect,\n              FDirect: record.FDirect,\n              mergedYDirect: mergedRecord.YDirect,\n              mergedJDirect: mergedRecord.JDirect,\n              mergedFDirect: mergedRecord.FDirect\n            });\n          });\n\n          // Merge airlines across sources\n          const mergedAirlines = {\n            Y: new Set(),\n            J: new Set(),\n            F: new Set()\n          };\n          let lastYUpdate = null;\n          let lastJUpdate = null;\n          let lastFUpdate = null;\n          records.forEach(record => {\n            const addAirlines = (airlineStr, set) => {\n              if (airlineStr) {\n                airlineStr.split(',').forEach(airline => {\n                  const trimmed = airline.trim();\n                  if (trimmed) {\n                    console.log(`Adding airline ${trimmed} to set (current size: ${set.size})`);\n                    set.add(trimmed);\n                  }\n                });\n              }\n            };\n            if (record.YDirect && record.YDirectAirlines) {\n              const prevSize = mergedAirlines.Y.size;\n              console.log(`\\nProcessing Y class from ${record.source}:`, {\n                airlines: record.YDirectAirlines,\n                currentSet: Array.from(mergedAirlines.Y)\n              });\n              addAirlines(record.YDirectAirlines, mergedAirlines.Y);\n              if (mergedAirlines.Y.size > prevSize) {\n                console.log(`New Y airlines added, updating lastYUpdate to ${record.ID}`);\n                lastYUpdate = record.ID;\n              }\n            }\n            if (record.JDirect && record.JDirectAirlines) {\n              const prevSize = mergedAirlines.J.size;\n              console.log(`\\nProcessing J class from ${record.source}:`, {\n                airlines: record.JDirectAirlines,\n                currentSet: Array.from(mergedAirlines.J)\n              });\n              addAirlines(record.JDirectAirlines, mergedAirlines.J);\n              if (mergedAirlines.J.size > prevSize) {\n                console.log(`New J airlines added, updating lastJUpdate to ${record.ID}`);\n                lastJUpdate = record.ID;\n              }\n            }\n            if (record.FDirect && record.FDirectAirlines) {\n              const prevSize = mergedAirlines.F.size;\n              console.log(`\\nProcessing F class from ${record.source}:`, {\n                airlines: record.FDirectAirlines,\n                currentSet: Array.from(mergedAirlines.F)\n              });\n              addAirlines(record.FDirectAirlines, mergedAirlines.F);\n              if (mergedAirlines.F.size > prevSize) {\n                console.log(`New F airlines added, updating lastFUpdate to ${record.ID}`);\n                lastFUpdate = record.ID;\n              }\n            }\n          });\n\n          // Update merged record\n          mergedRecord.YDirectAirlines = Array.from(mergedAirlines.Y).join(',');\n          mergedRecord.JDirectAirlines = Array.from(mergedAirlines.J).join(',');\n          mergedRecord.FDirectAirlines = Array.from(mergedAirlines.F).join(',');\n          mergedRecord.YDirect = mergedAirlines.Y.size > 0;\n          mergedRecord.JDirect = mergedAirlines.J.size > 0;\n          mergedRecord.FDirect = mergedAirlines.F.size > 0;\n          mergedRecord.lastYUpdate = lastYUpdate;\n          mergedRecord.lastJUpdate = lastJUpdate;\n          mergedRecord.lastFUpdate = lastFUpdate;\n          console.log('\\nMerged record:', {\n            YDirectAirlines: mergedRecord.YDirectAirlines,\n            JDirectAirlines: mergedRecord.JDirectAirlines,\n            FDirectAirlines: mergedRecord.FDirectAirlines,\n            YDirect: mergedRecord.YDirect,\n            JDirect: mergedRecord.JDirect,\n            FDirect: mergedRecord.FDirect,\n            lastYUpdate,\n            lastJUpdate,\n            lastFUpdate\n          });\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          processedAvailability[dateKey].push({\n            route: `${mergedRecord.originAirport}-${mergedRecord.destinationAirport}`,\n            classes: {\n              Y: mergedRecord.YDirect,\n              J: mergedRecord.JDirect,\n              F: mergedRecord.FDirect\n            },\n            ID: mergedRecord.ID,\n            lastYUpdate: mergedRecord.lastYUpdate,\n            lastJUpdate: mergedRecord.lastJUpdate,\n            lastFUpdate: mergedRecord.lastFUpdate,\n            distance: mergedRecord.distance,\n            date: mergedRecord.date,\n            Source: mergedRecord.source,\n            YDirectAirlines: mergedRecord.YDirectAirlines,\n            JDirectAirlines: mergedRecord.JDirectAirlines,\n            FDirectAirlines: mergedRecord.FDirectAirlines\n          });\n        });\n        setAvailabilityData(processedAvailability);\n      } else {\n        console.error('Failed to fetch availability data:', availabilityResponse.status);\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n  const resetDetails = () => {\n    // Clear all data states\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n    setStartDate(null); // Clear the start date\n\n    // Note: We don't clear selectedDates here because we do it explicitly in the modal close handler\n\n    // Reset the combinations reference\n    combinationsRef.current = [];\n\n    // Clear any stopover information in the FlightAvailabilityCalendar\n    if (window.clearStopoverInfo && typeof window.clearStopoverInfo === 'function') {\n      window.clearStopoverInfo();\n    }\n\n    // Clear calendar display\n    if (window.hideCalendar && typeof window.hideCalendar === 'function') {\n      window.hideCalendar();\n    }\n  };\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    setSelectedFlights(prevSelected => {\n      var _newSelected$segmentI, _newSelected$segmentI2;\n      const newSelected = {\n        ...prevSelected\n      };\n\n      // Check if this exact flight is already selected\n      const isCurrentlySelected = (_newSelected$segmentI = newSelected[segmentIndex]) === null || _newSelected$segmentI === void 0 ? void 0 : (_newSelected$segmentI2 = _newSelected$segmentI.some) === null || _newSelected$segmentI2 === void 0 ? void 0 : _newSelected$segmentI2.call(_newSelected$segmentI, f => {\n        const matches = f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Log all current selections\n      console.log('\\nALL CURRENT SELECTIONS:');\n      Object.entries(newSelected).forEach(([idx, flights]) => {\n        if (Array.isArray(flights)) {\n          flights.forEach(f => {\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          });\n        }\n      });\n\n      // Use combinations from the ref\n      const currentCombos = combinationsRef.current;\n      const firstSegmentWithFlights = Math.min(...segmentDetails.filter(f => !f.hidden).map(f => f.segmentIndex));\n      console.log('\\nChecking combinations:', currentCombos.map(combo => combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')));\n\n      // Find combinations that contain the selected flight(s)\n      const validCombos = currentCombos.filter(combo => {\n        // If no selections, all combinations are valid\n        if (Object.keys(newSelected).length === 0) return true;\n\n        // Check if this combination contains all selected flights\n        const isValid = Object.entries(newSelected).every(([segIdx, flights]) => {\n          const selectedFlight = flights[0];\n          // Adjust index based on first segment with flights\n          const comboIndex = parseInt(segIdx, 10) - firstSegmentWithFlights;\n          const comboFlight = combo[comboIndex];\n          const matches = (comboFlight === null || comboFlight === void 0 ? void 0 : comboFlight.flightNumber) === selectedFlight.flightNumber && dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm') === dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm');\n          console.log(`Checking combo flight in segment ${segIdx}:`, {\n            selected: `${selectedFlight.flightNumber} (${dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm')})`,\n            combo: comboFlight ? `${comboFlight.flightNumber} (${dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm')})` : 'none',\n            comboIndex,\n            matches\n          });\n          return matches;\n        });\n        return isValid;\n      });\n      console.log('\\nValid combinations:', validCombos.map(combo => combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')));\n\n      // Create a set of all flights that appear in valid combinations\n      const validFlights = new Set();\n      validCombos.forEach(combo => {\n        combo.forEach(f => {\n          if (!f) return;\n          const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          validFlights.add(key);\n        });\n      });\n\n      // Update visibility\n      setSegmentDetails(prevDetails => prevDetails.map(f => {\n        var _newSelected$f$segmen;\n        const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n        const isSelected = ((_newSelected$f$segmen = newSelected[f.segmentIndex]) === null || _newSelected$f$segmen === void 0 ? void 0 : _newSelected$f$segmen.some(sf => sf.flightNumber === f.flightNumber && dayjs(sf.DepartsAt).format('MM-DD HH:mm') === dayjs(f.DepartsAt).format('MM-DD HH:mm'))) || false;\n        return {\n          ...f,\n          isSelected,\n          hidden: Object.keys(newSelected).length > 0 && !isSelected && !validFlights.has(flightKey)\n        };\n      }));\n      return newSelected;\n    });\n  };\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => combo.map((f, idx) => ({\n        ...f,\n        isSelected: false,\n        segmentIndex: idx\n      })));\n      const uniqueFlights = Array.from(new Map(allFlights.map(f => [`${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`, f])).values());\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n    startDate,\n    setStartDate\n  };\n}\n_s(useFlightDetails, \"/wSre+NzoaEr19CeqCCuXLcaxHg=\");","map":{"version":3,"names":["useState","useEffect","useRef","useMemo","dayjs","routeDetails","airlines","useFlightDetails","getColumns","initialCombinations","_s","selectedDates","setSelectedDates","apiKey","setApiKey","localStorage","getItem","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","selectedFlights","setSelectedFlights","validCombinations","setValidCombinations","processedSegments","setProcessedSegments","originalFlights","setOriginalFlights","originalCombinations","processedFlights","setProcessedFlights","initialFlights","setInitialFlights","availabilityData","setAvailabilityData","isLoadingAvailability","setIsLoadingAvailability","startDate","setStartDate","combinationsRef","setItem","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","segmentIndex","_data$results","_data$results$","_data$results$$data","_data$results$$data$d","_data$results$$data$d2","_data$results2","_data$results2$","_data$results2$$data","flights","results","DepartsAt","Date","rawFlights","length","start","end","filter","trip","departureTime","arrivalTime","ArrivesAt","FlightNumbers","Carriers","Cabin","FareClass","Stops","isValid","isAfter","isBefore","forEach","carrier","flightNumber","startsWith","slice","baseDayjs","departDayDiff","diff","arrivalDayDiff","economy","business","first","toLowerCase","aircraftName","Aircraft","OriginAirport","DestinationAirport","aircraft","duration","TotalDuration","departs","arrives","isSelected","parseInt","Distance","Object","values","isDateInRange","dateRange","subtract","add","handleDateSearch","currentRoute","stopoverInfo","preserveCalendarData","clearSelections","JSON","stringify","prevDetails","map","f","hidden","selectedSegments","keys","segments","segment","split","push","segmentsByRoute","reduce","acc","entries","ID","classes","Y","J","F","segmentPromises","idsToFetch","Set","lastYUpdate","lastJUpdate","lastFUpdate","mainId","totalIds","Array","id","fetch","headers","allSegmentPromises","flat","routeString","join","url","formattedDate","availabilityResponse","method","ok","availabilityResult","json","processedAvailability","groupedRecords","item","key","originAirport","destinationAirport","records","sourcePriority","united","velocity","lufthansa","aeroplan","sort","b","source","mergedRecord","dateKey","YDirect","JDirect","FDirect","processAirlines","airlineStr","trim","Boolean","record","_record$YDirectAirlin","_record$JDirectAirlin","_record$FDirectAirlin","YDirectAirlines","JDirectAirlines","FDirectAirlines","_record$YDirectAirlin2","_record$JDirectAirlin2","_record$FDirectAirlin2","mergedYDirect","mergedJDirect","mergedFDirect","mergedAirlines","addAirlines","set","trimmed","size","prevSize","currentSet","Source","newProcessedSegments","endDate","airport","days","i","dates","startDay","startOf","endDay","endOf","d","valueOf","prevSegment","arrivals","isStopover","stopoverDays","allFlights","availableRoutes","responses","Promise","all","validResponses","response","uniqueFlights","Map","flight","existingFlight","mergedFlight","error","searchDates","earliestArrival","latestArrival","index","firstSegmentWithFlights","findIndex","lastSegmentWithFlights","reverse","lastSegmentIndex","findValidCombinations","currentPath","validCombos","currentSegment","combos","prevFlight","prevArrival","isStopoverPoint","departure","connectionTime","minStopoverTime","maxStopoverTime","allCombinations","current","combo","flightInfo","idx","hours","Math","floor","minutes","toString","padStart","validFlightsBySegment","segmentKey","has","get","filteredFlights","validFlightsForSegment","flightKey","segmentFlights","flatMap","handleCalendarSearch","_record$YDirectAirlin3","_record$JDirectAirlin3","_record$FDirectAirlin3","_record$YDirectAirlin4","_record$JDirectAirlin4","_record$FDirectAirlin4","status","resetDetails","window","clearStopoverInfo","hideCalendar","handleFlightSelect","prevSelected","_newSelected$segmentI","_newSelected$segmentI2","newSelected","isCurrentlySelected","some","call","matches","isSame","keep","isArray","currentCombos","min","every","segIdx","selectedFlight","comboIndex","comboFlight","selected","validFlights","_newSelected$f$segmen","sf","columns"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\n\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const [startDate, setStartDate] = useState(null);\n  const combinationsRef = useRef([]);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n    \n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    \n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n\n  const getAirlineName = (code) => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => \n      r.origin === from && \n      r.destination === to\n    );\n\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    const flights = {};\n    const baseDate = dayjs(data.results?.[0]?.data?.data?.[0]?.DepartsAt || new Date()).format('YYYY-MM-DD');\n    \n    const rawFlights = data.results?.[0]?.data?.data || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    \n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    \n    rawFlights\n      .filter(trip => {\n        // Remove the Z suffix when parsing times since they're actually local times\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n        \n        console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n        console.log(`  Carrier: ${trip.Carriers}`);\n        console.log(`  Cabin: ${trip.Cabin}`);\n        console.log(`  Fare Class: ${trip.FareClass}`);\n        console.log(`  Departs: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n        console.log(`  Arrives: ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\n        \n        // Filter out non-direct flights\n        if (trip.Stops !== 0) {\n          console.log('  ❌ Skipped: Not a direct flight');\n          return false;\n        }\n        \n        // Filter out EK and FZ carriers\n        if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n          console.log('  ❌ Skipped: Excluded carrier');\n          return false;\n        }\n        \n        // Filter AC flights to only accept fare class X or I when fare class is present\n        if (trip.Carriers === 'AC' && trip.FareClass) {\n          console.log(`  Checking AC fare class: ${trip.FareClass}`);\n          if (trip.FareClass !== 'X' && trip.FareClass !== 'I') {\n            console.log(`  ❌ Skipped: AC flight with unsupported fare class ${trip.FareClass} (only X and I allowed)`);\n            return false;\n          }\n          console.log(`  ✓ Accepted: AC flight with supported fare class ${trip.FareClass}`);\n        }\n        \n        // Filter out 2-character FareClass values\n        if (trip.FareClass && trip.FareClass.length === 2) {\n          console.log('  ❌ Skipped: 2-character FareClass');\n          return false;\n        }\n        \n        if (timeWindow) {\n          const isValid = departureTime.isAfter(timeWindow.start) && \n                         departureTime.isBefore(timeWindow.end);\n          \n          if (!isValid) {\n            console.log('  ❌ Skipped: Outside time window');\n            console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n          } else {\n            console.log('  ✓ Accepted: Within time window');\n            console.log(`  ✓ Class: ${trip.Cabin}`);\n          }\n          return isValid;\n        }\n        \n        console.log('  ✓ Accepted: No time window restrictions');\n        console.log(`  ✓ Class: ${trip.Cabin}`);\n        return true;\n      })\n      .forEach(trip => {\n        // Remove the Z suffix when parsing times since they're actually local times\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); \n\n        // Convert CL carrier and flight numbers to LH\n        const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n        const flightNumber = trip.FlightNumbers.startsWith('CL') \n          ? `LH${trip.FlightNumbers.slice(2)}` \n          : trip.FlightNumbers;\n\n        const baseDayjs = dayjs(baseDate);\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n        // If flight already exists, merge cabin classes\n        if (flights[flightNumber]) {\n          console.log(`\\n  Merging cabin classes for flight ${flightNumber}:`);\n          console.log(`  Current classes: Y:${flights[flightNumber].economy}, J:${flights[flightNumber].business}, F:${flights[flightNumber].first}`);\n          console.log(`  Adding class: ${trip.Cabin}`);\n          \n          switch(trip.Cabin.toLowerCase()) {\n            case 'economy':\n              flights[flightNumber].economy = true;\n              break;\n            case 'business':\n              flights[flightNumber].business = true;\n              break;\n            case 'first':\n              flights[flightNumber].first = true;\n              break;\n          }\n          \n          console.log(`  Updated classes: Y:${flights[flightNumber].economy}, J:${flights[flightNumber].business}, F:${flights[flightNumber].first}`);\n          return; // Skip creating new flight entry\n        }\n\n        // Process aircraft name and create new flight entry\n        let aircraftName = trip.Aircraft[0];\n        if (aircraftName && aircraftName === '787  All') {\n          aircraftName = 'Boeing 787-10';\n        }\n\n        console.log(`\\n  Creating new flight entry for ${flightNumber}:`);\n        console.log(`  Initial cabin class: ${trip.Cabin}`);\n\n        flights[flightNumber] = {\n          from: trip.OriginAirport,\n          to: trip.DestinationAirport,\n          flightNumber: flightNumber,\n          airlines: getAirlineName(carrier),\n          aircraft: aircraftName,\n          duration: trip.TotalDuration,\n          departs: departDayDiff > 0 ? \n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \n            departureTime.format('HH:mm'),\n          arrives: arrivalDayDiff > 0 ? \n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \n            arrivalTime.format('HH:mm'),\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n          economy: false,\n          business: false,\n          first: false,\n          isSelected: false,\n          distance: parseInt(trip.Distance) || getSegmentDistance(trip.OriginAirport, trip.DestinationAirport),\n          segmentIndex: segmentIndex\n        };\n        \n        switch(trip.Cabin.toLowerCase()) {\n          case 'economy':\n            flights[flightNumber].economy = true;\n            break;\n          case 'business':\n            flights[flightNumber].business = true;\n            break;\n          case 'first':\n            flights[flightNumber].first = true;\n            break;\n        }\n      });\n    \n    return Object.values(flights);\n  };\n\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && \n           date.isBefore(end.add(1, 'day'));\n  };\n\n  const handleDateSearch = async (currentRoute, stopoverInfo, preserveCalendarData = false, clearSelections = false) => {\n    console.log('\\n=== useFlightDetails handleDateSearch ===');\n    console.log('Current Route:', currentRoute);\n    console.log('Received Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n    console.log('Preserve Calendar Data:', preserveCalendarData);\n    console.log('Clear Selections:', clearSelections);\n    \n    if (!selectedDates || !currentRoute || !apiKey) {\n      console.log('Missing required data:', {\n        selectedDates: !!selectedDates,\n        currentRoute: !!currentRoute,\n        apiKey: !!apiKey\n      });\n      return;\n    }\n    \n    // Always clear flight selections when requested\n    if (clearSelections) {\n      setSelectedFlights({});\n      setSegmentDetails(prevDetails => \n        prevDetails.map(f => ({\n          ...f,\n          isSelected: false,\n          hidden: false\n        }))\n      );\n    }\n    \n    setIsLoadingSegments(true);\n    \n    try {\n      const selectedSegments = [];\n      for (const date of Object.keys(availabilityData)) {\n        if (isDateInRange(date, selectedDates)) {\n          // Preserve distance information when collecting segments\n          const segments = availabilityData[date].map(segment => ({\n            ...segment,\n            distance: parseInt(segment.distance) || getSegmentDistance(segment.route.split('-')[0], segment.route.split('-')[1])\n          }));\n          selectedSegments.push(...segments);\n        }\n      }\n\n      // Log selected segments before filtering\n      console.log('=== Flights Before Combination Filtering ===');\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\n        if (!acc[segment.route]) {\n          acc[segment.route] = [];\n        }\n        acc[segment.route].push(segment);\n        return acc;\n      }, {});\n\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\n        console.log(`\\nRoute ${route}:`);\n        segments.forEach(segment => {\n          console.log(`  ID: ${segment.ID}`);\n          console.log(`  Date: ${segment.date}`);\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\n        });\n      });\n\n      // Continue with existing segment search logic\n      const segmentPromises = selectedSegments.map(segment => {\n        // Create a Set to store unique IDs to fetch\n        const idsToFetch = new Set();\n        \n        // Add the main segment ID\n        idsToFetch.add(segment.ID);\n        \n        // Add lastUpdate IDs if they exist and are different from the main ID\n        if (segment.lastYUpdate && segment.lastYUpdate !== segment.ID) {\n          idsToFetch.add(segment.lastYUpdate);\n        }\n        if (segment.lastJUpdate && segment.lastJUpdate !== segment.ID) {\n          idsToFetch.add(segment.lastJUpdate);\n        }\n        if (segment.lastFUpdate && segment.lastFUpdate !== segment.ID) {\n          idsToFetch.add(segment.lastFUpdate);\n        }\n\n        console.log(`\\nFetching details for segment ${segment.route}:`, {\n          mainId: segment.ID,\n          lastYUpdate: segment.lastYUpdate,\n          lastJUpdate: segment.lastJUpdate,\n          lastFUpdate: segment.lastFUpdate,\n          totalIds: Array.from(idsToFetch)\n        });\n\n        // Return an array of promises for each ID\n        return Array.from(idsToFetch).map(id => \n          fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${id}`, {\n            headers: {\n              'accept': 'application/json',\n              'Partner-Authorization': apiKey,\n              'Segment-ID': id\n            }\n          })\n        );\n      });\n\n      // Flatten the array of arrays of promises\n      const allSegmentPromises = segmentPromises.flat();\n\n      // Only fetch availability data if we're not preserving it\n      if (!preserveCalendarData) {\n        const routeString = currentRoute.join('-');\n        \n        // Add startDate parameter if available\n        let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n        if (startDate) {\n          const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n          url += `?startDate=${formattedDate}`;\n        }\n        \n        const availabilityResponse = await fetch(\n          url,\n          {\n            method: 'GET',\n            headers: {\n              'accept': 'application/json',\n              'Partner-Authorization': apiKey\n            }\n          }\n        );\n\n        if (availabilityResponse.ok) {\n          const availabilityResult = await availabilityResponse.json();\n          \n          // Process availability data into a more usable format\n          const processedAvailability = {};\n          \n          // Group records by date and route\n          const groupedRecords = {};\n          availabilityResult.forEach(item => {\n            const key = `${item.date}_${item.originAirport}-${item.destinationAirport}`;\n            if (!groupedRecords[key]) {\n              groupedRecords[key] = [];\n            }\n            groupedRecords[key].push(item);\n          });\n\n          // Process each group of records\n          Object.values(groupedRecords).forEach(records => {\n            // Sort records by source priority: united -> velocity -> lufthansa -> aeroplan\n            const sourcePriority = { united: 0, velocity: 1, lufthansa: 2, aeroplan: 3 };\n            records.sort((a, b) => sourcePriority[a.source] - sourcePriority[b.source]);\n\n            // Initialize merged record from the first record\n            const mergedRecord = { ...records[0] };\n            const dateKey = mergedRecord.date;\n\n            // Initialize Direct flags as false\n            mergedRecord.YDirect = false;\n            mergedRecord.JDirect = false;\n            mergedRecord.FDirect = false;\n\n            // Process airline lists for each cabin class\n            const processAirlines = (airlineStr) => {\n              if (!airlineStr) return '';\n              return airlineStr.split(',').map(a => a.trim()).filter(Boolean).join(',');\n            };\n\n            // Filter airlines based on source and update Direct flags using OR operation\n            records.forEach(record => {\n              // Remove specific airlines based on source\n              if (record.source === 'lufthansa') {\n                record.YDirectAirlines = processAirlines(record.YDirectAirlines?.replace(/\\bLH\\b/g, ''));\n                record.JDirectAirlines = processAirlines(record.JDirectAirlines?.replace(/\\bLH\\b/g, ''));\n                record.FDirectAirlines = processAirlines(record.FDirectAirlines?.replace(/\\bLH\\b/g, ''));\n              } else if (record.source === 'united') {\n                record.YDirectAirlines = processAirlines(record.YDirectAirlines?.replace(/\\bUA\\b/g, ''));\n                record.JDirectAirlines = processAirlines(record.JDirectAirlines?.replace(/\\bUA\\b/g, ''));\n                record.FDirectAirlines = processAirlines(record.FDirectAirlines?.replace(/\\bUA\\b/g, ''));\n              }\n\n              // Update Direct flags based on remaining airlines\n              record.YDirect = !!record.YDirectAirlines;\n              record.JDirect = !!record.JDirectAirlines;\n              record.FDirect = !!record.FDirectAirlines;\n\n              // Update merged record's Direct flags using OR operation\n              mergedRecord.YDirect = mergedRecord.YDirect || record.YDirect;\n              mergedRecord.JDirect = mergedRecord.JDirect || record.JDirect;\n              mergedRecord.FDirect = mergedRecord.FDirect || record.FDirect;\n\n              console.log(`\\nProcessed ${record.source} record:`, {\n                YDirectAirlines: record.YDirectAirlines,\n                JDirectAirlines: record.JDirectAirlines,\n                FDirectAirlines: record.FDirectAirlines,\n                YDirect: record.YDirect,\n                JDirect: record.JDirect,\n                FDirect: record.FDirect,\n                mergedYDirect: mergedRecord.YDirect,\n                mergedJDirect: mergedRecord.JDirect,\n                mergedFDirect: mergedRecord.FDirect\n              });\n            });\n\n            // Merge airlines across sources\n            const mergedAirlines = {\n              Y: new Set(),\n              J: new Set(),\n              F: new Set()\n            };\n\n            let lastYUpdate = null;\n            let lastJUpdate = null;\n            let lastFUpdate = null;\n\n            records.forEach(record => {\n              const addAirlines = (airlineStr, set) => {\n                if (airlineStr) {\n                  airlineStr.split(',').forEach(airline => {\n                    const trimmed = airline.trim();\n                    if (trimmed) {\n                      console.log(`Adding airline ${trimmed} to set (current size: ${set.size})`);\n                      set.add(trimmed);\n                    }\n                  });\n                }\n              };\n\n              if (record.YDirect && record.YDirectAirlines) {\n                const prevSize = mergedAirlines.Y.size;\n                console.log(`\\nProcessing Y class from ${record.source}:`, {\n                  airlines: record.YDirectAirlines,\n                  currentSet: Array.from(mergedAirlines.Y)\n                });\n                addAirlines(record.YDirectAirlines, mergedAirlines.Y);\n                if (mergedAirlines.Y.size > prevSize) {\n                  console.log(`New Y airlines added, updating lastYUpdate to ${record.ID}`);\n                  lastYUpdate = record.ID;\n                }\n              }\n              if (record.JDirect && record.JDirectAirlines) {\n                const prevSize = mergedAirlines.J.size;\n                console.log(`\\nProcessing J class from ${record.source}:`, {\n                  airlines: record.JDirectAirlines,\n                  currentSet: Array.from(mergedAirlines.J)\n                });\n                addAirlines(record.JDirectAirlines, mergedAirlines.J);\n                if (mergedAirlines.J.size > prevSize) {\n                  console.log(`New J airlines added, updating lastJUpdate to ${record.ID}`);\n                  lastJUpdate = record.ID;\n                }\n              }\n              if (record.FDirect && record.FDirectAirlines) {\n                const prevSize = mergedAirlines.F.size;\n                console.log(`\\nProcessing F class from ${record.source}:`, {\n                  airlines: record.FDirectAirlines,\n                  currentSet: Array.from(mergedAirlines.F)\n                });\n                addAirlines(record.FDirectAirlines, mergedAirlines.F);\n                if (mergedAirlines.F.size > prevSize) {\n                  console.log(`New F airlines added, updating lastFUpdate to ${record.ID}`);\n                  lastFUpdate = record.ID;\n                }\n              }\n            });\n\n            // Update merged record\n            mergedRecord.YDirectAirlines = Array.from(mergedAirlines.Y).join(',');\n            mergedRecord.JDirectAirlines = Array.from(mergedAirlines.J).join(',');\n            mergedRecord.FDirectAirlines = Array.from(mergedAirlines.F).join(',');\n            mergedRecord.YDirect = mergedAirlines.Y.size > 0;\n            mergedRecord.JDirect = mergedAirlines.J.size > 0;\n            mergedRecord.FDirect = mergedAirlines.F.size > 0;\n            mergedRecord.lastYUpdate = lastYUpdate;\n            mergedRecord.lastJUpdate = lastJUpdate;\n            mergedRecord.lastFUpdate = lastFUpdate;\n\n            console.log('\\nMerged record:', {\n              YDirectAirlines: mergedRecord.YDirectAirlines,\n              JDirectAirlines: mergedRecord.JDirectAirlines,\n              FDirectAirlines: mergedRecord.FDirectAirlines,\n              YDirect: mergedRecord.YDirect,\n              JDirect: mergedRecord.JDirect,\n              FDirect: mergedRecord.FDirect,\n              lastYUpdate,\n              lastJUpdate,\n              lastFUpdate\n            });\n\n            if (!processedAvailability[dateKey]) {\n              processedAvailability[dateKey] = [];\n            }\n            \n            processedAvailability[dateKey].push({\n              route: `${mergedRecord.originAirport}-${mergedRecord.destinationAirport}`,\n              classes: {\n                Y: mergedRecord.YDirect,\n                J: mergedRecord.JDirect,\n                F: mergedRecord.FDirect\n              },\n              ID: mergedRecord.ID,\n              lastYUpdate: mergedRecord.lastYUpdate,\n              lastJUpdate: mergedRecord.lastJUpdate,\n              lastFUpdate: mergedRecord.lastFUpdate,\n              distance: mergedRecord.distance,\n              date: mergedRecord.date,\n              Source: mergedRecord.source,\n              YDirectAirlines: mergedRecord.YDirectAirlines,\n              JDirectAirlines: mergedRecord.JDirectAirlines,\n              FDirectAirlines: mergedRecord.FDirectAirlines\n            });\n          });\n          \n          setAvailabilityData(processedAvailability);\n        }\n      }\n\n      // Continue with existing segment search logic\n      const newProcessedSegments = [];\n      const [startDate, endDate] = selectedDates;\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\n      \n      console.log('\\n=== Processing Segments with Stopover ===');\n      if (stopoverInfo) {\n        console.log('Stopover Details:', {\n          airport: stopoverInfo.airport,\n          days: stopoverInfo.days\n        });\n      }\n\n      console.log('\\n=== Processing Segments ===');\n      console.log('Date Range:', {\n        start: dayjs(startDate).format('YYYY-MM-DD'),\n        end: dayjs(endDate).format('YYYY-MM-DD')\n      });\n      \n      try {\n        // Process all segments\n        for (let i = 0; i < currentRoute.length - 1; i++) {\n          const from = currentRoute[i];\n          const to = currentRoute[i + 1];\n          \n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n          \n          let timeWindow = null;\n          const dates = new Set();\n\n          if (i === 0) {\n            // First segment - use full date range\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            \n            console.log('\\n=== First Segment Details ===');\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n            \n            // Get all dates in range\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n          } else {\n            // Handle subsequent segments with stopover consideration\n            const prevSegment = newProcessedSegments[i - 1];\n            \n            if (!prevSegment || prevSegment.flights.length === 0) {\n              // Use full date range if no previous flights\n              const startDay = dayjs(startDate).startOf('day');\n              const endDay = dayjs(endDate).endOf('day');\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('No previous flights found. Using full date range for this segment');\n            } else {\n              // Calculate time window from previous segment's flights\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n              \n              console.log('\\n=== Processing Subsequent Segment ===');\n              console.log('Segment:', `${currentRoute[i-1]}-${currentRoute[i]}`);\n              console.log('Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n              console.log('Current Airport:', currentRoute[i]);\n              console.log('Previous Airport:', currentRoute[i-1]);\n              console.log('Is Stopover Airport:', stopoverInfo && currentRoute[i] === stopoverInfo.airport);\n              \n              // Adjust time window based on stopover\n              if (stopoverInfo && currentRoute[i] === stopoverInfo.airport) {\n                console.log(`\\nApplying stopover of ${stopoverInfo.days} days at ${stopoverInfo.airport}`);\n                timeWindow = {\n                  start: arrivals[0].add(stopoverInfo.days, 'days'),\n                  end: arrivals[arrivals.length - 1].add(stopoverInfo.days, 'days').add(24, 'hours'),\n                  isStopover: true,\n                  stopoverDays: stopoverInfo.days\n                };\n              } else {\n                timeWindow = {\n                  start: arrivals[0],\n                  end: arrivals[arrivals.length - 1].add(24, 'hours'),\n                  isStopover: false,\n                  stopoverDays: 0\n                };\n              }\n              \n              console.log('\\nTime Window:', {\n                start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n                end: timeWindow.end.format('YYYY-MM-DD HH:mm'),\n                isStopover: timeWindow.isStopover,\n                stopoverDays: timeWindow.stopoverDays\n              });\n\n              // Get dates for time window\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n            }\n          }\n\n          // Process each date\n          const allFlights = [];\n          for (const date of dates) {\n            // Find route from availability data instead\n            const availableRoutes = availabilityData[date] || [];\n            const route = availableRoutes.find(r => \n              r.route === `${from}-${to}`\n            );\n\n            if (!route) {\n              console.log(`No route found for ${from}-${to} on ${date}`);\n              continue;\n            }\n\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\n            console.log(`Main Segment ID: ${route.ID}`);\n            console.log(`Additional IDs:`, {\n              Y: route.lastYUpdate,\n              J: route.lastJUpdate,\n              F: route.lastFUpdate\n            });\n            \n            const idsToFetch = new Set([\n              route.ID,\n              route.lastYUpdate,\n              route.lastJUpdate,\n              route.lastFUpdate\n            ].filter(Boolean));\n\n            try {\n              const responses = await Promise.all(\n                Array.from(idsToFetch).map(id => \n                  fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${id}`, {\n                    method: 'GET',\n                    headers: {\n                      'accept': 'application/json',\n                      'Partner-Authorization': apiKey,\n                      'Segment-ID': id\n                    }\n                  })\n                )\n              );\n\n              const validResponses = await Promise.all(\n                responses\n                  .filter(response => response.ok)\n                  .map(response => response.json())\n              );\n\n              // Process each response and merge the results\n              const processedFlights = validResponses\n                .map(data => processFlightData(data, timeWindow, i))\n                .flat();\n\n              console.log('\\nMerging duplicate flights:');\n              // Remove duplicates based on flight number and departure time while merging cabin classes\n              const uniqueFlights = Array.from(\n                new Map(\n                  processedFlights.map(flight => {\n                    const key = `${flight.flightNumber}_${flight.DepartsAt}`;\n                    const existingFlight = processedFlights.find(f => \n                      `${f.flightNumber}_${f.DepartsAt}` === key && f !== flight\n                    );\n                    if (existingFlight) {\n                      console.log(`\\n  Found duplicate flight: ${flight.flightNumber}`);\n                      console.log(`  Flight 1 classes: Y:${flight.economy}, J:${flight.business}, F:${flight.first}`);\n                      console.log(`  Flight 2 classes: Y:${existingFlight.economy}, J:${existingFlight.business}, F:${existingFlight.first}`);\n                      const mergedFlight = {\n                        ...flight,\n                        economy: flight.economy || existingFlight.economy,\n                        business: flight.business || existingFlight.business,\n                        first: flight.first || existingFlight.first\n                      };\n                      console.log(`  Merged classes: Y:${mergedFlight.economy}, J:${mergedFlight.business}, F:${mergedFlight.first}`);\n                      return [key, mergedFlight];\n                    }\n                    return [key, flight];\n                  })\n                ).values()\n              );\n\n              console.log(`\\n✓ Found ${uniqueFlights.length} unique valid flights from ${idsToFetch.size} sources`);\n              allFlights.push(...uniqueFlights);\n            } catch (error) {\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\n            }\n          }\n\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n          // Store searched dates in segment data\n          newProcessedSegments[i] = {\n            route: `${from}-${to}`,\n            flights: allFlights,\n            searchDates: dates, // Add this field\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n          };\n\n          // Only break if previous segment had flights but current segment found none\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i-1].flights.length > 0) {\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n            console.log('Skipping remaining segments');\n            break;\n          }\n        }\n\n        // After processing all segments\n        if (newProcessedSegments.length >= 1) {\n          // Log all flights found by segment\n          console.log('\\n=== All Flights Found ===');\n          newProcessedSegments.forEach((segment, index) => {\n            if (segment.flights && segment.flights.length > 0) {\n              console.log(`\\nSegment ${index} (${segment.route}):`);\n              segment.flights\n                .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\n                .forEach(flight => {\n                  const classes = [];\n                  if (flight.economy) classes.push('Y');\n                  if (flight.business) classes.push('J');\n                  if (flight.first) classes.push('F');\n                  console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft} [${classes.join(',')}]`);\n                });\n            } else {\n              console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\n            }\n          });\n\n          console.log('\\n=== Flight Combinations ===');\n          \n          // Find the first and last segments with flights\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(\n            segment => segment.flights && segment.flights.length > 0\n          );\n          \n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(\n            segment => segment.flights && segment.flights.length > 0\n          );\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n          // Find all valid combinations recursively\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n            // If we've reached beyond the last valid segment, this is a valid combination\n            if (segmentIndex > lastSegmentIndex) {\n              return [currentPath];\n            }\n\n            const validCombos = [];\n            const currentSegment = newProcessedSegments[segmentIndex];\n\n            // If no flights in current segment, try next segment\n            if (!currentSegment?.flights || currentSegment.flights.length === 0) {\n              return findValidCombinations(currentPath, segmentIndex + 1);\n            }\n\n            // For first segment, try all flights\n            if (currentPath.length === 0) {\n              currentSegment.flights.forEach(flight => {\n                const combos = findValidCombinations([flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              });\n            } else {\n              // For subsequent segments, check connection times\n              const prevFlight = currentPath[currentPath.length - 1];\n              const prevArrival = dayjs(prevFlight.ArrivesAt);\n              const isStopoverPoint = stopoverInfo && \n                                     currentRoute[segmentIndex] === stopoverInfo.airport;\n\n              currentSegment.flights.forEach(flight => {\n                const departure = dayjs(flight.DepartsAt);\n                const connectionTime = departure.diff(prevArrival, 'minutes');\n\n                if (isStopoverPoint) {\n                  // For stopover points, connection must be within stopover day window\n                  const minStopoverTime = stopoverInfo.days * 24 * 60; // Convert days to minutes\n                  const maxStopoverTime = (stopoverInfo.days + 1) * 24 * 60; // Add one more day for flexibility\n                  \n                  if (connectionTime >= minStopoverTime && connectionTime <= maxStopoverTime) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                } else {\n                  // For normal connections, 30 minutes to 24 hours\n                  if (connectionTime >= 30 && connectionTime <= 24 * 60) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                }\n              });\n            }\n\n            return validCombos;\n          };\n\n          // Get all valid combinations using the new function\n          const allCombinations = findValidCombinations();\n\n          // Store combinations in ref immediately after finding them\n          combinationsRef.current = allCombinations;\n\n          // Log the combinations\n          console.log('\\n=== Valid Combinations ===');\n          if (allCombinations.length === 0) {\n            console.log('No valid combinations found for any segment range');\n          } else {\n            console.log(`Found ${allCombinations.length} valid combinations`);\n            allCombinations.forEach(combo => {\n              const flightInfo = combo.map((flight, idx) => {\n                if (idx === 0) {\n                  return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n                }\n                \n                const prevFlight = combo[idx - 1];\n                const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n                const hours = Math.floor(connectionTime / 60);\n                const minutes = connectionTime % 60;\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n              });\n              \n              console.log(flightInfo.join(' → '));\n            });\n          }\n\n          // Create a map of valid flights by segment\n          const validFlightsBySegment = new Map();\n          allCombinations.forEach(combo => {\n            combo.forEach(flight => {\n              const segmentKey = flight.segmentIndex;\n              if (!validFlightsBySegment.has(segmentKey)) {\n                validFlightsBySegment.set(segmentKey, new Set());\n              }\n              validFlightsBySegment.get(segmentKey).add(\n                `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`\n              );\n            });\n          });\n\n          // Filter and process flights\n          const filteredFlights = [];\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segment = newProcessedSegments[i];\n            if (!segment || !segment.flights) continue;\n\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n            \n            // Add valid flights from this segment\n            segment.flights.forEach(flight => {\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n              if (validFlightsForSegment.has(flightKey)) {\n                filteredFlights.push({\n                  ...flight,\n                  isSelected: false,\n                  segmentIndex: i\n                });\n              }\n            });\n          }\n\n          setSegmentDetails(filteredFlights);\n          setValidCombinations(allCombinations);\n\n          // Log flights by segment\n          console.log('\\n=== Flights By Segment ===');\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n            if (segmentFlights.length > 0) {\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n              segmentFlights\n                .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\n                .forEach(flight => {\n                  console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n                });\n            }\n          }\n          \n          console.log('\\n======================');\n        } else {\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => \n            segment.flights.map(flight => ({\n              ...flight,\n              isSelected: false,\n              segmentIndex: index\n            }))\n          ));\n          setValidCombinations([]);\n        }\n      } catch (error) {\n        console.error('Error processing segments:', error);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n\n  const handleCalendarSearch = async (currentRoute) => {\n    if (!currentRoute || !apiKey) return;\n    \n    setIsLoadingAvailability(true);\n    \n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n      \n      // Add startDate parameter if available\n      let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n      if (startDate) {\n        const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n        url += `?startDate=${formattedDate}`;\n        console.log(`Using start date: ${formattedDate} for availability search`);\n      }\n      \n      console.log(`Fetching availability data from: ${url}`);\n      \n      const availabilityResponse = await fetch(\n        url,\n        {\n          method: 'GET',\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        }\n      );\n\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n        console.log(`Received ${availabilityResult.length} availability records`);\n        \n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        \n        // Group records by date and route\n        const groupedRecords = {};\n        availabilityResult.forEach(item => {\n          const key = `${item.date}_${item.originAirport}-${item.destinationAirport}`;\n          if (!groupedRecords[key]) {\n            groupedRecords[key] = [];\n          }\n          groupedRecords[key].push(item);\n        });\n\n        // Process each group of records\n        Object.values(groupedRecords).forEach(records => {\n          // Sort records by source priority: united -> velocity -> lufthansa -> aeroplan\n          const sourcePriority = { united: 0, velocity: 1, lufthansa: 2, aeroplan: 3 };\n          records.sort((a, b) => sourcePriority[a.source] - sourcePriority[b.source]);\n\n          // Initialize merged record from the first record\n          const mergedRecord = { ...records[0] };\n          const dateKey = mergedRecord.date;\n\n          // Initialize Direct flags as false\n          mergedRecord.YDirect = false;\n          mergedRecord.JDirect = false;\n          mergedRecord.FDirect = false;\n\n          // Process airline lists for each cabin class\n          const processAirlines = (airlineStr) => {\n            if (!airlineStr) return '';\n            return airlineStr.split(',').map(a => a.trim()).filter(Boolean).join(',');\n          };\n\n          // Filter airlines based on source and update Direct flags using OR operation\n          records.forEach(record => {\n            // Remove specific airlines based on source\n            if (record.source === 'lufthansa') {\n              record.YDirectAirlines = processAirlines(record.YDirectAirlines?.replace(/\\bLH\\b/g, ''));\n              record.JDirectAirlines = processAirlines(record.JDirectAirlines?.replace(/\\bLH\\b/g, ''));\n              record.FDirectAirlines = processAirlines(record.FDirectAirlines?.replace(/\\bLH\\b/g, ''));\n            } else if (record.source === 'united') {\n              record.YDirectAirlines = processAirlines(record.YDirectAirlines?.replace(/\\bUA\\b/g, ''));\n              record.JDirectAirlines = processAirlines(record.JDirectAirlines?.replace(/\\bUA\\b/g, ''));\n              record.FDirectAirlines = processAirlines(record.FDirectAirlines?.replace(/\\bUA\\b/g, ''));\n            }\n\n            // Update Direct flags based on remaining airlines\n            record.YDirect = !!record.YDirectAirlines;\n            record.JDirect = !!record.JDirectAirlines;\n            record.FDirect = !!record.FDirectAirlines;\n\n            // Update merged record's Direct flags using OR operation\n            mergedRecord.YDirect = mergedRecord.YDirect || record.YDirect;\n            mergedRecord.JDirect = mergedRecord.JDirect || record.JDirect;\n            mergedRecord.FDirect = mergedRecord.FDirect || record.FDirect;\n\n            console.log(`\\nProcessed ${record.source} record:`, {\n              YDirectAirlines: record.YDirectAirlines,\n              JDirectAirlines: record.JDirectAirlines,\n              FDirectAirlines: record.FDirectAirlines,\n              YDirect: record.YDirect,\n              JDirect: record.JDirect,\n              FDirect: record.FDirect,\n              mergedYDirect: mergedRecord.YDirect,\n              mergedJDirect: mergedRecord.JDirect,\n              mergedFDirect: mergedRecord.FDirect\n            });\n          });\n\n          // Merge airlines across sources\n          const mergedAirlines = {\n            Y: new Set(),\n            J: new Set(),\n            F: new Set()\n          };\n\n          let lastYUpdate = null;\n          let lastJUpdate = null;\n          let lastFUpdate = null;\n\n          records.forEach(record => {\n            const addAirlines = (airlineStr, set) => {\n              if (airlineStr) {\n                airlineStr.split(',').forEach(airline => {\n                  const trimmed = airline.trim();\n                  if (trimmed) {\n                    console.log(`Adding airline ${trimmed} to set (current size: ${set.size})`);\n                    set.add(trimmed);\n                  }\n                });\n              }\n            };\n\n            if (record.YDirect && record.YDirectAirlines) {\n              const prevSize = mergedAirlines.Y.size;\n              console.log(`\\nProcessing Y class from ${record.source}:`, {\n                airlines: record.YDirectAirlines,\n                currentSet: Array.from(mergedAirlines.Y)\n              });\n              addAirlines(record.YDirectAirlines, mergedAirlines.Y);\n              if (mergedAirlines.Y.size > prevSize) {\n                console.log(`New Y airlines added, updating lastYUpdate to ${record.ID}`);\n                lastYUpdate = record.ID;\n              }\n            }\n            if (record.JDirect && record.JDirectAirlines) {\n              const prevSize = mergedAirlines.J.size;\n              console.log(`\\nProcessing J class from ${record.source}:`, {\n                airlines: record.JDirectAirlines,\n                currentSet: Array.from(mergedAirlines.J)\n              });\n              addAirlines(record.JDirectAirlines, mergedAirlines.J);\n              if (mergedAirlines.J.size > prevSize) {\n                console.log(`New J airlines added, updating lastJUpdate to ${record.ID}`);\n                lastJUpdate = record.ID;\n              }\n            }\n            if (record.FDirect && record.FDirectAirlines) {\n              const prevSize = mergedAirlines.F.size;\n              console.log(`\\nProcessing F class from ${record.source}:`, {\n                airlines: record.FDirectAirlines,\n                currentSet: Array.from(mergedAirlines.F)\n              });\n              addAirlines(record.FDirectAirlines, mergedAirlines.F);\n              if (mergedAirlines.F.size > prevSize) {\n                console.log(`New F airlines added, updating lastFUpdate to ${record.ID}`);\n                lastFUpdate = record.ID;\n              }\n            }\n          });\n\n          // Update merged record\n          mergedRecord.YDirectAirlines = Array.from(mergedAirlines.Y).join(',');\n          mergedRecord.JDirectAirlines = Array.from(mergedAirlines.J).join(',');\n          mergedRecord.FDirectAirlines = Array.from(mergedAirlines.F).join(',');\n          mergedRecord.YDirect = mergedAirlines.Y.size > 0;\n          mergedRecord.JDirect = mergedAirlines.J.size > 0;\n          mergedRecord.FDirect = mergedAirlines.F.size > 0;\n          mergedRecord.lastYUpdate = lastYUpdate;\n          mergedRecord.lastJUpdate = lastJUpdate;\n          mergedRecord.lastFUpdate = lastFUpdate;\n\n          console.log('\\nMerged record:', {\n            YDirectAirlines: mergedRecord.YDirectAirlines,\n            JDirectAirlines: mergedRecord.JDirectAirlines,\n            FDirectAirlines: mergedRecord.FDirectAirlines,\n            YDirect: mergedRecord.YDirect,\n            JDirect: mergedRecord.JDirect,\n            FDirect: mergedRecord.FDirect,\n            lastYUpdate,\n            lastJUpdate,\n            lastFUpdate\n          });\n\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          \n          processedAvailability[dateKey].push({\n            route: `${mergedRecord.originAirport}-${mergedRecord.destinationAirport}`,\n            classes: {\n              Y: mergedRecord.YDirect,\n              J: mergedRecord.JDirect,\n              F: mergedRecord.FDirect\n            },\n            ID: mergedRecord.ID,\n            lastYUpdate: mergedRecord.lastYUpdate,\n            lastJUpdate: mergedRecord.lastJUpdate,\n            lastFUpdate: mergedRecord.lastFUpdate,\n            distance: mergedRecord.distance,\n            date: mergedRecord.date,\n            Source: mergedRecord.source,\n            YDirectAirlines: mergedRecord.YDirectAirlines,\n            JDirectAirlines: mergedRecord.JDirectAirlines,\n            FDirectAirlines: mergedRecord.FDirectAirlines\n          });\n        });\n        \n        setAvailabilityData(processedAvailability);\n      } else {\n        console.error('Failed to fetch availability data:', availabilityResponse.status);\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n\n  const resetDetails = () => {\n    // Clear all data states\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n    setStartDate(null); // Clear the start date\n    \n    // Note: We don't clear selectedDates here because we do it explicitly in the modal close handler\n    \n    // Reset the combinations reference\n    combinationsRef.current = [];\n    \n    // Clear any stopover information in the FlightAvailabilityCalendar\n    if (window.clearStopoverInfo && typeof window.clearStopoverInfo === 'function') {\n      window.clearStopoverInfo();\n    }\n    \n    // Clear calendar display\n    if (window.hideCalendar && typeof window.hideCalendar === 'function') {\n      window.hideCalendar();\n    }\n  };\n\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    \n    setSelectedFlights(prevSelected => {\n      const newSelected = { ...prevSelected };\n      \n      // Check if this exact flight is already selected\n      const isCurrentlySelected = newSelected[segmentIndex]?.some?.(f => {\n        const matches = f.flightNumber === flight.flightNumber && \n                       dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && \n                        dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Log all current selections\n      console.log('\\nALL CURRENT SELECTIONS:');\n      Object.entries(newSelected).forEach(([idx, flights]) => {\n        if (Array.isArray(flights)) {\n          flights.forEach(f => {\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          });\n        }\n      });\n\n      // Use combinations from the ref\n      const currentCombos = combinationsRef.current;\n      const firstSegmentWithFlights = Math.min(...segmentDetails\n        .filter(f => !f.hidden)\n        .map(f => f.segmentIndex));\n      \n      console.log('\\nChecking combinations:', currentCombos.map(combo => \n        combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')\n      ));\n\n      // Find combinations that contain the selected flight(s)\n      const validCombos = currentCombos.filter(combo => {\n        // If no selections, all combinations are valid\n        if (Object.keys(newSelected).length === 0) return true;\n\n        // Check if this combination contains all selected flights\n        const isValid = Object.entries(newSelected).every(([segIdx, flights]) => {\n          const selectedFlight = flights[0];\n          // Adjust index based on first segment with flights\n          const comboIndex = parseInt(segIdx, 10) - firstSegmentWithFlights;\n          const comboFlight = combo[comboIndex];\n          \n          const matches = comboFlight?.flightNumber === selectedFlight.flightNumber &&\n                         dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm') === \n                         dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm');\n          \n          console.log(`Checking combo flight in segment ${segIdx}:`, {\n            selected: `${selectedFlight.flightNumber} (${dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm')})`,\n            combo: comboFlight ? `${comboFlight.flightNumber} (${dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm')})` : 'none',\n            comboIndex,\n            matches\n          });\n          \n          return matches;\n        });\n\n        return isValid;\n      });\n\n      console.log('\\nValid combinations:', validCombos.map(combo => \n        combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')\n      ));\n\n      // Create a set of all flights that appear in valid combinations\n      const validFlights = new Set();\n      validCombos.forEach(combo => {\n        combo.forEach(f => {\n          if (!f) return;\n          const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          validFlights.add(key);\n        });\n      });\n\n      // Update visibility\n      setSegmentDetails(prevDetails => \n        prevDetails.map(f => {\n          const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          const isSelected = newSelected[f.segmentIndex]?.some(sf => \n            sf.flightNumber === f.flightNumber && \n            dayjs(sf.DepartsAt).format('MM-DD HH:mm') === dayjs(f.DepartsAt).format('MM-DD HH:mm')\n          ) || false;\n\n          return {\n            ...f,\n            isSelected,\n            hidden: Object.keys(newSelected).length > 0 && !isSelected && !validFlights.has(flightKey)\n          };\n        })\n      );\n\n      return newSelected;\n    });\n  };\n\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => \n        combo.map((f, idx) => ({\n          ...f,\n          isSelected: false,\n          segmentIndex: idx\n        }))\n      );\n\n      const uniqueFlights = Array.from(\n        new Map(allFlights.map(f => [\n          `${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`,\n          f\n        ])).values()\n      );\n\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n    startDate,\n    setStartDate,\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}