{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport routeDetails from '../../../data/route_details.json';\nimport airlines from '../../../data/airlines';\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(null);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\n  const [segmentDetails, setSegmentDetails] = useState([]);\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\n  const [selectedFlights, setSelectedFlights] = useState({});\n  const [validCombinations, setValidCombinations] = useState([]);\n  const [processedSegments, setProcessedSegments] = useState([]);\n  const [originalFlights, setOriginalFlights] = useState(null);\n  const [originalCombinations] = useState(initialCombinations);\n  const [processedFlights, setProcessedFlights] = useState(null);\n  const [initialFlights, setInitialFlights] = useState(null);\n  const [availabilityData, setAvailabilityData] = useState({});\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\n  const [startDate, setStartDate] = useState(null);\n  const combinationsRef = useRef([]);\n\n  // Update localStorage when apiKey changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('flightSearchApiKey', apiKey);\n    }\n  }, [apiKey]);\n  const formatTime = (dateStr, baseDate) => {\n    const date = dayjs(dateStr);\n    const base = dayjs(baseDate);\n\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\n    const timeStr = date.format('HH:mm');\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\n  };\n  const getAirlineName = code => {\n    const airline = airlines.find(a => a.value === code);\n    return airline ? airline.label.replace(` (${code})`, '') : code;\n  };\n  const getSegmentDistance = (from, to) => {\n    const route = routeDetails.find(r => r.origin === from && r.destination === to);\n    if (!route) {\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\n      return 1000;\n    }\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\n    return route.distance;\n  };\n  const processFlightData = (data, timeWindow, segmentIndex) => {\n    var _data$results, _data$results$, _data$results$$data, _data$results$$data$d, _data$results$$data$d2, _data$results2, _data$results2$, _data$results2$$data;\n    const flights = {};\n    const baseDate = dayjs(((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$data = _data$results$.data) === null || _data$results$$data === void 0 ? void 0 : (_data$results$$data$d = _data$results$$data.data) === null || _data$results$$data$d === void 0 ? void 0 : (_data$results$$data$d2 = _data$results$$data$d[0]) === null || _data$results$$data$d2 === void 0 ? void 0 : _data$results$$data$d2.DepartsAt) || new Date()).format('YYYY-MM-DD');\n    const rawFlights = ((_data$results2 = data.results) === null || _data$results2 === void 0 ? void 0 : (_data$results2$ = _data$results2[0]) === null || _data$results2$ === void 0 ? void 0 : (_data$results2$$data = _data$results2$.data) === null || _data$results2$$data === void 0 ? void 0 : _data$results2$$data.data) || [];\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\n    if (timeWindow) {\n      console.log('Time Window:', {\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\n      });\n    }\n    rawFlights.filter(trip => {\n      // Remove the Z suffix when parsing times since they're actually local times\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n      console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\n      console.log(`  Carrier: ${trip.Carriers}`);\n      console.log(`  Departs: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\n      console.log(`  Arrives: ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\n\n      // Filter out non-direct flights\n      if (trip.Stops !== 0) {\n        console.log('  ❌ Skipped: Not a direct flight');\n        return false;\n      }\n\n      // Filter out EK and FZ carriers\n      if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\n        console.log('  ❌ Skipped: Excluded carrier');\n        return false;\n      }\n\n      // Filter out 2-character FareClass values\n      if (trip.FareClass && trip.FareClass.length === 2) {\n        console.log('  ❌ Skipped: 2-character FareClass');\n        return false;\n      }\n      if (timeWindow) {\n        const isValid = departureTime.isAfter(timeWindow.start) && departureTime.isBefore(timeWindow.end);\n        if (!isValid) {\n          console.log('  ❌ Skipped: Outside time window');\n          console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\n        } else {\n          console.log('  ✓ Accepted: Within time window');\n        }\n        return isValid;\n      }\n      console.log('  ✓ Accepted: No time window restrictions');\n      return true;\n    }).forEach(trip => {\n      // Remove the Z suffix when parsing times since they're actually local times\n      const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\n      const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\n\n      // Convert CL carrier and flight numbers to LH\n      const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\n      const flightNumber = trip.FlightNumbers.startsWith('CL') ? `LH${trip.FlightNumbers.slice(2)}` : trip.FlightNumbers;\n      const baseDayjs = dayjs(baseDate);\n      const departDayDiff = departureTime.diff(baseDayjs, 'day');\n      const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\n\n      // If flight already exists, merge cabin classes\n      if (flights[flightNumber]) {\n        switch (trip.Cabin.toLowerCase()) {\n          case 'economy':\n            flights[flightNumber].economy = true;\n            break;\n          case 'business':\n            flights[flightNumber].business = true;\n            break;\n          case 'first':\n            flights[flightNumber].first = true;\n            break;\n        }\n        return; // Skip creating new flight entry\n      }\n\n      // Process aircraft name and create new flight entry\n      let aircraftName = trip.Aircraft[0];\n      if (aircraftName && aircraftName === '787  All') {\n        aircraftName = 'Boeing 787-10';\n      }\n      flights[flightNumber] = {\n        from: trip.OriginAirport,\n        to: trip.DestinationAirport,\n        flightNumber: flightNumber,\n        airlines: getAirlineName(carrier),\n        aircraft: aircraftName,\n        duration: trip.TotalDuration,\n        departs: departDayDiff > 0 ? `${departureTime.format('HH:mm')} (+${departDayDiff})` : departureTime.format('HH:mm'),\n        arrives: arrivalDayDiff > 0 ? `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : arrivalTime.format('HH:mm'),\n        DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\n        ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\n        economy: false,\n        business: false,\n        first: false,\n        isSelected: false,\n        distance: parseInt(trip.Distance) || getSegmentDistance(trip.OriginAirport, trip.DestinationAirport),\n        segmentIndex: segmentIndex\n      };\n      switch (trip.Cabin.toLowerCase()) {\n        case 'economy':\n          flights[flightNumber].economy = true;\n          break;\n        case 'business':\n          flights[flightNumber].business = true;\n          break;\n        case 'first':\n          flights[flightNumber].first = true;\n          break;\n      }\n    });\n    return Object.values(flights);\n  };\n  const isDateInRange = (dateStr, dateRange) => {\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\n    const date = dayjs(dateStr);\n    const start = dayjs(dateRange[0]);\n    const end = dayjs(dateRange[1]);\n    return date.isAfter(start.subtract(1, 'day')) && date.isBefore(end.add(1, 'day'));\n  };\n  const handleDateSearch = async (currentRoute, stopoverInfo, preserveCalendarData = false, clearSelections = false) => {\n    console.log('\\n=== useFlightDetails handleDateSearch ===');\n    console.log('Current Route:', currentRoute);\n    console.log('Received Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n    console.log('Preserve Calendar Data:', preserveCalendarData);\n    console.log('Clear Selections:', clearSelections);\n    if (!selectedDates || !currentRoute || !apiKey) {\n      console.log('Missing required data:', {\n        selectedDates: !!selectedDates,\n        currentRoute: !!currentRoute,\n        apiKey: !!apiKey\n      });\n      return;\n    }\n\n    // Always clear flight selections when requested\n    if (clearSelections) {\n      setSelectedFlights({});\n      setSegmentDetails(prevDetails => prevDetails.map(f => ({\n        ...f,\n        isSelected: false,\n        hidden: false\n      })));\n    }\n    setIsLoadingSegments(true);\n    try {\n      const selectedSegments = [];\n      for (const date of Object.keys(availabilityData)) {\n        if (isDateInRange(date, selectedDates)) {\n          // Preserve distance information when collecting segments\n          const segments = availabilityData[date].map(segment => ({\n            ...segment,\n            distance: parseInt(segment.distance) || getSegmentDistance(segment.route.split('-')[0], segment.route.split('-')[1])\n          }));\n          selectedSegments.push(...segments);\n        }\n      }\n\n      // Log selected segments before filtering\n      console.log('=== Flights Before Combination Filtering ===');\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\n        if (!acc[segment.route]) {\n          acc[segment.route] = [];\n        }\n        acc[segment.route].push(segment);\n        return acc;\n      }, {});\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\n        console.log(`\\nRoute ${route}:`);\n        segments.forEach(segment => {\n          console.log(`  ID: ${segment.ID}`);\n          console.log(`  Date: ${segment.date}`);\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\n        });\n      });\n\n      // Continue with existing segment search logic\n      const segmentPromises = selectedSegments.map(segment => fetch(`https://backend-284998006367.us-central1.run.app/api/route_details/${segment.ID}`, {\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      }));\n\n      // Only fetch availability data if we're not preserving it\n      if (!preserveCalendarData) {\n        const routeString = currentRoute.join('-');\n\n        // Add startDate parameter if available\n        let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n        if (startDate) {\n          const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n          url += `?startDate=${formattedDate}`;\n        }\n        const availabilityResponse = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'accept': 'application/json',\n            'Partner-Authorization': apiKey\n          }\n        });\n        if (availabilityResponse.ok) {\n          const availabilityResult = await availabilityResponse.json();\n\n          // Process availability data into a more usable format\n          const processedAvailability = {};\n          availabilityResult.forEach(item => {\n            const dateKey = item.date;\n            if (!processedAvailability[dateKey]) {\n              processedAvailability[dateKey] = [];\n            }\n            processedAvailability[dateKey].push({\n              route: `${item.originAirport}-${item.destinationAirport}`,\n              classes: {\n                Y: item.YDirect,\n                J: item.JDirect,\n                F: item.FDirect\n              },\n              ID: item.ID,\n              distance: item.distance,\n              date: item.date,\n              Source: item.Source\n            });\n          });\n          setAvailabilityData(processedAvailability);\n        }\n      }\n\n      // Continue with existing segment search logic\n      const newProcessedSegments = [];\n      const [startDate, endDate] = selectedDates;\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\n      console.log('\\n=== Processing Segments with Stopover ===');\n      if (stopoverInfo) {\n        console.log('Stopover Details:', {\n          airport: stopoverInfo.airport,\n          days: stopoverInfo.days\n        });\n      }\n      console.log('\\n=== Processing Segments ===');\n      console.log('Date Range:', {\n        start: dayjs(startDate).format('YYYY-MM-DD'),\n        end: dayjs(endDate).format('YYYY-MM-DD')\n      });\n      try {\n        // Process all segments\n        for (let i = 0; i < currentRoute.length - 1; i++) {\n          const from = currentRoute[i];\n          const to = currentRoute[i + 1];\n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\n          let timeWindow = null;\n          const dates = new Set();\n          if (i === 0) {\n            // First segment - use full date range\n            const startDay = dayjs(startDate).startOf('day');\n            const endDay = dayjs(endDate).endOf('day');\n            console.log('\\n=== First Segment Details ===');\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\n\n            // Get all dates in range\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n              dates.add(d.format('YYYY-MM-DD'));\n            }\n          } else {\n            // Handle subsequent segments with stopover consideration\n            const prevSegment = newProcessedSegments[i - 1];\n            if (!prevSegment || prevSegment.flights.length === 0) {\n              // Use full date range if no previous flights\n              const startDay = dayjs(startDate).startOf('day');\n              const endDay = dayjs(endDate).endOf('day');\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n              console.log('No previous flights found. Using full date range for this segment');\n            } else {\n              // Calculate time window from previous segment's flights\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\n              console.log('\\n=== Processing Subsequent Segment ===');\n              console.log('Segment:', `${currentRoute[i - 1]}-${currentRoute[i]}`);\n              console.log('Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\n              console.log('Current Airport:', currentRoute[i]);\n              console.log('Previous Airport:', currentRoute[i - 1]);\n              console.log('Is Stopover Airport:', stopoverInfo && currentRoute[i] === stopoverInfo.airport);\n\n              // Adjust time window based on stopover\n              if (stopoverInfo && currentRoute[i] === stopoverInfo.airport) {\n                console.log(`\\nApplying stopover of ${stopoverInfo.days} days at ${stopoverInfo.airport}`);\n                timeWindow = {\n                  start: arrivals[0].add(stopoverInfo.days, 'days'),\n                  end: arrivals[arrivals.length - 1].add(stopoverInfo.days, 'days').add(24, 'hours'),\n                  isStopover: true,\n                  stopoverDays: stopoverInfo.days\n                };\n              } else {\n                timeWindow = {\n                  start: arrivals[0],\n                  end: arrivals[arrivals.length - 1].add(24, 'hours'),\n                  isStopover: false,\n                  stopoverDays: 0\n                };\n              }\n              console.log('\\nTime Window:', {\n                start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\n                end: timeWindow.end.format('YYYY-MM-DD HH:mm'),\n                isStopover: timeWindow.isStopover,\n                stopoverDays: timeWindow.stopoverDays\n              });\n\n              // Get dates for time window\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\n                dates.add(d.format('YYYY-MM-DD'));\n              }\n            }\n          }\n\n          // Process each date\n          const allFlights = [];\n          for (const date of dates) {\n            // Find route from availability data instead\n            const availableRoutes = availabilityData[date] || [];\n            const route = availableRoutes.find(r => r.route === `${from}-${to}`);\n            if (!route) {\n              console.log(`No route found for ${from}-${to} on ${date}`);\n              continue;\n            }\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\n            console.log(`Segment ID: ${route.ID}`);\n            try {\n              const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\n                method: 'GET',\n                headers: {\n                  'accept': 'application/json',\n                  'Partner-Authorization': apiKey,\n                  'Segment-ID': route.ID\n                }\n              });\n              if (!response.ok) {\n                console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\n                continue;\n              }\n              const data = await response.json();\n              const processedFlights = processFlightData(data, timeWindow, i);\n              console.log(`✓ Found ${processedFlights.length} valid flights`);\n              allFlights.push(...processedFlights);\n            } catch (error) {\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\n            }\n          }\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\n\n          // Store searched dates in segment data\n          newProcessedSegments[i] = {\n            route: `${from}-${to}`,\n            flights: allFlights,\n            searchDates: dates,\n            // Add this field\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\n          };\n\n          // Only break if previous segment had flights but current segment found none\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i - 1].flights.length > 0) {\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\n            console.log('Skipping remaining segments');\n            break;\n          }\n        }\n\n        // After processing all segments\n        if (newProcessedSegments.length >= 1) {\n          // Log all flights found by segment\n          console.log('\\n=== All Flights Found ===');\n          newProcessedSegments.forEach((segment, index) => {\n            if (segment.flights && segment.flights.length > 0) {\n              console.log(`\\nSegment ${index} (${segment.route}):`);\n              segment.flights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft}`);\n              });\n            } else {\n              console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\n            }\n          });\n          console.log('\\n=== Flight Combinations ===');\n\n          // Find the first and last segments with flights\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(segment => segment.flights && segment.flights.length > 0);\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\n\n          // Find all valid combinations recursively\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\n            // If we've reached beyond the last valid segment, this is a valid combination\n            if (segmentIndex > lastSegmentIndex) {\n              return [currentPath];\n            }\n            const validCombos = [];\n            const currentSegment = newProcessedSegments[segmentIndex];\n\n            // If no flights in current segment, try next segment\n            if (!(currentSegment !== null && currentSegment !== void 0 && currentSegment.flights) || currentSegment.flights.length === 0) {\n              return findValidCombinations(currentPath, segmentIndex + 1);\n            }\n\n            // For first segment, try all flights\n            if (currentPath.length === 0) {\n              currentSegment.flights.forEach(flight => {\n                const combos = findValidCombinations([flight], segmentIndex + 1);\n                validCombos.push(...combos);\n              });\n            } else {\n              // For subsequent segments, check connection times\n              const prevFlight = currentPath[currentPath.length - 1];\n              const prevArrival = dayjs(prevFlight.ArrivesAt);\n              const isStopoverPoint = stopoverInfo && currentRoute[segmentIndex] === stopoverInfo.airport;\n              currentSegment.flights.forEach(flight => {\n                const departure = dayjs(flight.DepartsAt);\n                const connectionTime = departure.diff(prevArrival, 'minutes');\n                if (isStopoverPoint) {\n                  // For stopover points, connection must be within stopover day window\n                  const minStopoverTime = stopoverInfo.days * 24 * 60; // Convert days to minutes\n                  const maxStopoverTime = (stopoverInfo.days + 1) * 24 * 60; // Add one more day for flexibility\n\n                  if (connectionTime >= minStopoverTime && connectionTime <= maxStopoverTime) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                } else {\n                  // For normal connections, 30 minutes to 24 hours\n                  if (connectionTime >= 30 && connectionTime <= 24 * 60) {\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\n                    validCombos.push(...combos);\n                  }\n                }\n              });\n            }\n            return validCombos;\n          };\n\n          // Get all valid combinations using the new function\n          const allCombinations = findValidCombinations();\n\n          // Store combinations in ref immediately after finding them\n          combinationsRef.current = allCombinations;\n\n          // Log the combinations\n          console.log('\\n=== Valid Combinations ===');\n          if (allCombinations.length === 0) {\n            console.log('No valid combinations found for any segment range');\n          } else {\n            console.log(`Found ${allCombinations.length} valid combinations`);\n            allCombinations.forEach(combo => {\n              const flightInfo = combo.map((flight, idx) => {\n                if (idx === 0) {\n                  return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\n                }\n                const prevFlight = combo[idx - 1];\n                const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\n                const hours = Math.floor(connectionTime / 60);\n                const minutes = connectionTime % 60;\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\n              });\n              console.log(flightInfo.join(' → '));\n            });\n          }\n\n          // Create a map of valid flights by segment\n          const validFlightsBySegment = new Map();\n          allCombinations.forEach(combo => {\n            combo.forEach(flight => {\n              const segmentKey = flight.segmentIndex;\n              if (!validFlightsBySegment.has(segmentKey)) {\n                validFlightsBySegment.set(segmentKey, new Set());\n              }\n              validFlightsBySegment.get(segmentKey).add(`${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`);\n            });\n          });\n\n          // Filter and process flights\n          const filteredFlights = [];\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segment = newProcessedSegments[i];\n            if (!segment || !segment.flights) continue;\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\n\n            // Add valid flights from this segment\n            segment.flights.forEach(flight => {\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n              if (validFlightsForSegment.has(flightKey)) {\n                filteredFlights.push({\n                  ...flight,\n                  isSelected: false,\n                  segmentIndex: i\n                });\n              }\n            });\n          }\n          setSegmentDetails(filteredFlights);\n          setValidCombinations(allCombinations);\n\n          // Log flights by segment\n          console.log('\\n=== Flights By Segment ===');\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\n            if (segmentFlights.length > 0) {\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\n              segmentFlights.sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf()).forEach(flight => {\n                console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\n              });\n            }\n          }\n          console.log('\\n======================');\n        } else {\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => segment.flights.map(flight => ({\n            ...flight,\n            isSelected: false,\n            segmentIndex: index\n          }))));\n          setValidCombinations([]);\n        }\n      } catch (error) {\n        console.error('Error processing segments:', error);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoadingSegments(false);\n    }\n  };\n  const handleCalendarSearch = async currentRoute => {\n    if (!currentRoute || !apiKey) return;\n    setIsLoadingAvailability(true);\n    try {\n      // Fetch availability data\n      const routeString = currentRoute.join('-');\n\n      // Add startDate parameter if available\n      let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\n      if (startDate) {\n        const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\n        url += `?startDate=${formattedDate}`;\n        console.log(`Using start date: ${formattedDate} for availability search`);\n      }\n      console.log(`Fetching availability data from: ${url}`);\n      const availabilityResponse = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Partner-Authorization': apiKey\n        }\n      });\n      if (availabilityResponse.ok) {\n        const availabilityResult = await availabilityResponse.json();\n        console.log(`Received ${availabilityResult.length} availability records`);\n\n        // Process availability data into a more usable format\n        const processedAvailability = {};\n        availabilityResult.forEach(item => {\n          const dateKey = item.date;\n          if (!processedAvailability[dateKey]) {\n            processedAvailability[dateKey] = [];\n          }\n          processedAvailability[dateKey].push({\n            route: `${item.originAirport}-${item.destinationAirport}`,\n            classes: {\n              Y: item.YDirect,\n              J: item.JDirect,\n              F: item.FDirect\n            },\n            ID: item.ID,\n            distance: item.distance,\n            date: item.date,\n            Source: item.Source\n          });\n        });\n        setAvailabilityData(processedAvailability);\n      } else {\n        console.error('Failed to fetch availability data:', availabilityResponse.status);\n      }\n    } catch (error) {\n      console.error('Error fetching availability data:', error);\n    } finally {\n      setIsLoadingAvailability(false);\n    }\n  };\n  const resetDetails = () => {\n    // Clear all data states\n    setSegmentDetails([]);\n    setIsLoadingSegments(false);\n    setSelectedFlights({});\n    setValidCombinations([]);\n    setProcessedSegments([]);\n    setOriginalFlights(null);\n    setProcessedFlights(null);\n    setInitialFlights(null);\n    setAvailabilityData({});\n    setIsLoadingAvailability(false);\n    setStartDate(null); // Clear the start date\n\n    // Note: We don't clear selectedDates here because we do it explicitly in the modal close handler\n\n    // Reset the combinations reference\n    combinationsRef.current = [];\n\n    // Clear any stopover information in the FlightAvailabilityCalendar\n    if (window.clearStopoverInfo && typeof window.clearStopoverInfo === 'function') {\n      window.clearStopoverInfo();\n    }\n\n    // Clear calendar display\n    if (window.hideCalendar && typeof window.hideCalendar === 'function') {\n      window.hideCalendar();\n    }\n  };\n  const handleFlightSelect = (flight, segmentIndex) => {\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\n    setSelectedFlights(prevSelected => {\n      var _newSelected$segmentI, _newSelected$segmentI2;\n      const newSelected = {\n        ...prevSelected\n      };\n\n      // Check if this exact flight is already selected\n      const isCurrentlySelected = (_newSelected$segmentI = newSelected[segmentIndex]) === null || _newSelected$segmentI === void 0 ? void 0 : (_newSelected$segmentI2 = _newSelected$segmentI.some) === null || _newSelected$segmentI2 === void 0 ? void 0 : _newSelected$segmentI2.call(_newSelected$segmentI, f => {\n        const matches = f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\n        if (matches) {\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n        }\n        return matches;\n      });\n      if (isCurrentlySelected) {\n        // Remove only this specific flight from the selection\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\n          const keep = !(f.flightNumber === flight.flightNumber && dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\n          if (!keep) {\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          }\n          return keep;\n        });\n        if (newSelected[segmentIndex].length === 0) {\n          console.log(`Removing empty segment ${segmentIndex}`);\n          delete newSelected[segmentIndex];\n        }\n      } else {\n        // Add this flight to the selections\n        if (!newSelected[segmentIndex]) {\n          newSelected[segmentIndex] = [];\n        }\n        newSelected[segmentIndex].push(flight);\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\n      }\n\n      // Log all current selections\n      console.log('\\nALL CURRENT SELECTIONS:');\n      Object.entries(newSelected).forEach(([idx, flights]) => {\n        if (Array.isArray(flights)) {\n          flights.forEach(f => {\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\n          });\n        }\n      });\n\n      // Use combinations from the ref\n      const currentCombos = combinationsRef.current;\n      const firstSegmentWithFlights = Math.min(...segmentDetails.filter(f => !f.hidden).map(f => f.segmentIndex));\n      console.log('\\nChecking combinations:', currentCombos.map(combo => combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')));\n\n      // Find combinations that contain the selected flight(s)\n      const validCombos = currentCombos.filter(combo => {\n        // If no selections, all combinations are valid\n        if (Object.keys(newSelected).length === 0) return true;\n\n        // Check if this combination contains all selected flights\n        const isValid = Object.entries(newSelected).every(([segIdx, flights]) => {\n          const selectedFlight = flights[0];\n          // Adjust index based on first segment with flights\n          const comboIndex = parseInt(segIdx, 10) - firstSegmentWithFlights;\n          const comboFlight = combo[comboIndex];\n          const matches = (comboFlight === null || comboFlight === void 0 ? void 0 : comboFlight.flightNumber) === selectedFlight.flightNumber && dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm') === dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm');\n          console.log(`Checking combo flight in segment ${segIdx}:`, {\n            selected: `${selectedFlight.flightNumber} (${dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm')})`,\n            combo: comboFlight ? `${comboFlight.flightNumber} (${dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm')})` : 'none',\n            comboIndex,\n            matches\n          });\n          return matches;\n        });\n        return isValid;\n      });\n      console.log('\\nValid combinations:', validCombos.map(combo => combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')));\n\n      // Create a set of all flights that appear in valid combinations\n      const validFlights = new Set();\n      validCombos.forEach(combo => {\n        combo.forEach(f => {\n          if (!f) return;\n          const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n          validFlights.add(key);\n        });\n      });\n\n      // Update visibility\n      setSegmentDetails(prevDetails => prevDetails.map(f => {\n        var _newSelected$f$segmen;\n        const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\n        const isSelected = ((_newSelected$f$segmen = newSelected[f.segmentIndex]) === null || _newSelected$f$segmen === void 0 ? void 0 : _newSelected$f$segmen.some(sf => sf.flightNumber === f.flightNumber && dayjs(sf.DepartsAt).format('MM-DD HH:mm') === dayjs(f.DepartsAt).format('MM-DD HH:mm'))) || false;\n        return {\n          ...f,\n          isSelected,\n          hidden: Object.keys(newSelected).length > 0 && !isSelected && !validFlights.has(flightKey)\n        };\n      }));\n      return newSelected;\n    });\n  };\n  const columns = useMemo(() => {\n    if (!selectedDates) return getColumns(handleFlightSelect);\n    const [startDate] = selectedDates;\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\n  }, [handleFlightSelect, selectedDates, getColumns]);\n\n  // Initialize segment details\n  useEffect(() => {\n    if (initialCombinations.length > 0) {\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => combo.map((f, idx) => ({\n        ...f,\n        isSelected: false,\n        segmentIndex: idx\n      })));\n      const uniqueFlights = Array.from(new Map(allFlights.map(f => [`${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`, f])).values());\n      setSegmentDetails(uniqueFlights);\n    }\n  }, [initialCombinations]);\n  return {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n    startDate,\n    setStartDate\n  };\n}\n_s(useFlightDetails, \"/wSre+NzoaEr19CeqCCuXLcaxHg=\");","map":{"version":3,"names":["useState","useEffect","useRef","useMemo","dayjs","routeDetails","airlines","useFlightDetails","getColumns","initialCombinations","_s","selectedDates","setSelectedDates","apiKey","setApiKey","localStorage","getItem","segmentDetails","setSegmentDetails","isLoadingSegments","setIsLoadingSegments","selectedFlights","setSelectedFlights","validCombinations","setValidCombinations","processedSegments","setProcessedSegments","originalFlights","setOriginalFlights","originalCombinations","processedFlights","setProcessedFlights","initialFlights","setInitialFlights","availabilityData","setAvailabilityData","isLoadingAvailability","setIsLoadingAvailability","startDate","setStartDate","combinationsRef","setItem","formatTime","dateStr","baseDate","date","base","dayDiff","hour","format","timeStr","getAirlineName","code","airline","find","a","value","label","replace","getSegmentDistance","from","to","route","r","origin","destination","console","log","distance","toLocaleString","processFlightData","data","timeWindow","segmentIndex","_data$results","_data$results$","_data$results$$data","_data$results$$data$d","_data$results$$data$d2","_data$results2","_data$results2$","_data$results2$$data","flights","results","DepartsAt","Date","rawFlights","length","start","end","filter","trip","departureTime","arrivalTime","ArrivesAt","FlightNumbers","Carriers","Stops","FareClass","isValid","isAfter","isBefore","forEach","carrier","flightNumber","startsWith","slice","baseDayjs","departDayDiff","diff","arrivalDayDiff","Cabin","toLowerCase","economy","business","first","aircraftName","Aircraft","OriginAirport","DestinationAirport","aircraft","duration","TotalDuration","departs","arrives","isSelected","parseInt","Distance","Object","values","isDateInRange","dateRange","subtract","add","handleDateSearch","currentRoute","stopoverInfo","preserveCalendarData","clearSelections","JSON","stringify","prevDetails","map","f","hidden","selectedSegments","keys","segments","segment","split","push","segmentsByRoute","reduce","acc","entries","ID","classes","Y","J","F","segmentPromises","fetch","headers","routeString","join","url","formattedDate","availabilityResponse","method","ok","availabilityResult","json","processedAvailability","item","dateKey","originAirport","destinationAirport","YDirect","JDirect","FDirect","Source","newProcessedSegments","endDate","airport","days","i","dates","Set","startDay","startOf","endDay","endOf","d","valueOf","prevSegment","arrivals","sort","b","isStopover","stopoverDays","allFlights","availableRoutes","response","error","searchDates","earliestArrival","latestArrival","index","flight","firstSegmentWithFlights","findIndex","lastSegmentWithFlights","reverse","lastSegmentIndex","findValidCombinations","currentPath","validCombos","currentSegment","combos","prevFlight","prevArrival","isStopoverPoint","departure","connectionTime","minStopoverTime","maxStopoverTime","allCombinations","current","combo","flightInfo","idx","hours","Math","floor","minutes","toString","padStart","validFlightsBySegment","Map","segmentKey","has","set","get","filteredFlights","validFlightsForSegment","flightKey","segmentFlights","flatMap","handleCalendarSearch","status","resetDetails","window","clearStopoverInfo","hideCalendar","handleFlightSelect","prevSelected","_newSelected$segmentI","_newSelected$segmentI2","newSelected","isCurrentlySelected","some","call","matches","isSame","keep","Array","isArray","currentCombos","min","every","segIdx","selectedFlight","comboIndex","comboFlight","selected","validFlights","key","_newSelected$f$segmen","sf","columns","uniqueFlights"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/hooks/useFlightDetails.js"],"sourcesContent":["import { useState, useEffect, useRef, useMemo } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport routeDetails from '../../../data/route_details.json';\r\nimport airlines from '../../../data/airlines';\r\n\r\nexport default function useFlightDetails(getColumns, initialCombinations = []) {\r\n  const [selectedDates, setSelectedDates] = useState(null);\r\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('flightSearchApiKey') || '');\r\n  const [segmentDetails, setSegmentDetails] = useState([]);\r\n  const [isLoadingSegments, setIsLoadingSegments] = useState(false);\r\n  const [selectedFlights, setSelectedFlights] = useState({});\r\n  const [validCombinations, setValidCombinations] = useState([]);\r\n  const [processedSegments, setProcessedSegments] = useState([]);\r\n  const [originalFlights, setOriginalFlights] = useState(null);\r\n  const [originalCombinations] = useState(initialCombinations);\r\n  const [processedFlights, setProcessedFlights] = useState(null);\r\n  const [initialFlights, setInitialFlights] = useState(null);\r\n  const [availabilityData, setAvailabilityData] = useState({});\r\n  const [isLoadingAvailability, setIsLoadingAvailability] = useState(false);\r\n  const [startDate, setStartDate] = useState(null);\r\n  const combinationsRef = useRef([]);\r\n\r\n  // Update localStorage when apiKey changes\r\n  useEffect(() => {\r\n    if (apiKey) {\r\n      localStorage.setItem('flightSearchApiKey', apiKey);\r\n    }\r\n  }, [apiKey]);\r\n\r\n  const formatTime = (dateStr, baseDate) => {\r\n    const date = dayjs(dateStr);\r\n    const base = dayjs(baseDate);\r\n    \r\n    // If time is before 12:00 and it's a flight arrival, it's likely next day\r\n    const dayDiff = date.hour() < 12 && date.format('HH:mm') < '12:00' ? 1 : 0;\r\n    \r\n    const timeStr = date.format('HH:mm');\r\n    return dayDiff > 0 ? `${timeStr} (+${dayDiff})` : timeStr;\r\n  };\r\n\r\n  const getAirlineName = (code) => {\r\n    const airline = airlines.find(a => a.value === code);\r\n    return airline ? airline.label.replace(` (${code})`, '') : code;\r\n  };\r\n\r\n  const getSegmentDistance = (from, to) => {\r\n    const route = routeDetails.find(r => \r\n      r.origin === from && \r\n      r.destination === to\r\n    );\r\n\r\n    if (!route) {\r\n      console.log(`Warning: No route found for ${from}-${to}, using default distance`);\r\n      return 1000;\r\n    }\r\n\r\n    console.log(`Distance for ${from}-${to}: ${route.distance.toLocaleString()} miles`);\r\n    return route.distance;\r\n  };\r\n\r\n  const processFlightData = (data, timeWindow, segmentIndex) => {\r\n    const flights = {};\r\n    const baseDate = dayjs(data.results?.[0]?.data?.data?.[0]?.DepartsAt || new Date()).format('YYYY-MM-DD');\r\n    \r\n    const rawFlights = data.results?.[0]?.data?.data || [];\r\n    console.log(`\\nProcessing ${rawFlights.length} raw flights:`);\r\n    \r\n    if (timeWindow) {\r\n      console.log('Time Window:', {\r\n        start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\r\n        end: timeWindow.end.format('YYYY-MM-DD HH:mm')\r\n      });\r\n    }\r\n    \r\n    rawFlights\r\n      .filter(trip => {\r\n        // Remove the Z suffix when parsing times since they're actually local times\r\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\r\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', ''));\r\n        \r\n        console.log(`\\nChecking flight ${trip.FlightNumbers}:`);\r\n        console.log(`  Carrier: ${trip.Carriers}`);\r\n        console.log(`  Departs: ${departureTime.format('YYYY-MM-DD HH:mm')}`);\r\n        console.log(`  Arrives: ${arrivalTime.format('YYYY-MM-DD HH:mm')}`);\r\n        \r\n        // Filter out non-direct flights\r\n        if (trip.Stops !== 0) {\r\n          console.log('  ❌ Skipped: Not a direct flight');\r\n          return false;\r\n        }\r\n        \r\n        // Filter out EK and FZ carriers\r\n        if (trip.Carriers === 'EK' || trip.Carriers === 'FZ') {\r\n          console.log('  ❌ Skipped: Excluded carrier');\r\n          return false;\r\n        }\r\n        \r\n        // Filter out 2-character FareClass values\r\n        if (trip.FareClass && trip.FareClass.length === 2) {\r\n          console.log('  ❌ Skipped: 2-character FareClass');\r\n          return false;\r\n        }\r\n        \r\n        if (timeWindow) {\r\n          const isValid = departureTime.isAfter(timeWindow.start) && \r\n                         departureTime.isBefore(timeWindow.end);\r\n          \r\n          if (!isValid) {\r\n            console.log('  ❌ Skipped: Outside time window');\r\n            console.log(`    Must depart between ${timeWindow.start.format('YYYY-MM-DD HH:mm')} and ${timeWindow.end.format('YYYY-MM-DD HH:mm')}`);\r\n          } else {\r\n            console.log('  ✓ Accepted: Within time window');\r\n          }\r\n          return isValid;\r\n        }\r\n        \r\n        console.log('  ✓ Accepted: No time window restrictions');\r\n        return true;\r\n      })\r\n      .forEach(trip => {\r\n        // Remove the Z suffix when parsing times since they're actually local times\r\n        const departureTime = dayjs(trip.DepartsAt.replace('Z', ''));\r\n        const arrivalTime = dayjs(trip.ArrivesAt.replace('Z', '')); \r\n\r\n        // Convert CL carrier and flight numbers to LH\r\n        const carrier = trip.Carriers === 'CL' ? 'LH' : trip.Carriers;\r\n        const flightNumber = trip.FlightNumbers.startsWith('CL') \r\n          ? `LH${trip.FlightNumbers.slice(2)}` \r\n          : trip.FlightNumbers;\r\n\r\n        const baseDayjs = dayjs(baseDate);\r\n        const departDayDiff = departureTime.diff(baseDayjs, 'day');\r\n        const arrivalDayDiff = arrivalTime.diff(baseDayjs, 'day');\r\n\r\n        // If flight already exists, merge cabin classes\r\n        if (flights[flightNumber]) {\r\n          switch(trip.Cabin.toLowerCase()) {\r\n            case 'economy':\r\n              flights[flightNumber].economy = true;\r\n              break;\r\n            case 'business':\r\n              flights[flightNumber].business = true;\r\n              break;\r\n            case 'first':\r\n              flights[flightNumber].first = true;\r\n              break;\r\n          }\r\n          return; // Skip creating new flight entry\r\n        }\r\n\r\n        // Process aircraft name and create new flight entry\r\n        let aircraftName = trip.Aircraft[0];\r\n        if (aircraftName && aircraftName === '787  All') {\r\n          aircraftName = 'Boeing 787-10';\r\n        }\r\n\r\n        flights[flightNumber] = {\r\n          from: trip.OriginAirport,\r\n          to: trip.DestinationAirport,\r\n          flightNumber: flightNumber,\r\n          airlines: getAirlineName(carrier),\r\n          aircraft: aircraftName,\r\n          duration: trip.TotalDuration,\r\n          departs: departDayDiff > 0 ? \r\n            `${departureTime.format('HH:mm')} (+${departDayDiff})` : \r\n            departureTime.format('HH:mm'),\r\n          arrives: arrivalDayDiff > 0 ? \r\n            `${arrivalTime.format('HH:mm')} (+${arrivalDayDiff})` : \r\n            arrivalTime.format('HH:mm'),\r\n          DepartsAt: departureTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          ArrivesAt: arrivalTime.format('YYYY-MM-DD HH:mm:ss'),\r\n          economy: false,\r\n          business: false,\r\n          first: false,\r\n          isSelected: false,\r\n          distance: parseInt(trip.Distance) || getSegmentDistance(trip.OriginAirport, trip.DestinationAirport),\r\n          segmentIndex: segmentIndex\r\n        };\r\n        \r\n        switch(trip.Cabin.toLowerCase()) {\r\n          case 'economy':\r\n            flights[flightNumber].economy = true;\r\n            break;\r\n          case 'business':\r\n            flights[flightNumber].business = true;\r\n            break;\r\n          case 'first':\r\n            flights[flightNumber].first = true;\r\n            break;\r\n        }\r\n      });\r\n    \r\n    return Object.values(flights);\r\n  };\r\n\r\n  const isDateInRange = (dateStr, dateRange) => {\r\n    if (!dateRange || !dateRange[0] || !dateRange[1]) return false;\r\n    const date = dayjs(dateStr);\r\n    const start = dayjs(dateRange[0]);\r\n    const end = dayjs(dateRange[1]);\r\n    return date.isAfter(start.subtract(1, 'day')) && \r\n           date.isBefore(end.add(1, 'day'));\r\n  };\r\n\r\n  const handleDateSearch = async (currentRoute, stopoverInfo, preserveCalendarData = false, clearSelections = false) => {\r\n    console.log('\\n=== useFlightDetails handleDateSearch ===');\r\n    console.log('Current Route:', currentRoute);\r\n    console.log('Received Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\r\n    console.log('Preserve Calendar Data:', preserveCalendarData);\r\n    console.log('Clear Selections:', clearSelections);\r\n    \r\n    if (!selectedDates || !currentRoute || !apiKey) {\r\n      console.log('Missing required data:', {\r\n        selectedDates: !!selectedDates,\r\n        currentRoute: !!currentRoute,\r\n        apiKey: !!apiKey\r\n      });\r\n      return;\r\n    }\r\n    \r\n    // Always clear flight selections when requested\r\n    if (clearSelections) {\r\n      setSelectedFlights({});\r\n      setSegmentDetails(prevDetails => \r\n        prevDetails.map(f => ({\r\n          ...f,\r\n          isSelected: false,\r\n          hidden: false\r\n        }))\r\n      );\r\n    }\r\n    \r\n    setIsLoadingSegments(true);\r\n    \r\n    try {\r\n      const selectedSegments = [];\r\n      for (const date of Object.keys(availabilityData)) {\r\n        if (isDateInRange(date, selectedDates)) {\r\n          // Preserve distance information when collecting segments\r\n          const segments = availabilityData[date].map(segment => ({\r\n            ...segment,\r\n            distance: parseInt(segment.distance) || getSegmentDistance(segment.route.split('-')[0], segment.route.split('-')[1])\r\n          }));\r\n          selectedSegments.push(...segments);\r\n        }\r\n      }\r\n\r\n      // Log selected segments before filtering\r\n      console.log('=== Flights Before Combination Filtering ===');\r\n      const segmentsByRoute = selectedSegments.reduce((acc, segment) => {\r\n        if (!acc[segment.route]) {\r\n          acc[segment.route] = [];\r\n        }\r\n        acc[segment.route].push(segment);\r\n        return acc;\r\n      }, {});\r\n\r\n      Object.entries(segmentsByRoute).forEach(([route, segments]) => {\r\n        console.log(`\\nRoute ${route}:`);\r\n        segments.forEach(segment => {\r\n          console.log(`  ID: ${segment.ID}`);\r\n          console.log(`  Date: ${segment.date}`);\r\n          console.log(`  Availability: Y:${segment.classes.Y}, J:${segment.classes.J}, F:${segment.classes.F}`);\r\n        });\r\n      });\r\n\r\n      // Continue with existing segment search logic\r\n      const segmentPromises = selectedSegments.map(segment => \r\n        fetch(`https://backend-284998006367.us-central1.run.app/api/route_details/${segment.ID}`, {\r\n          headers: {\r\n            'accept': 'application/json',\r\n            'Partner-Authorization': apiKey\r\n          }\r\n        })\r\n      );\r\n\r\n      // Only fetch availability data if we're not preserving it\r\n      if (!preserveCalendarData) {\r\n        const routeString = currentRoute.join('-');\r\n        \r\n        // Add startDate parameter if available\r\n        let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\r\n        if (startDate) {\r\n          const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\r\n          url += `?startDate=${formattedDate}`;\r\n        }\r\n        \r\n        const availabilityResponse = await fetch(\r\n          url,\r\n          {\r\n            method: 'GET',\r\n            headers: {\r\n              'accept': 'application/json',\r\n              'Partner-Authorization': apiKey\r\n            }\r\n          }\r\n        );\r\n\r\n        if (availabilityResponse.ok) {\r\n          const availabilityResult = await availabilityResponse.json();\r\n          \r\n          // Process availability data into a more usable format\r\n          const processedAvailability = {};\r\n          availabilityResult.forEach(item => {\r\n            const dateKey = item.date;\r\n            if (!processedAvailability[dateKey]) {\r\n              processedAvailability[dateKey] = [];\r\n            }\r\n            \r\n            processedAvailability[dateKey].push({\r\n              route: `${item.originAirport}-${item.destinationAirport}`,\r\n              classes: {\r\n                Y: item.YDirect,\r\n                J: item.JDirect,\r\n                F: item.FDirect\r\n              },\r\n              ID: item.ID,\r\n              distance: item.distance,\r\n              date: item.date,\r\n              Source: item.Source\r\n            });\r\n          });\r\n          \r\n          setAvailabilityData(processedAvailability);\r\n        }\r\n      }\r\n\r\n      // Continue with existing segment search logic\r\n      const newProcessedSegments = [];\r\n      const [startDate, endDate] = selectedDates;\r\n      const baseDate = dayjs(startDate).format('YYYY-MM-DD');\r\n      \r\n      console.log('\\n=== Processing Segments with Stopover ===');\r\n      if (stopoverInfo) {\r\n        console.log('Stopover Details:', {\r\n          airport: stopoverInfo.airport,\r\n          days: stopoverInfo.days\r\n        });\r\n      }\r\n\r\n      console.log('\\n=== Processing Segments ===');\r\n      console.log('Date Range:', {\r\n        start: dayjs(startDate).format('YYYY-MM-DD'),\r\n        end: dayjs(endDate).format('YYYY-MM-DD')\r\n      });\r\n      \r\n      try {\r\n        // Process all segments\r\n        for (let i = 0; i < currentRoute.length - 1; i++) {\r\n          const from = currentRoute[i];\r\n          const to = currentRoute[i + 1];\r\n          \r\n          console.log(`\\n=== Segment ${i + 1}: ${from}-${to} ===`);\r\n          \r\n          let timeWindow = null;\r\n          const dates = new Set();\r\n\r\n          if (i === 0) {\r\n            // First segment - use full date range\r\n            const startDay = dayjs(startDate).startOf('day');\r\n            const endDay = dayjs(endDate).endOf('day');\r\n            \r\n            console.log('\\n=== First Segment Details ===');\r\n            console.log('Time Window: 00:00 on first date to 23:59 on last date');\r\n            console.log(`From: ${startDay.format('YYYY-MM-DD')} 00:00`);\r\n            console.log(`To: ${endDay.format('YYYY-MM-DD')} 23:59`);\r\n            \r\n            // Get all dates in range\r\n            for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\r\n              dates.add(d.format('YYYY-MM-DD'));\r\n            }\r\n          } else {\r\n            // Handle subsequent segments with stopover consideration\r\n            const prevSegment = newProcessedSegments[i - 1];\r\n            \r\n            if (!prevSegment || prevSegment.flights.length === 0) {\r\n              // Use full date range if no previous flights\r\n              const startDay = dayjs(startDate).startOf('day');\r\n              const endDay = dayjs(endDate).endOf('day');\r\n              for (let d = startDay; d.valueOf() <= endDay.valueOf(); d = d.add(1, 'day')) {\r\n                dates.add(d.format('YYYY-MM-DD'));\r\n              }\r\n              console.log('No previous flights found. Using full date range for this segment');\r\n            } else {\r\n              // Calculate time window from previous segment's flights\r\n              const arrivals = prevSegment.flights.map(f => dayjs(f.ArrivesAt));\r\n              arrivals.sort((a, b) => a.valueOf() - b.valueOf());\r\n              \r\n              console.log('\\n=== Processing Subsequent Segment ===');\r\n              console.log('Segment:', `${currentRoute[i-1]}-${currentRoute[i]}`);\r\n              console.log('Stopover Info:', JSON.stringify(stopoverInfo, null, 2));\r\n              console.log('Current Airport:', currentRoute[i]);\r\n              console.log('Previous Airport:', currentRoute[i-1]);\r\n              console.log('Is Stopover Airport:', stopoverInfo && currentRoute[i] === stopoverInfo.airport);\r\n              \r\n              // Adjust time window based on stopover\r\n              if (stopoverInfo && currentRoute[i] === stopoverInfo.airport) {\r\n                console.log(`\\nApplying stopover of ${stopoverInfo.days} days at ${stopoverInfo.airport}`);\r\n                timeWindow = {\r\n                  start: arrivals[0].add(stopoverInfo.days, 'days'),\r\n                  end: arrivals[arrivals.length - 1].add(stopoverInfo.days, 'days').add(24, 'hours'),\r\n                  isStopover: true,\r\n                  stopoverDays: stopoverInfo.days\r\n                };\r\n              } else {\r\n                timeWindow = {\r\n                  start: arrivals[0],\r\n                  end: arrivals[arrivals.length - 1].add(24, 'hours'),\r\n                  isStopover: false,\r\n                  stopoverDays: 0\r\n                };\r\n              }\r\n              \r\n              console.log('\\nTime Window:', {\r\n                start: timeWindow.start.format('YYYY-MM-DD HH:mm'),\r\n                end: timeWindow.end.format('YYYY-MM-DD HH:mm'),\r\n                isStopover: timeWindow.isStopover,\r\n                stopoverDays: timeWindow.stopoverDays\r\n              });\r\n\r\n              // Get dates for time window\r\n              for (let d = dayjs(timeWindow.start); d.valueOf() <= timeWindow.end.valueOf(); d = d.add(1, 'day')) {\r\n                dates.add(d.format('YYYY-MM-DD'));\r\n              }\r\n            }\r\n          }\r\n\r\n          // Process each date\r\n          const allFlights = [];\r\n          for (const date of dates) {\r\n            // Find route from availability data instead\r\n            const availableRoutes = availabilityData[date] || [];\r\n            const route = availableRoutes.find(r => \r\n              r.route === `${from}-${to}`\r\n            );\r\n\r\n            if (!route) {\r\n              console.log(`No route found for ${from}-${to} on ${date}`);\r\n              continue;\r\n            }\r\n\r\n            console.log(`\\nFetching ${from}-${to} for ${date}:`);\r\n            console.log(`Segment ID: ${route.ID}`);\r\n            \r\n            try {\r\n              const response = await fetch(`https://backend-284998006367.us-central1.run.app/api/seats/${route.ID}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                  'accept': 'application/json',\r\n                  'Partner-Authorization': apiKey,\r\n                  'Segment-ID': route.ID\r\n                }\r\n              });\r\n\r\n              if (!response.ok) {\r\n                console.log(`❌ Failed to fetch ${from}-${to} (ID: ${route.ID})`);\r\n                continue;\r\n              }\r\n\r\n              const data = await response.json();\r\n              const processedFlights = processFlightData(data, timeWindow, i);\r\n              console.log(`✓ Found ${processedFlights.length} valid flights`);\r\n              allFlights.push(...processedFlights);\r\n            } catch (error) {\r\n              console.error(`Error processing ${from}-${to} for ${date}:`, error);\r\n            }\r\n          }\r\n\r\n          console.log(`\\nTotal flights found for ${from}-${to}: ${allFlights.length}`);\r\n\r\n          // Store searched dates in segment data\r\n          newProcessedSegments[i] = {\r\n            route: `${from}-${to}`,\r\n            flights: allFlights,\r\n            searchDates: dates, // Add this field\r\n            earliestArrival: allFlights.length > 0 ? dayjs(allFlights[0].ArrivesAt) : null,\r\n            latestArrival: allFlights.length > 0 ? dayjs(allFlights[allFlights.length - 1].ArrivesAt) : null\r\n          };\r\n\r\n          // Only break if previous segment had flights but current segment found none\r\n          if (allFlights.length === 0 && i > 0 && newProcessedSegments[i-1].flights.length > 0) {\r\n            console.log(`\\nNo flights found for segment ${from}-${to} after successful previous segment`);\r\n            console.log('Skipping remaining segments');\r\n            break;\r\n          }\r\n        }\r\n\r\n        // After processing all segments\r\n        if (newProcessedSegments.length >= 1) {\r\n          // Log all flights found by segment\r\n          console.log('\\n=== All Flights Found ===');\r\n          newProcessedSegments.forEach((segment, index) => {\r\n            if (segment.flights && segment.flights.length > 0) {\r\n              console.log(`\\nSegment ${index} (${segment.route}):`);\r\n              segment.flights\r\n                .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\r\n                .forEach(flight => {\r\n                  console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')} - ${dayjs(flight.ArrivesAt).format('MM-DD HH:mm')}) ${flight.aircraft}`);\r\n                });\r\n            } else {\r\n              console.log(`\\nSegment ${index} (${segment.route}): No flights found`);\r\n            }\r\n          });\r\n\r\n          console.log('\\n=== Flight Combinations ===');\r\n          \r\n          // Find the first and last segments with flights\r\n          const firstSegmentWithFlights = newProcessedSegments.findIndex(\r\n            segment => segment.flights && segment.flights.length > 0\r\n          );\r\n          \r\n          const lastSegmentWithFlights = [...newProcessedSegments].reverse().findIndex(\r\n            segment => segment.flights && segment.flights.length > 0\r\n          );\r\n          const lastSegmentIndex = newProcessedSegments.length - 1 - lastSegmentWithFlights;\r\n\r\n          console.log(`First segment with flights: ${firstSegmentWithFlights}`);\r\n          console.log(`Last segment with flights: ${lastSegmentIndex}`);\r\n\r\n          // Find all valid combinations recursively\r\n          const findValidCombinations = (currentPath = [], segmentIndex = firstSegmentWithFlights) => {\r\n            // If we've reached beyond the last valid segment, this is a valid combination\r\n            if (segmentIndex > lastSegmentIndex) {\r\n              return [currentPath];\r\n            }\r\n\r\n            const validCombos = [];\r\n            const currentSegment = newProcessedSegments[segmentIndex];\r\n\r\n            // If no flights in current segment, try next segment\r\n            if (!currentSegment?.flights || currentSegment.flights.length === 0) {\r\n              return findValidCombinations(currentPath, segmentIndex + 1);\r\n            }\r\n\r\n            // For first segment, try all flights\r\n            if (currentPath.length === 0) {\r\n              currentSegment.flights.forEach(flight => {\r\n                const combos = findValidCombinations([flight], segmentIndex + 1);\r\n                validCombos.push(...combos);\r\n              });\r\n            } else {\r\n              // For subsequent segments, check connection times\r\n              const prevFlight = currentPath[currentPath.length - 1];\r\n              const prevArrival = dayjs(prevFlight.ArrivesAt);\r\n              const isStopoverPoint = stopoverInfo && \r\n                                     currentRoute[segmentIndex] === stopoverInfo.airport;\r\n\r\n              currentSegment.flights.forEach(flight => {\r\n                const departure = dayjs(flight.DepartsAt);\r\n                const connectionTime = departure.diff(prevArrival, 'minutes');\r\n\r\n                if (isStopoverPoint) {\r\n                  // For stopover points, connection must be within stopover day window\r\n                  const minStopoverTime = stopoverInfo.days * 24 * 60; // Convert days to minutes\r\n                  const maxStopoverTime = (stopoverInfo.days + 1) * 24 * 60; // Add one more day for flexibility\r\n                  \r\n                  if (connectionTime >= minStopoverTime && connectionTime <= maxStopoverTime) {\r\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\r\n                    validCombos.push(...combos);\r\n                  }\r\n                } else {\r\n                  // For normal connections, 30 minutes to 24 hours\r\n                  if (connectionTime >= 30 && connectionTime <= 24 * 60) {\r\n                    const combos = findValidCombinations([...currentPath, flight], segmentIndex + 1);\r\n                    validCombos.push(...combos);\r\n                  }\r\n                }\r\n              });\r\n            }\r\n\r\n            return validCombos;\r\n          };\r\n\r\n          // Get all valid combinations using the new function\r\n          const allCombinations = findValidCombinations();\r\n\r\n          // Store combinations in ref immediately after finding them\r\n          combinationsRef.current = allCombinations;\r\n\r\n          // Log the combinations\r\n          console.log('\\n=== Valid Combinations ===');\r\n          if (allCombinations.length === 0) {\r\n            console.log('No valid combinations found for any segment range');\r\n          } else {\r\n            console.log(`Found ${allCombinations.length} valid combinations`);\r\n            allCombinations.forEach(combo => {\r\n              const flightInfo = combo.map((flight, idx) => {\r\n                if (idx === 0) {\r\n                  return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`;\r\n                }\r\n                \r\n                const prevFlight = combo[idx - 1];\r\n                const connectionTime = dayjs(flight.DepartsAt).diff(dayjs(prevFlight.ArrivesAt), 'minutes');\r\n                const hours = Math.floor(connectionTime / 60);\r\n                const minutes = connectionTime % 60;\r\n                return `${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) [${hours}:${minutes.toString().padStart(2, '0')}]`;\r\n              });\r\n              \r\n              console.log(flightInfo.join(' → '));\r\n            });\r\n          }\r\n\r\n          // Create a map of valid flights by segment\r\n          const validFlightsBySegment = new Map();\r\n          allCombinations.forEach(combo => {\r\n            combo.forEach(flight => {\r\n              const segmentKey = flight.segmentIndex;\r\n              if (!validFlightsBySegment.has(segmentKey)) {\r\n                validFlightsBySegment.set(segmentKey, new Set());\r\n              }\r\n              validFlightsBySegment.get(segmentKey).add(\r\n                `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`\r\n              );\r\n            });\r\n          });\r\n\r\n          // Filter and process flights\r\n          const filteredFlights = [];\r\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\r\n            const segment = newProcessedSegments[i];\r\n            if (!segment || !segment.flights) continue;\r\n\r\n            const validFlightsForSegment = validFlightsBySegment.get(i) || new Set();\r\n            \r\n            // Add valid flights from this segment\r\n            segment.flights.forEach(flight => {\r\n              const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\r\n              if (validFlightsForSegment.has(flightKey)) {\r\n                filteredFlights.push({\r\n                  ...flight,\r\n                  isSelected: false,\r\n                  segmentIndex: i\r\n                });\r\n              }\r\n            });\r\n          }\r\n\r\n          setSegmentDetails(filteredFlights);\r\n          setValidCombinations(allCombinations);\r\n\r\n          // Log flights by segment\r\n          console.log('\\n=== Flights By Segment ===');\r\n          for (let i = firstSegmentWithFlights; i <= lastSegmentIndex; i++) {\r\n            const segmentFlights = filteredFlights.filter(f => f.segmentIndex === i);\r\n            if (segmentFlights.length > 0) {\r\n              console.log(`\\nSegment ${i} (${segmentFlights[0].from}-${segmentFlights[0].to}):`);\r\n              segmentFlights\r\n                .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\r\n                .forEach(flight => {\r\n                  console.log(`  ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')})`);\r\n                });\r\n            }\r\n          }\r\n          \r\n          console.log('\\n======================');\r\n        } else {\r\n          setSegmentDetails(newProcessedSegments.flatMap((segment, index) => \r\n            segment.flights.map(flight => ({\r\n              ...flight,\r\n              isSelected: false,\r\n              segmentIndex: index\r\n            }))\r\n          ));\r\n          setValidCombinations([]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing segments:', error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    } finally {\r\n      setIsLoadingSegments(false);\r\n    }\r\n  };\r\n\r\n  const handleCalendarSearch = async (currentRoute) => {\r\n    if (!currentRoute || !apiKey) return;\r\n    \r\n    setIsLoadingAvailability(true);\r\n    \r\n    try {\r\n      // Fetch availability data\r\n      const routeString = currentRoute.join('-');\r\n      \r\n      // Add startDate parameter if available\r\n      let url = `https://backend-284998006367.us-central1.run.app/api/availability/${routeString}`;\r\n      if (startDate) {\r\n        const formattedDate = dayjs(startDate).format('YYYY-MM-DD');\r\n        url += `?startDate=${formattedDate}`;\r\n        console.log(`Using start date: ${formattedDate} for availability search`);\r\n      }\r\n      \r\n      console.log(`Fetching availability data from: ${url}`);\r\n      \r\n      const availabilityResponse = await fetch(\r\n        url,\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'accept': 'application/json',\r\n            'Partner-Authorization': apiKey\r\n          }\r\n        }\r\n      );\r\n\r\n      if (availabilityResponse.ok) {\r\n        const availabilityResult = await availabilityResponse.json();\r\n        console.log(`Received ${availabilityResult.length} availability records`);\r\n        \r\n        // Process availability data into a more usable format\r\n        const processedAvailability = {};\r\n        availabilityResult.forEach(item => {\r\n          const dateKey = item.date;\r\n          if (!processedAvailability[dateKey]) {\r\n            processedAvailability[dateKey] = [];\r\n          }\r\n          \r\n          processedAvailability[dateKey].push({\r\n            route: `${item.originAirport}-${item.destinationAirport}`,\r\n            classes: {\r\n              Y: item.YDirect,\r\n              J: item.JDirect,\r\n              F: item.FDirect\r\n            },\r\n            ID: item.ID,\r\n            distance: item.distance,\r\n            date: item.date,\r\n            Source: item.Source\r\n          });\r\n        });\r\n        \r\n        setAvailabilityData(processedAvailability);\r\n      } else {\r\n        console.error('Failed to fetch availability data:', availabilityResponse.status);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching availability data:', error);\r\n    } finally {\r\n      setIsLoadingAvailability(false);\r\n    }\r\n  };\r\n\r\n  const resetDetails = () => {\r\n    // Clear all data states\r\n    setSegmentDetails([]);\r\n    setIsLoadingSegments(false);\r\n    setSelectedFlights({});\r\n    setValidCombinations([]);\r\n    setProcessedSegments([]);\r\n    setOriginalFlights(null);\r\n    setProcessedFlights(null);\r\n    setInitialFlights(null);\r\n    setAvailabilityData({});\r\n    setIsLoadingAvailability(false);\r\n    setStartDate(null); // Clear the start date\r\n    \r\n    // Note: We don't clear selectedDates here because we do it explicitly in the modal close handler\r\n    \r\n    // Reset the combinations reference\r\n    combinationsRef.current = [];\r\n    \r\n    // Clear any stopover information in the FlightAvailabilityCalendar\r\n    if (window.clearStopoverInfo && typeof window.clearStopoverInfo === 'function') {\r\n      window.clearStopoverInfo();\r\n    }\r\n    \r\n    // Clear calendar display\r\n    if (window.hideCalendar && typeof window.hideCalendar === 'function') {\r\n      window.hideCalendar();\r\n    }\r\n  };\r\n\r\n  const handleFlightSelect = (flight, segmentIndex) => {\r\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\r\n    console.log('\\nAttempting to select/deselect:', flightKey, 'in segment:', segmentIndex);\r\n    \r\n    setSelectedFlights(prevSelected => {\r\n      const newSelected = { ...prevSelected };\r\n      \r\n      // Check if this exact flight is already selected\r\n      const isCurrentlySelected = newSelected[segmentIndex]?.some?.(f => {\r\n        const matches = f.flightNumber === flight.flightNumber && \r\n                       dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt));\r\n        if (matches) {\r\n          console.log(`Found existing selection: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\r\n        }\r\n        return matches;\r\n      });\r\n\r\n      if (isCurrentlySelected) {\r\n        // Remove only this specific flight from the selection\r\n        console.log(`\\nDESELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) from segment ${segmentIndex}`);\r\n        newSelected[segmentIndex] = newSelected[segmentIndex].filter(f => {\r\n          const keep = !(f.flightNumber === flight.flightNumber && \r\n                        dayjs(f.DepartsAt).isSame(dayjs(flight.DepartsAt)));\r\n          if (!keep) {\r\n            console.log(`Removed flight: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\r\n          }\r\n          return keep;\r\n        });\r\n        if (newSelected[segmentIndex].length === 0) {\r\n          console.log(`Removing empty segment ${segmentIndex}`);\r\n          delete newSelected[segmentIndex];\r\n        }\r\n      } else {\r\n        // Add this flight to the selections\r\n        if (!newSelected[segmentIndex]) {\r\n          newSelected[segmentIndex] = [];\r\n        }\r\n        newSelected[segmentIndex].push(flight);\r\n        console.log(`\\nSELECTING: ${flight.flightNumber} (${dayjs(flight.DepartsAt).format('MM-DD HH:mm')}) in segment ${segmentIndex}`);\r\n      }\r\n\r\n      // Log all current selections\r\n      console.log('\\nALL CURRENT SELECTIONS:');\r\n      Object.entries(newSelected).forEach(([idx, flights]) => {\r\n        if (Array.isArray(flights)) {\r\n          flights.forEach(f => {\r\n            console.log(`Segment ${idx}: ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`);\r\n          });\r\n        }\r\n      });\r\n\r\n      // Use combinations from the ref\r\n      const currentCombos = combinationsRef.current;\r\n      const firstSegmentWithFlights = Math.min(...segmentDetails\r\n        .filter(f => !f.hidden)\r\n        .map(f => f.segmentIndex));\r\n      \r\n      console.log('\\nChecking combinations:', currentCombos.map(combo => \r\n        combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')\r\n      ));\r\n\r\n      // Find combinations that contain the selected flight(s)\r\n      const validCombos = currentCombos.filter(combo => {\r\n        // If no selections, all combinations are valid\r\n        if (Object.keys(newSelected).length === 0) return true;\r\n\r\n        // Check if this combination contains all selected flights\r\n        const isValid = Object.entries(newSelected).every(([segIdx, flights]) => {\r\n          const selectedFlight = flights[0];\r\n          // Adjust index based on first segment with flights\r\n          const comboIndex = parseInt(segIdx, 10) - firstSegmentWithFlights;\r\n          const comboFlight = combo[comboIndex];\r\n          \r\n          const matches = comboFlight?.flightNumber === selectedFlight.flightNumber &&\r\n                         dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm') === \r\n                         dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm');\r\n          \r\n          console.log(`Checking combo flight in segment ${segIdx}:`, {\r\n            selected: `${selectedFlight.flightNumber} (${dayjs(selectedFlight.DepartsAt).format('MM-DD HH:mm')})`,\r\n            combo: comboFlight ? `${comboFlight.flightNumber} (${dayjs(comboFlight.DepartsAt).format('MM-DD HH:mm')})` : 'none',\r\n            comboIndex,\r\n            matches\r\n          });\r\n          \r\n          return matches;\r\n        });\r\n\r\n        return isValid;\r\n      });\r\n\r\n      console.log('\\nValid combinations:', validCombos.map(combo => \r\n        combo.map(f => `${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`).join(' → ')\r\n      ));\r\n\r\n      // Create a set of all flights that appear in valid combinations\r\n      const validFlights = new Set();\r\n      validCombos.forEach(combo => {\r\n        combo.forEach(f => {\r\n          if (!f) return;\r\n          const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\r\n          validFlights.add(key);\r\n        });\r\n      });\r\n\r\n      // Update visibility\r\n      setSegmentDetails(prevDetails => \r\n        prevDetails.map(f => {\r\n          const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\r\n          const isSelected = newSelected[f.segmentIndex]?.some(sf => \r\n            sf.flightNumber === f.flightNumber && \r\n            dayjs(sf.DepartsAt).format('MM-DD HH:mm') === dayjs(f.DepartsAt).format('MM-DD HH:mm')\r\n          ) || false;\r\n\r\n          return {\r\n            ...f,\r\n            isSelected,\r\n            hidden: Object.keys(newSelected).length > 0 && !isSelected && !validFlights.has(flightKey)\r\n          };\r\n        })\r\n      );\r\n\r\n      return newSelected;\r\n    });\r\n  };\r\n\r\n  const columns = useMemo(() => {\r\n    if (!selectedDates) return getColumns(handleFlightSelect);\r\n    const [startDate] = selectedDates;\r\n    return getColumns(handleFlightSelect, dayjs(startDate).startOf('day'));\r\n  }, [handleFlightSelect, selectedDates, getColumns]);\r\n\r\n  // Initialize segment details\r\n  useEffect(() => {\r\n    if (initialCombinations.length > 0) {\r\n      const allFlights = initialCombinations.flatMap((combo, comboIndex) => \r\n        combo.map((f, idx) => ({\r\n          ...f,\r\n          isSelected: false,\r\n          segmentIndex: idx\r\n        }))\r\n      );\r\n\r\n      const uniqueFlights = Array.from(\r\n        new Map(allFlights.map(f => [\r\n          `${f.flightNumber}_${f.segmentIndex}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`,\r\n          f\r\n        ])).values()\r\n      );\r\n\r\n      setSegmentDetails(uniqueFlights);\r\n    }\r\n  }, [initialCombinations]);\r\n\r\n  return {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    handleCalendarSearch,\r\n    resetDetails,\r\n    columns,\r\n    selectedFlights,\r\n    availabilityData,\r\n    isLoadingAvailability,\r\n    startDate,\r\n    setStartDate,\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}