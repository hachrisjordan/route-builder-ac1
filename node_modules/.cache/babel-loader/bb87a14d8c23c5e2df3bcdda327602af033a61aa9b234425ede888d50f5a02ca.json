{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nguyen77\\\\docker-neo4j\\\\route-builder-ac1\\\\src\\\\components\\\\FlightSearch\\\\FlightDetailsModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Modal, DatePicker, Input, Spin, Table, Button, Typography, Pagination, Space } from 'antd';\nimport dayjs from 'dayjs';\nimport { getSegmentColumns } from './segmentColumns';\nimport useFlightDetails from './hooks/useFlightDetails';\nimport FlightAvailabilityCalendar from './FlightAvailabilityCalendar';\nimport airlines from './data/airlines';\nimport { airports } from './data/airports';\nimport pricingData from './data/pricing.json';\nimport { CalendarOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  RangePicker\n} = DatePicker;\nconst FlightDetailsModal = ({\n  isVisible,\n  currentRoute,\n  onClose,\n  startDay\n}) => {\n  _s();\n  const [dateRangeError, setDateRangeError] = useState(false);\n  const {\n    selectedDates,\n    setSelectedDates,\n    apiKey,\n    setApiKey,\n    segmentDetails,\n    isLoadingSegments,\n    handleDateSearch,\n    handleCalendarSearch,\n    resetDetails,\n    columns,\n    selectedFlights,\n    availabilityData,\n    isLoadingAvailability,\n    setStartDate,\n    startDate\n  } = useFlightDetails(() => getSegmentColumns(startDay), startDay);\n\n  // Add pagination state with sorting\n  const [paginationState, setPaginationState] = useState({});\n\n  // Add pagination config\n  const paginationConfig = {\n    pageSize: 5,\n    showSizeChanger: true,\n    pageSizeOptions: ['5', '10', '20', '50']\n  };\n\n  // Add state to control calendar visibility\n  const [showCalendar, setShowCalendar] = useState(false);\n\n  // Function to handle pagination change\n  const handlePaginationChange = (segmentIndex, page, pageSize) => {\n    setPaginationState(prev => ({\n      ...prev,\n      [segmentIndex]: {\n        ...prev[segmentIndex],\n        // Preserve sorting if it exists\n        page,\n        pageSize\n      }\n    }));\n  };\n\n  // Function to get paginated data for a segment\n  const getPaginatedData = (flights, segmentIndex) => {\n    const {\n      page = 1,\n      pageSize = paginationConfig.pageSize\n    } = paginationState[segmentIndex] || {};\n    const start = (page - 1) * pageSize;\n    const end = start + pageSize;\n    return flights.slice(start, end);\n  };\n\n  // Clear data when modal closes\n  useEffect(() => {\n    if (!isVisible) {\n      resetDetails();\n      setDateRangeError(false);\n      setSelectedDates(null);\n      setApiKey('');\n      setShowCalendar(false);\n    }\n  }, [isVisible]);\n  const handleOk = () => {\n    handleDateSearch(currentRoute);\n  };\n  const handleCancel = () => {\n    onClose();\n  };\n  const handleCalendarDateSelect = dateRange => {\n    setSelectedDates(dateRange);\n    setDateRangeError(false);\n  };\n\n  // Update the handleCalendarSearch function\n  const handleCalendarSearchClick = () => {\n    // Show the calendar component\n    setShowCalendar(true);\n\n    // Call the original calendar search function\n    handleCalendarSearch(currentRoute);\n\n    // After a short delay to ensure the calendar component is rendered,\n    // try multiple approaches to open the calendar\n    setTimeout(() => {\n      // Try to find and click the calendar button\n      const calendarButtons = document.querySelectorAll('.flight-availability-calendar .ant-picker-calendar-header button, .flight-availability-calendar .ant-picker-calendar-date-panel');\n      if (calendarButtons.length > 0) {\n        // Try each button we found\n        calendarButtons.forEach(button => {\n          try {\n            button.click();\n          } catch (e) {\n            console.log('Failed to click button:', e);\n          }\n        });\n      } else {\n        console.log('No calendar buttons found');\n\n        // Alternative approach: try to dispatch a custom event\n        const calendarElement = document.querySelector('.flight-availability-calendar .ant-picker-calendar');\n        if (calendarElement) {\n          try {\n            // Create and dispatch a custom event to signal the calendar to open\n            const event = new CustomEvent('openCalendar', {\n              bubbles: true\n            });\n            calendarElement.dispatchEvent(event);\n          } catch (e) {\n            console.log('Failed to dispatch event:', e);\n          }\n        }\n      }\n    }, 500); // Increased delay to ensure component is fully rendered\n  };\n\n  // Function to group flights by segment with safety checks\n  const getSegmentTables = () => {\n    if (!segmentDetails || segmentDetails.length === 0) return [];\n\n    // Group flights by segment and filter out hidden flights\n    const segments = segmentDetails.reduce((acc, flight) => {\n      if (flight.hidden) return acc; // Skip hidden flights\n\n      if (!acc[flight.segmentIndex]) {\n        acc[flight.segmentIndex] = {\n          index: flight.segmentIndex,\n          route: `${flight.from}-${flight.to}`,\n          flights: []\n        };\n      }\n      acc[flight.segmentIndex].flights.push(flight);\n      return acc;\n    }, {});\n    return Object.entries(segments).sort(([a], [b]) => parseInt(a) - parseInt(b)).map(([segmentIndex, flights]) => {\n      var _flights$flights$, _flights$flights$2;\n      // Create a deep copy of flights to avoid modifying the original data\n      const flightsCopy = JSON.parse(JSON.stringify(flights.flights));\n\n      // Get pagination state for this segment\n      const {\n        page = 1,\n        pageSize = paginationConfig.pageSize,\n        sortField,\n        sortOrder\n      } = paginationState[segmentIndex] || {};\n\n      // Sort the entire dataset if sorting is applied\n      if (sortField && sortOrder) {\n        flightsCopy.sort((a, b) => {\n          let aValue, bValue;\n\n          // Special handling for cabin class columns\n          if (sortField === 'economy' || sortField === 'business' || sortField === 'first') {\n            // For cabin classes, true sorts before false\n            aValue = a[sortField] === true ? 1 : 0;\n            bValue = b[sortField] === true ? 1 : 0;\n          } else {\n            aValue = a[sortField];\n            bValue = b[sortField];\n          }\n\n          // Handle different data types\n          if (typeof aValue === 'string' && typeof bValue === 'string') {\n            return sortOrder === 'ascend' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n          } else if (sortField === 'duration') {\n            // For duration, convert to minutes if it's a string like \"2h 30m\"\n            if (typeof aValue === 'string' && aValue.includes('h')) {\n              const [aHours, aMinutes] = aValue.split('h').map(part => parseInt(part) || 0);\n              aValue = aHours * 60 + aMinutes;\n            }\n            if (typeof bValue === 'string' && bValue.includes('h')) {\n              const [bHours, bMinutes] = bValue.split('h').map(part => parseInt(part) || 0);\n              bValue = bHours * 60 + bMinutes;\n            }\n            return sortOrder === 'ascend' ? aValue - bValue : bValue - aValue;\n          } else {\n            // For numbers and other types\n            return sortOrder === 'ascend' ? aValue > bValue ? 1 : -1 : bValue > aValue ? 1 : -1;\n          }\n        });\n      }\n\n      // Calculate pagination\n      const start = (page - 1) * pageSize;\n      const end = start + pageSize;\n      const paginatedFlights = flightsCopy.slice(start, end);\n      return {\n        index: parseInt(segmentIndex),\n        route: `${((_flights$flights$ = flights.flights[0]) === null || _flights$flights$ === void 0 ? void 0 : _flights$flights$.from) || '?'}-${((_flights$flights$2 = flights.flights[0]) === null || _flights$flights$2 === void 0 ? void 0 : _flights$flights$2.to) || '?'}`,\n        flights: paginatedFlights,\n        allFlights: flightsCopy,\n        // Keep the full sorted dataset\n        total: flightsCopy.length\n      };\n    });\n  };\n\n  // Update the handleTableChange function to handle sorting\n  const handleTableChange = (segmentIndex, pagination, filters, sorter) => {\n    setPaginationState(prev => ({\n      ...prev,\n      [segmentIndex]: {\n        page: pagination.current,\n        pageSize: pagination.pageSize,\n        sortField: sorter.field,\n        sortOrder: sorter.order\n      }\n    }));\n  };\n\n  // Handle modal close with complete cleanup\n  const handleModalClose = () => {\n    // Reset all details including selected dates\n    resetDetails();\n\n    // Explicitly clear selected dates\n    setSelectedDates(null);\n\n    // Call the parent's onClose handler\n    onClose();\n  };\n\n  // Calculate total journey duration by summing segment durations and layovers\n  const calculateTotalDuration = segments => {\n    try {\n      let totalMinutes = 0;\n\n      // Add each segment's flight duration\n      segments.forEach(segmentIndex => {\n        var _selectedFlights$segm;\n        const flight = (_selectedFlights$segm = selectedFlights[segmentIndex]) === null || _selectedFlights$segm === void 0 ? void 0 : _selectedFlights$segm[0];\n        if (flight) {\n          // Convert duration string (e.g., \"6:25\" or \"6h 25m\") to minutes\n          if (typeof flight.duration === 'string') {\n            if (flight.duration.includes('h')) {\n              // Format: \"6h 25m\"\n              const [hours, minutes] = flight.duration.split('h').map(part => parseInt(part.replace(/[^0-9]/g, '') || 0));\n              totalMinutes += hours * 60 + minutes;\n            } else if (flight.duration.includes(':')) {\n              // Format: \"6:25\"\n              const [hours, minutes] = flight.duration.split(':').map(Number);\n              totalMinutes += hours * 60 + minutes;\n            } else {\n              // Try to parse as number\n              totalMinutes += parseInt(flight.duration) || 0;\n            }\n          } else if (typeof flight.duration === 'number') {\n            totalMinutes += flight.duration;\n          }\n        }\n      });\n\n      // Add layover durations between segments\n      for (let i = 0; i < segments.length - 1; i++) {\n        var _selectedFlights$segm2, _selectedFlights$segm3;\n        const currentSegment = (_selectedFlights$segm2 = selectedFlights[segments[i]]) === null || _selectedFlights$segm2 === void 0 ? void 0 : _selectedFlights$segm2[0];\n        const nextSegment = (_selectedFlights$segm3 = selectedFlights[segments[i + 1]]) === null || _selectedFlights$segm3 === void 0 ? void 0 : _selectedFlights$segm3[0];\n        if (currentSegment && nextSegment) {\n          const arrivalTime = dayjs(currentSegment.ArrivesAt);\n          const departureTime = dayjs(nextSegment.DepartsAt);\n          const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n          totalMinutes += layoverMinutes;\n        }\n      }\n\n      // Format the total duration\n      const hours = Math.floor(totalMinutes / 60);\n      const minutes = totalMinutes % 60;\n      return `${hours}h ${minutes}m`;\n    } catch (error) {\n      console.error('Error calculating total duration:', error);\n      return 'N/A';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: \"Flight Details\",\n    open: isVisible,\n    onCancel: () => {\n      onClose();\n      resetDetails();\n    },\n    footer: null,\n    width: 1600,\n    styles: {\n      body: {\n        padding: '12px',\n        maxWidth: '100%'\n      },\n      wrapper: {\n        top: '16px'\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 16\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '8px',\n          marginBottom: 16\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '8px',\n            flex: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Enter your yapping password (Under Development)\",\n            value: apiKey,\n            onChange: e => setApiKey(e.target.value),\n            style: {\n              flex: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              type: \"text\",\n              icon: /*#__PURE__*/_jsxDEV(CalendarOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 23\n              }, this),\n              style: {\n                padding: '0 8px',\n                marginRight: 4\n              },\n              onClick: () => {\n                // Find the DatePicker input and programmatically click it\n                const datePickerInput = document.querySelector('.calendar-start-picker input');\n                if (datePickerInput) datePickerInput.click();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n              placeholder: \"Calendar start on (optional)\",\n              onChange: date => setStartDate(date),\n              disabledDate: current => {\n                // Disable dates before today and after 330 days from today\n                const today = dayjs().startOf('day');\n                const maxDate = today.add(305, 'days');\n                return current && (current < today || current > maxDate);\n              },\n              style: {\n                width: 200\n              },\n              className: \"calendar-start-picker\",\n              suffixIcon: null // Remove the default calendar icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            disabled: !apiKey || !apiKey.toLowerCase().startsWith('pro'),\n            onClick: handleCalendarSearchClick,\n            children: \"Apply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), showCalendar && /*#__PURE__*/_jsxDEV(FlightAvailabilityCalendar, {\n      flightData: availabilityData,\n      currentRoute: currentRoute,\n      onDateRangeSelect: handleCalendarDateSelect,\n      selectedRange: selectedDates,\n      onSearch: handleCalendarSearchClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }, this), isLoadingSegments ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        margin: '20px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 9\n    }, this) : (segmentDetails === null || segmentDetails === void 0 ? void 0 : segmentDetails.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n        level: 4,\n        style: {\n          marginBottom: 16\n        },\n        children: \"Flights By Segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }, this), getSegmentTables().map((segment, index) => {\n        var _paginationState$segm, _paginationState$segm2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 16\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              marginBottom: 12\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n              level: 5,\n              style: {\n                margin: 0\n              },\n              children: [\"Segment \", segment.index + 1, \" (\", segment.route, \"):\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Pagination, {\n                size: \"small\",\n                total: segment.total,\n                pageSize: ((_paginationState$segm = paginationState[segment.index]) === null || _paginationState$segm === void 0 ? void 0 : _paginationState$segm.pageSize) || paginationConfig.pageSize,\n                current: ((_paginationState$segm2 = paginationState[segment.index]) === null || _paginationState$segm2 === void 0 ? void 0 : _paginationState$segm2.page) || 1,\n                onChange: (page, pageSize) => handlePaginationChange(segment.index, page, pageSize),\n                showSizeChanger: true,\n                showTotal: (total, range) => `${range[0]}-${range[1]} of ${total}`,\n                style: {\n                  display: 'inline-block',\n                  marginBottom: 0\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Table, {\n            columns: columns,\n            dataSource: segment.flights,\n            pagination: false,\n            size: \"small\",\n            onChange: (pagination, filters, sorter) => handleTableChange(segment.index, pagination, filters, sorter)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 17\n          }, this), index < getSegmentTables().length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: '0px',\n              margin: '16px',\n              textAlign: 'center',\n              fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography.Text, {\n              strong: true,\n              children: (() => {\n                const currentSegmentFlights = selectedFlights[segment.index];\n                const nextSegmentFlights = selectedFlights[segment.index + 1];\n                if (!(currentSegmentFlights !== null && currentSegmentFlights !== void 0 && currentSegmentFlights[0]) || !(nextSegmentFlights !== null && nextSegmentFlights !== void 0 && nextSegmentFlights[0])) {\n                  return 'Select flights to see connection time';\n                }\n                const currentFlight = currentSegmentFlights[0];\n                const nextFlight = nextSegmentFlights[0];\n                const arrivalTime = dayjs(currentFlight.ArrivesAt);\n                const departureTime = dayjs(nextFlight.DepartsAt);\n                const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n\n                // If layover is more than 24 hours, show as stopover\n                if (layoverMinutes >= 24 * 60) {\n                  const days = Math.floor(layoverMinutes / (24 * 60));\n                  const remainingHours = Math.floor(layoverMinutes % (24 * 60) / 60);\n                  const remainingMinutes = layoverMinutes % 60;\n                  return `Stopover duration: ${days} day${days > 1 ? 's' : ''} ${remainingHours}h ${remainingMinutes}m`;\n                } else {\n                  // Regular layover display\n                  const hours = Math.floor(layoverMinutes / 60);\n                  const minutes = layoverMinutes % 60;\n                  return `Layover duration: ${hours}h ${minutes}m`;\n                }\n              })()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 19\n          }, this)]\n        }, segment.index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 11\n    }, this), Object.keys(selectedFlights).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 24\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n        level: 4,\n        children: \"Journey Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        columns: [{\n          title: 'From',\n          dataIndex: 'from',\n          key: 'from'\n        }, {\n          title: 'To',\n          dataIndex: 'to',\n          key: 'to'\n        }, {\n          title: 'Airlines',\n          dataIndex: 'airlines',\n          key: 'airlines',\n          render: airlinesList => {\n            // More thorough safety checks\n            if (!airlinesList || airlinesList === '-') return '-';\n            try {\n              const airlineArray = Array.isArray(airlinesList) ? airlinesList : airlinesList.split(', ');\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  flexDirection: 'column',\n                  gap: '4px'\n                },\n                children: airlineArray.map((airlineName, index) => {\n                  if (!airlineName) return null;\n                  const airline = airlines.find(a => {\n                    var _a$label;\n                    return airlineName.startsWith((_a$label = a.label) === null || _a$label === void 0 ? void 0 : _a$label.replace(` (${a.value})`, ''));\n                  });\n                  const airlineCode = airline === null || airline === void 0 ? void 0 : airline.value;\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: '8px'\n                    },\n                    children: [airlineCode && /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: `${process.env.PUBLIC_URL}/${airlineCode}.png`,\n                      alt: airlineCode,\n                      style: {\n                        width: '24px',\n                        height: '24px',\n                        objectFit: 'contain',\n                        borderRadius: '4px'\n                      },\n                      onError: e => {\n                        e.target.style.display = 'none';\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 504,\n                      columnNumber: 33\n                    }, this), airlineName]\n                  }, `${airlineCode}-${index}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 502,\n                    columnNumber: 29\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 23\n              }, this);\n            } catch (error) {\n              console.error('Error rendering airlines:', error);\n              return '-';\n            }\n          }\n        }, {\n          title: 'Duration',\n          dataIndex: 'duration',\n          key: 'duration'\n        }, {\n          title: 'Departs',\n          dataIndex: 'departs',\n          key: 'departs'\n        }, {\n          title: 'Arrives',\n          dataIndex: 'arrives',\n          key: 'arrives'\n        }, {\n          title: 'Economy Price',\n          dataIndex: 'economyPrice',\n          key: 'economyPrice',\n          onCell: (_, index) => ({\n            rowSpan: index === 0 ? 2 : 0 // Show only in first row\n          })\n        }, {\n          title: 'Business Price (Max %)',\n          dataIndex: 'businessPrice',\n          key: 'businessPrice',\n          onCell: (_, index) => ({\n            rowSpan: index === 0 ? 2 : 0 // Show only in first row\n          }),\n          render: text => {\n            if (!text || text === 'N/A') return text;\n            try {\n              const [price, percentage] = text.split(' (');\n              if (!percentage) return text;\n              return `${price} (${percentage}`;\n            } catch (error) {\n              return text;\n            }\n          }\n        }, {\n          title: 'First Price (Max %)',\n          dataIndex: 'firstPrice',\n          key: 'firstPrice',\n          onCell: (_, index) => ({\n            rowSpan: index === 0 ? 2 : 0 // Show only in first row\n          }),\n          render: text => {\n            if (!text || text === 'N/A') return text;\n            try {\n              const [price, percentage] = text.split(' (');\n              if (!percentage) return text;\n              return `${price} (${percentage}`;\n            } catch (error) {\n              return text;\n            }\n          }\n        }],\n        dataSource: (() => {\n          try {\n            var _selectedFlights$firs7, _selectedFlights$firs8, _selectedFlights$stop, _selectedFlights$stop2, _selectedFlights$firs9, _selectedFlights$firs10, _selectedFlights$stop3, _selectedFlights$stop4, _selectedFlights2, _selectedFlights2$, _selectedFlights$last7, _selectedFlights$last8, _selectedFlights3, _selectedFlights3$, _selectedFlights$last9, _selectedFlights$last10;\n            const segments = Object.keys(selectedFlights).map(Number).sort((a, b) => a - b);\n            if (segments.length === 0) return [];\n            const firstSegmentIndex = Math.min(...segments);\n            const lastSegmentIndex = Math.max(...segments);\n\n            // Helper function to get airlines string\n            const getAirlinesString = segmentRange => {\n              try {\n                const airlineSet = new Set(segmentRange.flatMap(i => {\n                  var _selectedFlights$i;\n                  return (_selectedFlights$i = selectedFlights[i]) === null || _selectedFlights$i === void 0 ? void 0 : _selectedFlights$i.map(f => f.airlines);\n                }).filter(Boolean));\n                return Array.from(airlineSet).join(', ') || '-';\n              } catch (error) {\n                console.error('Error getting airlines string:', error);\n                return '-';\n              }\n            };\n\n            // Debug logging\n            console.log('Selected Flights:', selectedFlights);\n            console.log('Segments:', segments);\n\n            // Calculate prices for the ENTIRE journey (origin to final destination)\n            const calculatePrices = hasStopover => {\n              try {\n                // Get origin and destination airports\n                const originAirport = airports.find(a => {\n                  var _selectedFlights$firs, _selectedFlights$firs2;\n                  return a.IATA === ((_selectedFlights$firs = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs === void 0 ? void 0 : (_selectedFlights$firs2 = _selectedFlights$firs[0]) === null || _selectedFlights$firs2 === void 0 ? void 0 : _selectedFlights$firs2.from);\n                });\n                const destAirport = airports.find(a => {\n                  var _selectedFlights$last, _selectedFlights$last2;\n                  return a.IATA === ((_selectedFlights$last = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last === void 0 ? void 0 : (_selectedFlights$last2 = _selectedFlights$last[0]) === null || _selectedFlights$last2 === void 0 ? void 0 : _selectedFlights$last2.to);\n                });\n                if (!originAirport || !destAirport) return {\n                  economyPrice: '-',\n                  businessPrice: '-',\n                  firstPrice: '-'\n                };\n\n                // Calculate total distance and cabin class distances\n                let totalDistance = 0;\n                let businessDistance = 0;\n                let firstDistance = 0;\n                let businessOnlyDistance = 0; // New: for segments with only business (no first)\n\n                Object.entries(selectedFlights).forEach(([_, flights]) => {\n                  flights.forEach(flight => {\n                    const distance = parseInt(flight.distance || 0);\n                    totalDistance += distance;\n\n                    // For Business Price: Include all segments with business class\n                    if (flight.business) businessDistance += distance;\n\n                    // For First Price: Only count business from segments without first\n                    if (flight.business && !flight.first) businessOnlyDistance += distance;\n                    if (flight.first) firstDistance += distance;\n                  });\n                });\n\n                // Find matching price in pricing data\n                const pricing = pricingData.find(p => p[\"From Region\"] === originAirport.Zone && p[\"To Region\"] === destAirport.Zone && totalDistance >= p[\"Min Distance\"] && totalDistance <= p[\"Max Distance\"]);\n                if (!pricing) return {\n                  economyPrice: '-',\n                  businessPrice: '-',\n                  firstPrice: '-'\n                };\n\n                // Calculate percentages\n                const businessPercentage = Math.round(businessDistance / totalDistance * 100);\n                const firstPercentage = Math.round(firstDistance / totalDistance * 100);\n                const businessOnlyPercentage = Math.round(businessOnlyDistance / totalDistance * 100);\n\n                // Add stopover fee if applicable\n                const stopoverExtra = hasStopover ? 5000 : 0;\n                return {\n                  economyPrice: pricing.Economy ? (pricing.Economy + stopoverExtra).toLocaleString() : '-',\n                  // If business percentage is 0, show \"-\" instead of price\n                  businessPrice: pricing.Business && businessPercentage > 0 ? `${(pricing.Business + stopoverExtra).toLocaleString()} (${businessPercentage}% J)` : '-',\n                  // If first percentage is 0, show \"-\" instead of price\n                  firstPrice: pricing.First && firstPercentage > 0 ? `${(pricing.First + stopoverExtra).toLocaleString()} (${firstPercentage > 0 && businessOnlyPercentage > 0 ? `${firstPercentage}% F, ${businessOnlyPercentage}% J` : firstPercentage > 0 ? `${firstPercentage}% F` : '0%'})` : '-'\n                };\n              } catch (error) {\n                console.error('Error calculating prices:', error);\n                return {\n                  economyPrice: '-',\n                  businessPrice: '-',\n                  firstPrice: '-'\n                };\n              }\n            };\n\n            // Find stopover point\n            let stopoverIndex = null;\n            for (let i = firstSegmentIndex; i < lastSegmentIndex; i++) {\n              var _selectedFlights$i2, _selectedFlights;\n              const currentFlight = (_selectedFlights$i2 = selectedFlights[i]) === null || _selectedFlights$i2 === void 0 ? void 0 : _selectedFlights$i2[0];\n              const nextFlight = (_selectedFlights = selectedFlights[i + 1]) === null || _selectedFlights === void 0 ? void 0 : _selectedFlights[0];\n              if (currentFlight && nextFlight) {\n                const arrivalTime = dayjs(currentFlight.ArrivesAt);\n                const departureTime = dayjs(nextFlight.DepartsAt);\n                const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\n                if (layoverMinutes >= 24 * 60) {\n                  stopoverIndex = i;\n                  break;\n                }\n              }\n            }\n\n            // Calculate prices once for the entire journey\n            const prices = calculatePrices(stopoverIndex !== null);\n\n            // Calculate total journey duration by summing segment durations and layovers\n            const totalDuration = calculateTotalDuration(segments);\n\n            // If no stopover found, return single row\n            if (stopoverIndex === null) {\n              var _selectedFlights$firs3, _selectedFlights$firs4, _selectedFlights$last3, _selectedFlights$last4, _selectedFlights$firs5, _selectedFlights$firs6, _selectedFlights$last5, _selectedFlights$last6;\n              return [{\n                key: '1',\n                from: ((_selectedFlights$firs3 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs3 === void 0 ? void 0 : (_selectedFlights$firs4 = _selectedFlights$firs3[0]) === null || _selectedFlights$firs4 === void 0 ? void 0 : _selectedFlights$firs4.from) || '-',\n                to: ((_selectedFlights$last3 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last3 === void 0 ? void 0 : (_selectedFlights$last4 = _selectedFlights$last3[0]) === null || _selectedFlights$last4 === void 0 ? void 0 : _selectedFlights$last4.to) || '-',\n                airlines: getAirlinesString(segments),\n                duration: totalDuration,\n                departs: dayjs((_selectedFlights$firs5 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs5 === void 0 ? void 0 : (_selectedFlights$firs6 = _selectedFlights$firs5[0]) === null || _selectedFlights$firs6 === void 0 ? void 0 : _selectedFlights$firs6.DepartsAt).format('HH:mm MM-DD'),\n                arrives: dayjs((_selectedFlights$last5 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last5 === void 0 ? void 0 : (_selectedFlights$last6 = _selectedFlights$last5[0]) === null || _selectedFlights$last6 === void 0 ? void 0 : _selectedFlights$last6.ArrivesAt).format('HH:mm MM-DD'),\n                ...prices\n              }];\n            }\n\n            // Split journey at stopover with merged price cells\n            return [{\n              key: '1',\n              from: ((_selectedFlights$firs7 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs7 === void 0 ? void 0 : (_selectedFlights$firs8 = _selectedFlights$firs7[0]) === null || _selectedFlights$firs8 === void 0 ? void 0 : _selectedFlights$firs8.from) || '-',\n              to: ((_selectedFlights$stop = selectedFlights[stopoverIndex]) === null || _selectedFlights$stop === void 0 ? void 0 : (_selectedFlights$stop2 = _selectedFlights$stop[0]) === null || _selectedFlights$stop2 === void 0 ? void 0 : _selectedFlights$stop2.to) || '-',\n              airlines: getAirlinesString(segments.filter(i => i <= stopoverIndex)),\n              duration: calculateTotalDuration(segments.filter(i => i <= stopoverIndex)),\n              departs: dayjs((_selectedFlights$firs9 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs9 === void 0 ? void 0 : (_selectedFlights$firs10 = _selectedFlights$firs9[0]) === null || _selectedFlights$firs10 === void 0 ? void 0 : _selectedFlights$firs10.DepartsAt).format('HH:mm MM-DD'),\n              arrives: dayjs((_selectedFlights$stop3 = selectedFlights[stopoverIndex]) === null || _selectedFlights$stop3 === void 0 ? void 0 : (_selectedFlights$stop4 = _selectedFlights$stop3[0]) === null || _selectedFlights$stop4 === void 0 ? void 0 : _selectedFlights$stop4.ArrivesAt).format('HH:mm MM-DD'),\n              ...prices // Same prices for first row\n            }, {\n              key: '2',\n              from: ((_selectedFlights2 = selectedFlights[stopoverIndex + 1]) === null || _selectedFlights2 === void 0 ? void 0 : (_selectedFlights2$ = _selectedFlights2[0]) === null || _selectedFlights2$ === void 0 ? void 0 : _selectedFlights2$.from) || '-',\n              to: ((_selectedFlights$last7 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last7 === void 0 ? void 0 : (_selectedFlights$last8 = _selectedFlights$last7[0]) === null || _selectedFlights$last8 === void 0 ? void 0 : _selectedFlights$last8.to) || '-',\n              airlines: getAirlinesString(segments.filter(i => i > stopoverIndex)),\n              duration: calculateTotalDuration(segments.filter(i => i > stopoverIndex)),\n              departs: dayjs((_selectedFlights3 = selectedFlights[stopoverIndex + 1]) === null || _selectedFlights3 === void 0 ? void 0 : (_selectedFlights3$ = _selectedFlights3[0]) === null || _selectedFlights3$ === void 0 ? void 0 : _selectedFlights3$.DepartsAt).format('HH:mm MM-DD'),\n              arrives: dayjs((_selectedFlights$last9 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last9 === void 0 ? void 0 : (_selectedFlights$last10 = _selectedFlights$last9[0]) === null || _selectedFlights$last10 === void 0 ? void 0 : _selectedFlights$last10.ArrivesAt).format('HH:mm MM-DD'),\n              economyPrice: null,\n              // Will be hidden by rowSpan\n              businessPrice: null,\n              // Will be hidden by rowSpan\n              firstPrice: null // Will be hidden by rowSpan\n            }];\n          } catch (error) {\n            console.error('Error generating dataSource:', error);\n            return [];\n          }\n        })(),\n        pagination: false,\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 12,\n          fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography.Text, {\n          children: (() => {\n            const firstSegmentIndex = Math.min(...Object.keys(selectedFlights).map(Number));\n            const lastSegmentIndex = Math.max(...Object.keys(selectedFlights).map(Number));\n            const originAirport = airports.find(a => {\n              var _selectedFlights$firs11, _selectedFlights$firs12;\n              return a.IATA === ((_selectedFlights$firs11 = selectedFlights[firstSegmentIndex]) === null || _selectedFlights$firs11 === void 0 ? void 0 : (_selectedFlights$firs12 = _selectedFlights$firs11[0]) === null || _selectedFlights$firs12 === void 0 ? void 0 : _selectedFlights$firs12.from);\n            });\n            const destAirport = airports.find(a => {\n              var _selectedFlights$last11, _selectedFlights$last12;\n              return a.IATA === ((_selectedFlights$last11 = selectedFlights[lastSegmentIndex]) === null || _selectedFlights$last11 === void 0 ? void 0 : (_selectedFlights$last12 = _selectedFlights$last11[0]) === null || _selectedFlights$last12 === void 0 ? void 0 : _selectedFlights$last12.to);\n            });\n            if (!originAirport || !destAirport) return 'Unable to validate route: airport data missing';\n\n            // Haversine formula\n            const R = 3959; // Earth's radius in miles\n            const lat1 = originAirport.Latitude * Math.PI / 180;\n            const lat2 = destAirport.Latitude * Math.PI / 180;\n            const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n            const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            const directDistance = Math.round(R * c);\n\n            // Calculate total segment distance\n            let totalSegmentDistance = 0;\n            Object.values(selectedFlights).forEach(flights => {\n              flights.forEach(flight => {\n                totalSegmentDistance += parseInt(flight.distance || 0);\n              });\n            });\n            const isValid = totalSegmentDistance <= 2 * directDistance;\n            const percentage = Math.round(totalSegmentDistance / directDistance * 100);\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginTop: 8,\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                  color: isValid ? '#52c41a' : '#f5222d',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  gap: '8px',\n                  width: '100%'\n                },\n                children: isValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"\\u2713\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 820,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"ROUTING VALIDATED\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 821,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"\\u2717\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 825,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"THIS ROUTING IS INVALID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 826,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 807,\n                columnNumber: 21\n              }, this)\n            }, void 0, false);\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 771,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 770,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        :global(.ant-table) {\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 838,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to format duration\n_s(FlightDetailsModal, \"9EZhkO1zEgogISE8oIE8tfqTmKo=\", false, function () {\n  return [useFlightDetails];\n});\n_c = FlightDetailsModal;\nconst formatDuration = duration => {\n  if (typeof duration === 'string' && duration.includes('h')) {\n    return duration; // Already formatted\n  }\n\n  // If it's a number (minutes)\n  if (typeof duration === 'number') {\n    const hours = Math.floor(duration / 60);\n    const minutes = duration % 60;\n    return `${hours}h ${minutes}m`;\n  }\n  return duration; // Return as is if we can't format it\n};\nexport default FlightDetailsModal;\nvar _c;\n$RefreshReg$(_c, \"FlightDetailsModal\");","map":{"version":3,"names":["React","useState","useEffect","Modal","DatePicker","Input","Spin","Table","Button","Typography","Pagination","Space","dayjs","getSegmentColumns","useFlightDetails","FlightAvailabilityCalendar","airlines","airports","pricingData","CalendarOutlined","jsxDEV","_jsxDEV","Fragment","_Fragment","RangePicker","FlightDetailsModal","isVisible","currentRoute","onClose","startDay","_s","dateRangeError","setDateRangeError","selectedDates","setSelectedDates","apiKey","setApiKey","segmentDetails","isLoadingSegments","handleDateSearch","handleCalendarSearch","resetDetails","columns","selectedFlights","availabilityData","isLoadingAvailability","setStartDate","startDate","paginationState","setPaginationState","paginationConfig","pageSize","showSizeChanger","pageSizeOptions","showCalendar","setShowCalendar","handlePaginationChange","segmentIndex","page","prev","getPaginatedData","flights","start","end","slice","handleOk","handleCancel","handleCalendarDateSelect","dateRange","handleCalendarSearchClick","setTimeout","calendarButtons","document","querySelectorAll","length","forEach","button","click","e","console","log","calendarElement","querySelector","event","CustomEvent","bubbles","dispatchEvent","getSegmentTables","segments","reduce","acc","flight","hidden","index","route","from","to","push","Object","entries","sort","a","b","parseInt","map","_flights$flights$","_flights$flights$2","flightsCopy","JSON","parse","stringify","sortField","sortOrder","aValue","bValue","localeCompare","includes","aHours","aMinutes","split","part","bHours","bMinutes","paginatedFlights","allFlights","total","handleTableChange","pagination","filters","sorter","current","field","order","handleModalClose","calculateTotalDuration","totalMinutes","_selectedFlights$segm","duration","hours","minutes","replace","Number","i","_selectedFlights$segm2","_selectedFlights$segm3","currentSegment","nextSegment","arrivalTime","ArrivesAt","departureTime","DepartsAt","layoverMinutes","diff","Math","floor","error","title","open","onCancel","footer","width","styles","body","padding","maxWidth","wrapper","top","children","style","marginBottom","display","gap","flex","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","alignItems","type","icon","marginRight","onClick","datePickerInput","date","disabledDate","today","startOf","maxDate","add","className","suffixIcon","disabled","toLowerCase","startsWith","flightData","onDateRangeSelect","selectedRange","onSearch","textAlign","margin","marginTop","Title","level","segment","_paginationState$segm","_paginationState$segm2","justifyContent","size","showTotal","range","dataSource","fontFamily","Text","strong","currentSegmentFlights","nextSegmentFlights","currentFlight","nextFlight","days","remainingHours","remainingMinutes","keys","dataIndex","key","render","airlinesList","airlineArray","Array","isArray","flexDirection","airlineName","airline","find","_a$label","label","airlineCode","src","process","env","PUBLIC_URL","alt","height","objectFit","borderRadius","onError","onCell","_","rowSpan","text","price","percentage","_selectedFlights$firs7","_selectedFlights$firs8","_selectedFlights$stop","_selectedFlights$stop2","_selectedFlights$firs9","_selectedFlights$firs10","_selectedFlights$stop3","_selectedFlights$stop4","_selectedFlights2","_selectedFlights2$","_selectedFlights$last7","_selectedFlights$last8","_selectedFlights3","_selectedFlights3$","_selectedFlights$last9","_selectedFlights$last10","firstSegmentIndex","min","lastSegmentIndex","max","getAirlinesString","segmentRange","airlineSet","Set","flatMap","_selectedFlights$i","f","filter","Boolean","join","calculatePrices","hasStopover","originAirport","_selectedFlights$firs","_selectedFlights$firs2","IATA","destAirport","_selectedFlights$last","_selectedFlights$last2","economyPrice","businessPrice","firstPrice","totalDistance","businessDistance","firstDistance","businessOnlyDistance","distance","business","first","pricing","p","Zone","businessPercentage","round","firstPercentage","businessOnlyPercentage","stopoverExtra","Economy","toLocaleString","Business","First","stopoverIndex","_selectedFlights$i2","_selectedFlights","prices","totalDuration","_selectedFlights$firs3","_selectedFlights$firs4","_selectedFlights$last3","_selectedFlights$last4","_selectedFlights$firs5","_selectedFlights$firs6","_selectedFlights$last5","_selectedFlights$last6","departs","format","arrives","_selectedFlights$firs11","_selectedFlights$firs12","_selectedFlights$last11","_selectedFlights$last12","R","lat1","Latitude","PI","lat2","dLat","dLon","Longitude","sin","cos","c","atan2","sqrt","directDistance","totalSegmentDistance","values","isValid","fontSize","fontWeight","color","jsx","_c","formatDuration","$RefreshReg$"],"sources":["C:/Users/nguyen77/docker-neo4j/route-builder-ac1/src/components/FlightSearch/FlightDetailsModal.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Modal, DatePicker, Input, Spin, Table, Button, Typography, Pagination, Space } from 'antd';\r\nimport dayjs from 'dayjs';\r\nimport { getSegmentColumns } from './segmentColumns';\r\nimport useFlightDetails from './hooks/useFlightDetails';\r\nimport FlightAvailabilityCalendar from './FlightAvailabilityCalendar';\r\nimport airlines from './data/airlines';\r\nimport { airports } from './data/airports';\r\nimport pricingData from './data/pricing.json';\r\nimport { CalendarOutlined } from '@ant-design/icons';\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst FlightDetailsModal = ({ isVisible, currentRoute, onClose, startDay }) => {\r\n  const [dateRangeError, setDateRangeError] = useState(false);\r\n  const {\r\n    selectedDates,\r\n    setSelectedDates,\r\n    apiKey,\r\n    setApiKey,\r\n    segmentDetails,\r\n    isLoadingSegments,\r\n    handleDateSearch,\r\n    handleCalendarSearch,\r\n    resetDetails,\r\n    columns,\r\n    selectedFlights,\r\n    availabilityData,\r\n    isLoadingAvailability,\r\n    setStartDate,\r\n    startDate,\r\n  } = useFlightDetails(() => getSegmentColumns(startDay), startDay);\r\n\r\n  // Add pagination state with sorting\r\n  const [paginationState, setPaginationState] = useState({});\r\n  \r\n  // Add pagination config\r\n  const paginationConfig = {\r\n    pageSize: 5,\r\n    showSizeChanger: true,\r\n    pageSizeOptions: ['5', '10', '20', '50'],\r\n  };\r\n\r\n  // Add state to control calendar visibility\r\n  const [showCalendar, setShowCalendar] = useState(false);\r\n\r\n  // Function to handle pagination change\r\n  const handlePaginationChange = (segmentIndex, page, pageSize) => {\r\n    setPaginationState(prev => ({\r\n      ...prev,\r\n      [segmentIndex]: {\r\n        ...prev[segmentIndex], // Preserve sorting if it exists\r\n        page,\r\n        pageSize\r\n      }\r\n    }));\r\n  };\r\n\r\n  // Function to get paginated data for a segment\r\n  const getPaginatedData = (flights, segmentIndex) => {\r\n    const { page = 1, pageSize = paginationConfig.pageSize } = paginationState[segmentIndex] || {};\r\n    const start = (page - 1) * pageSize;\r\n    const end = start + pageSize;\r\n    return flights.slice(start, end);\r\n  };\r\n\r\n  // Clear data when modal closes\r\n  useEffect(() => {\r\n    if (!isVisible) {\r\n      resetDetails();\r\n      setDateRangeError(false);\r\n      setSelectedDates(null);\r\n      setApiKey('');\r\n      setShowCalendar(false);\r\n    }\r\n  }, [isVisible]);\r\n\r\n  const handleOk = () => {\r\n    handleDateSearch(currentRoute);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    onClose();\r\n  };\r\n\r\n  const handleCalendarDateSelect = (dateRange) => {\r\n    setSelectedDates(dateRange);\r\n    setDateRangeError(false);\r\n  };\r\n\r\n  // Update the handleCalendarSearch function\r\n  const handleCalendarSearchClick = () => {\r\n    // Show the calendar component\r\n    setShowCalendar(true);\r\n    \r\n    // Call the original calendar search function\r\n    handleCalendarSearch(currentRoute);\r\n    \r\n    // After a short delay to ensure the calendar component is rendered,\r\n    // try multiple approaches to open the calendar\r\n    setTimeout(() => {\r\n      // Try to find and click the calendar button\r\n      const calendarButtons = document.querySelectorAll('.flight-availability-calendar .ant-picker-calendar-header button, .flight-availability-calendar .ant-picker-calendar-date-panel');\r\n      \r\n      if (calendarButtons.length > 0) {\r\n        // Try each button we found\r\n        calendarButtons.forEach(button => {\r\n          try {\r\n            button.click();\r\n          } catch (e) {\r\n            console.log('Failed to click button:', e);\r\n          }\r\n        });\r\n      } else {\r\n        console.log('No calendar buttons found');\r\n        \r\n        // Alternative approach: try to dispatch a custom event\r\n        const calendarElement = document.querySelector('.flight-availability-calendar .ant-picker-calendar');\r\n        if (calendarElement) {\r\n          try {\r\n            // Create and dispatch a custom event to signal the calendar to open\r\n            const event = new CustomEvent('openCalendar', { bubbles: true });\r\n            calendarElement.dispatchEvent(event);\r\n          } catch (e) {\r\n            console.log('Failed to dispatch event:', e);\r\n          }\r\n        }\r\n      }\r\n    }, 500); // Increased delay to ensure component is fully rendered\r\n  };\r\n\r\n  // Function to group flights by segment with safety checks\r\n  const getSegmentTables = () => {\r\n    if (!segmentDetails || segmentDetails.length === 0) return [];\r\n\r\n    // Group flights by segment and filter out hidden flights\r\n    const segments = segmentDetails.reduce((acc, flight) => {\r\n      if (flight.hidden) return acc; // Skip hidden flights\r\n      \r\n      if (!acc[flight.segmentIndex]) {\r\n        acc[flight.segmentIndex] = {\r\n          index: flight.segmentIndex,\r\n          route: `${flight.from}-${flight.to}`,\r\n          flights: []\r\n        };\r\n      }\r\n      acc[flight.segmentIndex].flights.push(flight);\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.entries(segments)\r\n      .sort(([a], [b]) => parseInt(a) - parseInt(b))\r\n      .map(([segmentIndex, flights]) => {\r\n        // Create a deep copy of flights to avoid modifying the original data\r\n        const flightsCopy = JSON.parse(JSON.stringify(flights.flights));\r\n        \r\n        // Get pagination state for this segment\r\n        const { page = 1, pageSize = paginationConfig.pageSize, sortField, sortOrder } = \r\n          paginationState[segmentIndex] || {};\r\n        \r\n        // Sort the entire dataset if sorting is applied\r\n        if (sortField && sortOrder) {\r\n          flightsCopy.sort((a, b) => {\r\n            let aValue, bValue;\r\n            \r\n            // Special handling for cabin class columns\r\n            if (sortField === 'economy' || sortField === 'business' || sortField === 'first') {\r\n              // For cabin classes, true sorts before false\r\n              aValue = a[sortField] === true ? 1 : 0;\r\n              bValue = b[sortField] === true ? 1 : 0;\r\n            } else {\r\n              aValue = a[sortField];\r\n              bValue = b[sortField];\r\n            }\r\n            \r\n            // Handle different data types\r\n            if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n              return sortOrder === 'ascend' \r\n                ? aValue.localeCompare(bValue) \r\n                : bValue.localeCompare(aValue);\r\n            } else if (sortField === 'duration') {\r\n              // For duration, convert to minutes if it's a string like \"2h 30m\"\r\n              if (typeof aValue === 'string' && aValue.includes('h')) {\r\n                const [aHours, aMinutes] = aValue.split('h').map(part => parseInt(part) || 0);\r\n                aValue = aHours * 60 + aMinutes;\r\n              }\r\n              if (typeof bValue === 'string' && bValue.includes('h')) {\r\n                const [bHours, bMinutes] = bValue.split('h').map(part => parseInt(part) || 0);\r\n                bValue = bHours * 60 + bMinutes;\r\n              }\r\n              return sortOrder === 'ascend' ? aValue - bValue : bValue - aValue;\r\n            } else {\r\n              // For numbers and other types\r\n              return sortOrder === 'ascend' \r\n                ? (aValue > bValue ? 1 : -1) \r\n                : (bValue > aValue ? 1 : -1);\r\n            }\r\n          });\r\n        }\r\n        \r\n        // Calculate pagination\r\n        const start = (page - 1) * pageSize;\r\n        const end = start + pageSize;\r\n        const paginatedFlights = flightsCopy.slice(start, end);\r\n        \r\n        return {\r\n          index: parseInt(segmentIndex),\r\n          route: `${flights.flights[0]?.from || '?'}-${flights.flights[0]?.to || '?'}`,\r\n          flights: paginatedFlights,\r\n          allFlights: flightsCopy, // Keep the full sorted dataset\r\n          total: flightsCopy.length\r\n        };\r\n      });\r\n  };\r\n\r\n  // Update the handleTableChange function to handle sorting\r\n  const handleTableChange = (segmentIndex, pagination, filters, sorter) => {\r\n    setPaginationState(prev => ({\r\n      ...prev,\r\n      [segmentIndex]: {\r\n        page: pagination.current,\r\n        pageSize: pagination.pageSize,\r\n        sortField: sorter.field,\r\n        sortOrder: sorter.order\r\n      }\r\n    }));\r\n  };\r\n\r\n  // Handle modal close with complete cleanup\r\n  const handleModalClose = () => {\r\n    // Reset all details including selected dates\r\n    resetDetails();\r\n    \r\n    // Explicitly clear selected dates\r\n    setSelectedDates(null);\r\n    \r\n    // Call the parent's onClose handler\r\n    onClose();\r\n  };\r\n\r\n  // Calculate total journey duration by summing segment durations and layovers\r\n  const calculateTotalDuration = (segments) => {\r\n    try {\r\n      let totalMinutes = 0;\r\n      \r\n      // Add each segment's flight duration\r\n      segments.forEach(segmentIndex => {\r\n        const flight = selectedFlights[segmentIndex]?.[0];\r\n        if (flight) {\r\n          // Convert duration string (e.g., \"6:25\" or \"6h 25m\") to minutes\r\n          if (typeof flight.duration === 'string') {\r\n            if (flight.duration.includes('h')) {\r\n              // Format: \"6h 25m\"\r\n              const [hours, minutes] = flight.duration.split('h').map(part => \r\n                parseInt(part.replace(/[^0-9]/g, '') || 0)\r\n              );\r\n              totalMinutes += (hours * 60) + minutes;\r\n            } else if (flight.duration.includes(':')) {\r\n              // Format: \"6:25\"\r\n              const [hours, minutes] = flight.duration.split(':').map(Number);\r\n              totalMinutes += (hours * 60) + minutes;\r\n            } else {\r\n              // Try to parse as number\r\n              totalMinutes += parseInt(flight.duration) || 0;\r\n            }\r\n          } else if (typeof flight.duration === 'number') {\r\n            totalMinutes += flight.duration;\r\n          }\r\n        }\r\n      });\r\n      \r\n      // Add layover durations between segments\r\n      for (let i = 0; i < segments.length - 1; i++) {\r\n        const currentSegment = selectedFlights[segments[i]]?.[0];\r\n        const nextSegment = selectedFlights[segments[i + 1]]?.[0];\r\n        \r\n        if (currentSegment && nextSegment) {\r\n          const arrivalTime = dayjs(currentSegment.ArrivesAt);\r\n          const departureTime = dayjs(nextSegment.DepartsAt);\r\n          const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\r\n          totalMinutes += layoverMinutes;\r\n        }\r\n      }\r\n      \r\n      // Format the total duration\r\n      const hours = Math.floor(totalMinutes / 60);\r\n      const minutes = totalMinutes % 60;\r\n      return `${hours}h ${minutes}m`;\r\n    } catch (error) {\r\n      console.error('Error calculating total duration:', error);\r\n      return 'N/A';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Flight Details\"\r\n      open={isVisible}\r\n      onCancel={() => {\r\n        onClose();\r\n        resetDetails();\r\n      }}\r\n      footer={null}\r\n      width={1600}\r\n      styles={{\r\n        body: { \r\n          padding: '12px',\r\n          maxWidth: '100%'\r\n        },\r\n        wrapper: {\r\n          top: '16px'\r\n        }\r\n      }}\r\n    >\r\n      <div style={{ marginBottom: 16 }}>\r\n        <div style={{ display: 'flex', gap: '8px', marginBottom: 16 }}>\r\n          <div style={{ display: 'flex', gap: '8px', flex: 1 }}>\r\n            <Input\r\n              placeholder=\"Enter your yapping password (Under Development)\"\r\n              value={apiKey}\r\n              onChange={(e) => setApiKey(e.target.value)}\r\n              style={{ flex: 1 }}\r\n            />\r\n            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n              <Button \r\n                type=\"text\" \r\n                icon={<CalendarOutlined />} \r\n                style={{ padding: '0 8px', marginRight: 4 }}\r\n                onClick={() => {\r\n                  // Find the DatePicker input and programmatically click it\r\n                  const datePickerInput = document.querySelector('.calendar-start-picker input');\r\n                  if (datePickerInput) datePickerInput.click();\r\n                }}\r\n              />\r\n              <DatePicker \r\n                placeholder=\"Calendar start on (optional)\"\r\n                onChange={(date) => setStartDate(date)}\r\n                disabledDate={(current) => {\r\n                  // Disable dates before today and after 330 days from today\r\n                  const today = dayjs().startOf('day');\r\n                  const maxDate = today.add(305, 'days');\r\n                  return current && (current < today || current > maxDate);\r\n                }}\r\n                style={{ width: 200 }}\r\n                className=\"calendar-start-picker\"\r\n                suffixIcon={null} // Remove the default calendar icon\r\n              />\r\n            </div>\r\n            <Button\r\n              type=\"primary\"\r\n              disabled={!apiKey || !apiKey.toLowerCase().startsWith('pro')}\r\n              onClick={handleCalendarSearchClick}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Only show the calendar if showCalendar is true */}\r\n      {showCalendar && (\r\n        <FlightAvailabilityCalendar \r\n          flightData={availabilityData}\r\n          currentRoute={currentRoute}\r\n          onDateRangeSelect={handleCalendarDateSelect}\r\n          selectedRange={selectedDates}\r\n          onSearch={handleCalendarSearchClick}\r\n        />\r\n      )}\r\n\r\n      {isLoadingSegments ? (\r\n        <div style={{ textAlign: 'center', margin: '20px 0' }}>\r\n          <Spin />\r\n        </div>\r\n      ) : (\r\n        segmentDetails?.length > 0 && (\r\n          <div style={{ marginTop: 0 }}>\r\n            <Typography.Title level={4} style={{ marginBottom: 16 }}>\r\n              Flights By Segment\r\n            </Typography.Title>\r\n            {getSegmentTables().map((segment, index) => (\r\n              <div key={segment.index} style={{ marginBottom: 16 }}>\r\n                <div style={{ \r\n                  display: 'flex', \r\n                  justifyContent: 'space-between', \r\n                  alignItems: 'center',\r\n                  marginBottom: 12 \r\n                }}>\r\n                  <Typography.Title level={5} style={{ margin: 0 }}>\r\n                    Segment {segment.index+1} ({segment.route}):\r\n                  </Typography.Title>\r\n                  <div>\r\n                    <Pagination\r\n                      size=\"small\"\r\n                      total={segment.total}\r\n                      pageSize={paginationState[segment.index]?.pageSize || paginationConfig.pageSize}\r\n                      current={paginationState[segment.index]?.page || 1}\r\n                      onChange={(page, pageSize) => handlePaginationChange(segment.index, page, pageSize)}\r\n                      showSizeChanger={true}\r\n                      showTotal={(total, range) => `${range[0]}-${range[1]} of ${total}`}\r\n                      style={{ \r\n                        display: 'inline-block',\r\n                        marginBottom: 0\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <Table\r\n                  columns={columns}\r\n                  dataSource={segment.flights}\r\n                  pagination={false}\r\n                  size=\"small\"\r\n                  onChange={(pagination, filters, sorter) => \r\n                    handleTableChange(segment.index, pagination, filters, sorter)\r\n                  }\r\n                />\r\n                \r\n                {/* Add layover duration if there's a next segment and flights are selected */}\r\n                {index < getSegmentTables().length - 1 && (\r\n                  <div style={{ \r\n                    padding: '0px',\r\n                    margin: '16px',\r\n                    textAlign: 'center',\r\n                    fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace'\r\n                  }}>\r\n                    <Typography.Text strong>\r\n                      {(() => {\r\n                        const currentSegmentFlights = selectedFlights[segment.index];\r\n                        const nextSegmentFlights = selectedFlights[segment.index + 1];\r\n                        \r\n                        if (!currentSegmentFlights?.[0] || !nextSegmentFlights?.[0]) {\r\n                          return 'Select flights to see connection time';\r\n                        }\r\n\r\n                        const currentFlight = currentSegmentFlights[0];\r\n                        const nextFlight = nextSegmentFlights[0];\r\n                        \r\n                        const arrivalTime = dayjs(currentFlight.ArrivesAt);\r\n                        const departureTime = dayjs(nextFlight.DepartsAt);\r\n                        const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\r\n                        \r\n                        // If layover is more than 24 hours, show as stopover\r\n                        if (layoverMinutes >= 24 * 60) {\r\n                          const days = Math.floor(layoverMinutes / (24 * 60));\r\n                          const remainingHours = Math.floor((layoverMinutes % (24 * 60)) / 60);\r\n                          const remainingMinutes = layoverMinutes % 60;\r\n                          \r\n                          return `Stopover duration: ${days} day${days > 1 ? 's' : ''} ${remainingHours}h ${remainingMinutes}m`;\r\n                        } else {\r\n                          // Regular layover display\r\n                          const hours = Math.floor(layoverMinutes / 60);\r\n                          const minutes = layoverMinutes % 60;\r\n                          return `Layover duration: ${hours}h ${minutes}m`;\r\n                        }\r\n                      })()}\r\n                    </Typography.Text>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )\r\n      )}\r\n\r\n      {/* Add Summary Table */}\r\n      {Object.keys(selectedFlights).length > 0 && (\r\n        <div style={{ marginTop: 24 }}>\r\n          <Typography.Title level={4}>Journey Summary</Typography.Title>\r\n          <Table\r\n            columns={[\r\n              {\r\n                title: 'From',\r\n                dataIndex: 'from',\r\n                key: 'from',\r\n              },\r\n              {\r\n                title: 'To',\r\n                dataIndex: 'to',\r\n                key: 'to',\r\n              },\r\n              {\r\n                title: 'Airlines',\r\n                dataIndex: 'airlines',\r\n                key: 'airlines',\r\n                render: (airlinesList) => {\r\n                  // More thorough safety checks\r\n                  if (!airlinesList || airlinesList === '-') return '-';\r\n                  \r\n                  try {\r\n                    const airlineArray = Array.isArray(airlinesList) ? airlinesList : airlinesList.split(', ');\r\n                    \r\n                    return (\r\n                      <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\r\n                        {airlineArray.map((airlineName, index) => {\r\n                          if (!airlineName) return null;\r\n                          \r\n                          const airline = airlines.find(a => \r\n                            airlineName.startsWith(a.label?.replace(` (${a.value})`, ''))\r\n                          );\r\n                          const airlineCode = airline?.value;\r\n                          \r\n                          return (\r\n                            <div key={`${airlineCode}-${index}`} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                              {airlineCode && (\r\n                                <img \r\n                                  src={`${process.env.PUBLIC_URL}/${airlineCode}.png`}\r\n                                  alt={airlineCode}\r\n                                  style={{ \r\n                                    width: '24px', \r\n                                    height: '24px',\r\n                                    objectFit: 'contain',\r\n                                    borderRadius: '4px'\r\n                                  }} \r\n                                  onError={(e) => {\r\n                                    e.target.style.display = 'none';\r\n                                  }}\r\n                                />\r\n                              )}\r\n                              {airlineName}\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    );\r\n                  } catch (error) {\r\n                    console.error('Error rendering airlines:', error);\r\n                    return '-';\r\n                  }\r\n                },\r\n              },\r\n              {\r\n                title: 'Duration',\r\n                dataIndex: 'duration',\r\n                key: 'duration',\r\n              },\r\n              {\r\n                title: 'Departs',\r\n                dataIndex: 'departs',\r\n                key: 'departs',\r\n              },\r\n              {\r\n                title: 'Arrives',\r\n                dataIndex: 'arrives',\r\n                key: 'arrives',\r\n              },\r\n              {\r\n                title: 'Economy Price',\r\n                dataIndex: 'economyPrice',\r\n                key: 'economyPrice',\r\n                onCell: (_, index) => ({\r\n                  rowSpan: index === 0 ? 2 : 0, // Show only in first row\r\n                }),\r\n              },\r\n              {\r\n                title: 'Business Price (Max %)',\r\n                dataIndex: 'businessPrice',\r\n                key: 'businessPrice',\r\n                onCell: (_, index) => ({\r\n                  rowSpan: index === 0 ? 2 : 0, // Show only in first row\r\n                }),\r\n                render: (text) => {\r\n                  if (!text || text === 'N/A') return text;\r\n                  try {\r\n                    const [price, percentage] = text.split(' (');\r\n                    if (!percentage) return text;\r\n                    return `${price} (${percentage}`;\r\n                  } catch (error) {\r\n                    return text;\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                title: 'First Price (Max %)',\r\n                dataIndex: 'firstPrice',\r\n                key: 'firstPrice',\r\n                onCell: (_, index) => ({\r\n                  rowSpan: index === 0 ? 2 : 0, // Show only in first row\r\n                }),\r\n                render: (text) => {\r\n                  if (!text || text === 'N/A') return text;\r\n                  try {\r\n                    const [price, percentage] = text.split(' (');\r\n                    if (!percentage) return text;\r\n                    return `${price} (${percentage}`;\r\n                  } catch (error) {\r\n                    return text;\r\n                  }\r\n                }\r\n              },\r\n            ]}\r\n            dataSource={(() => {\r\n              try {\r\n                const segments = Object.keys(selectedFlights).map(Number).sort((a, b) => a - b);\r\n                if (segments.length === 0) return [];\r\n                \r\n                const firstSegmentIndex = Math.min(...segments);\r\n                const lastSegmentIndex = Math.max(...segments);\r\n                \r\n                // Helper function to get airlines string\r\n                const getAirlinesString = (segmentRange) => {\r\n                  try {\r\n                    const airlineSet = new Set(\r\n                      segmentRange\r\n                        .flatMap(i => selectedFlights[i]?.map(f => f.airlines))\r\n                        .filter(Boolean)\r\n                    );\r\n                    return Array.from(airlineSet).join(', ') || '-';\r\n                  } catch (error) {\r\n                    console.error('Error getting airlines string:', error);\r\n                    return '-';\r\n                  }\r\n                };\r\n\r\n                // Debug logging\r\n                console.log('Selected Flights:', selectedFlights);\r\n                console.log('Segments:', segments);\r\n                \r\n                // Calculate prices for the ENTIRE journey (origin to final destination)\r\n                const calculatePrices = (hasStopover) => {\r\n                  try {\r\n                    // Get origin and destination airports\r\n                    const originAirport = airports.find(a => a.IATA === selectedFlights[firstSegmentIndex]?.[0]?.from);\r\n                    const destAirport = airports.find(a => a.IATA === selectedFlights[lastSegmentIndex]?.[0]?.to);\r\n                    \r\n                    if (!originAirport || !destAirport) return {\r\n                      economyPrice: '-',\r\n                      businessPrice: '-',\r\n                      firstPrice: '-'\r\n                    };\r\n\r\n                    // Calculate total distance and cabin class distances\r\n                    let totalDistance = 0;\r\n                    let businessDistance = 0;\r\n                    let firstDistance = 0;\r\n                    let businessOnlyDistance = 0;  // New: for segments with only business (no first)\r\n\r\n                    Object.entries(selectedFlights).forEach(([_, flights]) => {\r\n                      flights.forEach(flight => {\r\n                        const distance = parseInt(flight.distance || 0);\r\n                        totalDistance += distance;\r\n                        \r\n                        // For Business Price: Include all segments with business class\r\n                        if (flight.business) businessDistance += distance;\r\n                        \r\n                        // For First Price: Only count business from segments without first\r\n                        if (flight.business && !flight.first) businessOnlyDistance += distance;\r\n                        if (flight.first) firstDistance += distance;\r\n                      });\r\n                    });\r\n\r\n                    // Find matching price in pricing data\r\n                    const pricing = pricingData.find(p => \r\n                      p[\"From Region\"] === originAirport.Zone &&\r\n                      p[\"To Region\"] === destAirport.Zone &&\r\n                      totalDistance >= p[\"Min Distance\"] &&\r\n                      totalDistance <= p[\"Max Distance\"]\r\n                    );\r\n\r\n                    if (!pricing) return {\r\n                      economyPrice: '-',\r\n                      businessPrice: '-',\r\n                      firstPrice: '-'\r\n                    };\r\n\r\n                    // Calculate percentages\r\n                    const businessPercentage = Math.round((businessDistance / totalDistance) * 100);\r\n                    const firstPercentage = Math.round((firstDistance / totalDistance) * 100);\r\n                    const businessOnlyPercentage = Math.round((businessOnlyDistance / totalDistance) * 100);\r\n\r\n                    // Add stopover fee if applicable\r\n                    const stopoverExtra = hasStopover ? 5000 : 0;\r\n\r\n                    return {\r\n                      economyPrice: pricing.Economy ? (pricing.Economy + stopoverExtra).toLocaleString() : '-',\r\n                      // If business percentage is 0, show \"-\" instead of price\r\n                      businessPrice: pricing.Business && businessPercentage > 0 ? \r\n                        `${(pricing.Business + stopoverExtra).toLocaleString()} (${businessPercentage}% J)` : '-',\r\n                      // If first percentage is 0, show \"-\" instead of price\r\n                      firstPrice: pricing.First && firstPercentage > 0 ? \r\n                        `${(pricing.First + stopoverExtra).toLocaleString()} (${\r\n                          firstPercentage > 0 && businessOnlyPercentage > 0 \r\n                            ? `${firstPercentage}% F, ${businessOnlyPercentage}% J`\r\n                            : firstPercentage > 0 \r\n                              ? `${firstPercentage}% F`\r\n                              : '0%'\r\n                        })` : '-'\r\n                    };\r\n                  } catch (error) {\r\n                    console.error('Error calculating prices:', error);\r\n                    return {\r\n                      economyPrice: '-',\r\n                      businessPrice: '-',\r\n                      firstPrice: '-'\r\n                    };\r\n                  }\r\n                };\r\n\r\n                // Find stopover point\r\n                let stopoverIndex = null;\r\n                for (let i = firstSegmentIndex; i < lastSegmentIndex; i++) {\r\n                  const currentFlight = selectedFlights[i]?.[0];\r\n                  const nextFlight = selectedFlights[i + 1]?.[0];\r\n                  \r\n                  if (currentFlight && nextFlight) {\r\n                    const arrivalTime = dayjs(currentFlight.ArrivesAt);\r\n                    const departureTime = dayjs(nextFlight.DepartsAt);\r\n                    const layoverMinutes = departureTime.diff(arrivalTime, 'minute');\r\n                    \r\n                    if (layoverMinutes >= 24 * 60) {\r\n                      stopoverIndex = i;\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                // Calculate prices once for the entire journey\r\n                const prices = calculatePrices(stopoverIndex !== null);\r\n\r\n                // Calculate total journey duration by summing segment durations and layovers\r\n                const totalDuration = calculateTotalDuration(segments);\r\n\r\n                // If no stopover found, return single row\r\n                if (stopoverIndex === null) {\r\n                  return [{\r\n                    key: '1',\r\n                    from: selectedFlights[firstSegmentIndex]?.[0]?.from || '-',\r\n                    to: selectedFlights[lastSegmentIndex]?.[0]?.to || '-',\r\n                    airlines: getAirlinesString(segments),\r\n                    duration: totalDuration,\r\n                    departs: dayjs(selectedFlights[firstSegmentIndex]?.[0]?.DepartsAt).format('HH:mm MM-DD'),\r\n                    arrives: dayjs(selectedFlights[lastSegmentIndex]?.[0]?.ArrivesAt).format('HH:mm MM-DD'),\r\n                    ...prices\r\n                  }];\r\n                }\r\n\r\n                // Split journey at stopover with merged price cells\r\n                return [\r\n                  {\r\n                    key: '1',\r\n                    from: selectedFlights[firstSegmentIndex]?.[0]?.from || '-',\r\n                    to: selectedFlights[stopoverIndex]?.[0]?.to || '-',\r\n                    airlines: getAirlinesString(segments.filter(i => i <= stopoverIndex)),\r\n                    duration: calculateTotalDuration(segments.filter(i => i <= stopoverIndex)),\r\n                    departs: dayjs(selectedFlights[firstSegmentIndex]?.[0]?.DepartsAt).format('HH:mm MM-DD'),\r\n                    arrives: dayjs(selectedFlights[stopoverIndex]?.[0]?.ArrivesAt).format('HH:mm MM-DD'),\r\n                    ...prices  // Same prices for first row\r\n                  },\r\n                  {\r\n                    key: '2',\r\n                    from: selectedFlights[stopoverIndex + 1]?.[0]?.from || '-',\r\n                    to: selectedFlights[lastSegmentIndex]?.[0]?.to || '-',\r\n                    airlines: getAirlinesString(segments.filter(i => i > stopoverIndex)),\r\n                    duration: calculateTotalDuration(segments.filter(i => i > stopoverIndex)),\r\n                    departs: dayjs(selectedFlights[stopoverIndex + 1]?.[0]?.DepartsAt).format('HH:mm MM-DD'),\r\n                    arrives: dayjs(selectedFlights[lastSegmentIndex]?.[0]?.ArrivesAt).format('HH:mm MM-DD'),\r\n                    economyPrice: null,  // Will be hidden by rowSpan\r\n                    businessPrice: null, // Will be hidden by rowSpan\r\n                    firstPrice: null     // Will be hidden by rowSpan\r\n                  }\r\n                ];\r\n              } catch (error) {\r\n                console.error('Error generating dataSource:', error);\r\n                return [];\r\n              }\r\n            })()}\r\n            pagination={false}\r\n            size=\"small\"\r\n          />\r\n          \r\n          {/* Add Route Validation */}\r\n          <div style={{ marginTop: 12, fontFamily: 'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace' }}>\r\n            <Typography.Text>\r\n              {(() => {\r\n                const firstSegmentIndex = Math.min(...Object.keys(selectedFlights).map(Number));\r\n                const lastSegmentIndex = Math.max(...Object.keys(selectedFlights).map(Number));\r\n                const originAirport = airports.find(a => a.IATA === selectedFlights[firstSegmentIndex]?.[0]?.from);\r\n                const destAirport = airports.find(a => a.IATA === selectedFlights[lastSegmentIndex]?.[0]?.to);\r\n\r\n                if (!originAirport || !destAirport) return 'Unable to validate route: airport data missing';\r\n\r\n                // Haversine formula\r\n                const R = 3959; // Earth's radius in miles\r\n                const lat1 = originAirport.Latitude * Math.PI / 180;\r\n                const lat2 = destAirport.Latitude * Math.PI / 180;\r\n                const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\r\n                const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\r\n\r\n                const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n                          Math.cos(lat1) * Math.cos(lat2) *\r\n                          Math.sin(dLon/2) * Math.sin(dLon/2);\r\n                \r\n                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n                const directDistance = Math.round(R * c);\r\n\r\n                // Calculate total segment distance\r\n                let totalSegmentDistance = 0;\r\n                Object.values(selectedFlights).forEach(flights => {\r\n                  flights.forEach(flight => {\r\n                    totalSegmentDistance += parseInt(flight.distance || 0);\r\n                  });\r\n                });\r\n\r\n                const isValid = totalSegmentDistance <= (2 * directDistance);\r\n                const percentage = Math.round(totalSegmentDistance/directDistance * 100);\r\n\r\n                return (\r\n                  <>\r\n                    <div style={{ \r\n                      marginTop: 8,\r\n                      fontSize: '16px',\r\n                      fontWeight: 'bold',\r\n                      color: isValid ? '#52c41a' : '#f5222d',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      gap: '8px',\r\n                      width: '100%'\r\n                    }}>\r\n                      {isValid ? (\r\n                        <>\r\n                          <span>✓</span>\r\n                          <span>ROUTING VALIDATED</span>\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <span>✗</span>\r\n                          <span>THIS ROUTING IS INVALID</span>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                );\r\n              })()}\r\n            </Typography.Text>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <style jsx>{`\r\n        :global(.ant-table) {\r\n          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\r\n        }\r\n      `}</style>\r\n    </Modal>\r\n  );\r\n};\r\n\r\n// Helper function to format duration\r\nconst formatDuration = (duration) => {\r\n  if (typeof duration === 'string' && duration.includes('h')) {\r\n    return duration; // Already formatted\r\n  }\r\n  \r\n  // If it's a number (minutes)\r\n  if (typeof duration === 'number') {\r\n    const hours = Math.floor(duration / 60);\r\n    const minutes = duration % 60;\r\n    return `${hours}h ${minutes}m`;\r\n  }\r\n  \r\n  return duration; // Return as is if we can't format it\r\n};\r\n\r\nexport default FlightDetailsModal; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}