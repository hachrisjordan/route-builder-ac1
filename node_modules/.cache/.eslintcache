[{"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\index.js":"1","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\App.js":"2","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\reportWebVitals.js":"3","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\pages\\FlightSearch.jsx":"4","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\data\\airlines.js":"5","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\data\\airports.js":"6","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\ResultsTable.jsx":"7","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\FlightDetailsModal.jsx":"8","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\hooks\\useFlightSearch.js":"9","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\SearchForm.jsx":"10","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\columns.js":"11","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\hooks\\useFlightDetails.js":"12","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\utils\\flightDataProcessor.js":"13","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\utils\\timeCalculations.js":"14","C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\segmentColumns.js":"15"},{"size":581,"mtime":1740412408389,"results":"16","hashOfConfig":"17"},{"size":226,"mtime":1740412408382,"results":"18","hashOfConfig":"17"},{"size":375,"mtime":1740412408393,"results":"19","hashOfConfig":"17"},{"size":1906,"mtime":1740499251815,"results":"20","hashOfConfig":"17"},{"size":1503,"mtime":1740584062158,"results":"21","hashOfConfig":"17"},{"size":213963,"mtime":1740412408386,"results":"22","hashOfConfig":"17"},{"size":2863,"mtime":1740499055927,"results":"23","hashOfConfig":"17"},{"size":5460,"mtime":1740583704253,"results":"24","hashOfConfig":"17"},{"size":1911,"mtime":1740497929750,"results":"25","hashOfConfig":"17"},{"size":5366,"mtime":1740497988599,"results":"26","hashOfConfig":"17"},{"size":4135,"mtime":1740499214818,"results":"27","hashOfConfig":"17"},{"size":22459,"mtime":1740587416671,"results":"28","hashOfConfig":"17"},{"size":2021,"mtime":1740498112539,"results":"29","hashOfConfig":"17"},{"size":1015,"mtime":1740506487312,"results":"30","hashOfConfig":"17"},{"size":4821,"mtime":1740588343149,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iyeiup",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\index.js",[],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\App.js",[],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\reportWebVitals.js",[],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\pages\\FlightSearch.jsx",["77"],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\data\\airlines.js",[],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\data\\airports.js",["78"],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\ResultsTable.jsx",[],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\FlightDetailsModal.jsx",["79","80"],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\hooks\\useFlightSearch.js",[],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\SearchForm.jsx",[],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\columns.js",[],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\hooks\\useFlightDetails.js",["81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96"],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\utils\\flightDataProcessor.js",[],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\utils\\timeCalculations.js",[],[],"C:\\Users\\nguyen77\\docker-neo4j\\route-builder-ac1\\src\\components\\FlightSearch\\segmentColumns.js",[],[],{"ruleId":"97","severity":1,"message":"98","line":2,"column":10,"nodeType":"99","messageId":"100","endLine":2,"endColumn":14},{"ruleId":"101","severity":1,"message":"102","line":158,"column":35,"nodeType":"103","messageId":"104","endLine":158,"endColumn":36,"suggestions":"105"},{"ruleId":"97","severity":1,"message":"106","line":20,"column":5,"nodeType":"99","messageId":"100","endLine":20,"endColumn":20},{"ruleId":"97","severity":1,"message":"107","line":74,"column":21,"nodeType":"99","messageId":"100","endLine":74,"endColumn":31},{"ruleId":"97","severity":1,"message":"108","line":5,"column":10,"nodeType":"99","messageId":"100","endLine":5,"endColumn":27},{"ruleId":"97","severity":1,"message":"109","line":14,"column":10,"nodeType":"99","messageId":"100","endLine":14,"endColumn":27},{"ruleId":"97","severity":1,"message":"110","line":14,"column":29,"nodeType":"99","messageId":"100","endLine":14,"endColumn":49},{"ruleId":"97","severity":1,"message":"111","line":15,"column":10,"nodeType":"99","messageId":"100","endLine":15,"endColumn":25},{"ruleId":"97","severity":1,"message":"112","line":15,"column":27,"nodeType":"99","messageId":"100","endLine":15,"endColumn":45},{"ruleId":"97","severity":1,"message":"113","line":16,"column":10,"nodeType":"99","messageId":"100","endLine":16,"endColumn":30},{"ruleId":"97","severity":1,"message":"114","line":17,"column":10,"nodeType":"99","messageId":"100","endLine":17,"endColumn":26},{"ruleId":"97","severity":1,"message":"115","line":17,"column":28,"nodeType":"99","messageId":"100","endLine":17,"endColumn":47},{"ruleId":"97","severity":1,"message":"116","line":18,"column":10,"nodeType":"99","messageId":"100","endLine":18,"endColumn":24},{"ruleId":"97","severity":1,"message":"117","line":18,"column":26,"nodeType":"99","messageId":"100","endLine":18,"endColumn":43},{"ruleId":"97","severity":1,"message":"118","line":21,"column":9,"nodeType":"99","messageId":"100","endLine":21,"endColumn":19},{"ruleId":"97","severity":1,"message":"119","line":23,"column":11,"nodeType":"99","messageId":"100","endLine":23,"endColumn":15},{"ruleId":"97","severity":1,"message":"120","line":37,"column":9,"nodeType":"99","messageId":"100","endLine":37,"endColumn":27},{"ruleId":"121","severity":1,"message":"122","line":148,"column":9,"nodeType":"123","messageId":"124","endLine":158,"endColumn":10},{"ruleId":"97","severity":1,"message":"125","line":170,"column":11,"nodeType":"99","messageId":"100","endLine":170,"endColumn":19},{"ruleId":"126","severity":1,"message":"127","line":431,"column":9,"nodeType":"128","endLine":526,"endColumn":4,"suggestions":"129"},"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["130","131"],"'selectedFlights' is assigned a value but never used.","'maxEndDate' is assigned a value but never used.","'getSegmentColumns' is defined but never used.","'processedSegments' is assigned a value but never used.","'setProcessedSegments' is assigned a value but never used.","'originalFlights' is assigned a value but never used.","'setOriginalFlights' is assigned a value but never used.","'originalCombinations' is assigned a value but never used.","'processedFlights' is assigned a value but never used.","'setProcessedFlights' is assigned a value but never used.","'initialFlights' is assigned a value but never used.","'setInitialFlights' is assigned a value but never used.","'formatTime' is assigned a value but never used.","'base' is assigned a value but never used.","'getSegmentDistance' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'baseDate' is assigned a value but never used.","react-hooks/exhaustive-deps","The 'handleFlightSelect' function makes the dependencies of useMemo Hook (at line 532) change on every render. To fix this, wrap the definition of 'handleFlightSelect' in its own useCallback() Hook.","VariableDeclarator",["132"],{"messageId":"133","fix":"134","desc":"135"},{"messageId":"136","fix":"137","desc":"138"},{"desc":"139","fix":"140"},"removeEscape",{"range":"141","text":"142"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"143","text":"144"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Wrap the definition of 'handleFlightSelect' in its own useCallback() Hook.",{"range":"145","text":"146"},[4370,4371],"",[4370,4370],"\\",[17182,21005],"useCallback((flight, segmentIndex) => {\r\n    const flightKey = `${flight.flightNumber}_${dayjs(flight.DepartsAt).format('YYYY-MM-DD')}`;\r\n    console.log('Selected flight:', flightKey, 'from segment:', segmentIndex);\r\n    \r\n    // Create new selected flights object\r\n    const newSelected = { ...selectedFlights };\r\n    \r\n    // Toggle selection\r\n    if (newSelected[segmentIndex] && \r\n        `${newSelected[segmentIndex].flightNumber}_${dayjs(newSelected[segmentIndex].DepartsAt).format('YYYY-MM-DD')}` === flightKey) {\r\n      delete newSelected[segmentIndex];\r\n      console.log('Deselected flight');\r\n    } else {\r\n      newSelected[segmentIndex] = flight;\r\n      console.log('Selected flight');\r\n    }\r\n    \r\n    setSelectedFlights(newSelected);\r\n    \r\n    if (Object.keys(newSelected).length > 0) {\r\n      // Find ALL valid combinations that include the selected flight\r\n      const validCombos = validCombinations.filter(combo => {\r\n        const selectedFlight = combo[segmentIndex];\r\n        return selectedFlight.flightNumber === flight.flightNumber &&\r\n               dayjs(selectedFlight.DepartsAt).isSame(dayjs(flight.DepartsAt));\r\n      });\r\n\r\n      console.log(`Found ${validCombos.length} valid combinations with ${flight.flightNumber}`);\r\n\r\n      // Get all valid flights from these combinations\r\n      const validFlights = new Set();\r\n      validCombos.forEach(combo => {\r\n        combo.forEach((f, idx) => {\r\n          validFlights.add(`${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${idx}`);\r\n        });\r\n      });\r\n\r\n      // Deduplicate and update segment details\r\n      const filteredFlights = validCombos.flatMap(combo => \r\n        combo.map((f, idx) => ({\r\n          ...f,\r\n          isSelected: idx === segmentIndex && f.flightNumber === flight.flightNumber,\r\n          segmentIndex: idx\r\n        }))\r\n      );\r\n\r\n      // Remove duplicates while preserving order\r\n      const seenFlights = new Set();\r\n      const uniqueFlights = filteredFlights.filter(f => {\r\n        const key = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}_${f.segmentIndex}`;\r\n        if (!seenFlights.has(key)) {\r\n          seenFlights.add(key);\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n\r\n      setSegmentDetails(uniqueFlights);\r\n    } else {\r\n      // When deselecting, show all unique flights from valid combinations\r\n      const allValidFlights = new Map(); // Use Map to track flights by segment\r\n      \r\n      validCombinations.forEach(combo => {\r\n        combo.forEach((f, idx) => {\r\n          const segmentKey = `${f.from}-${f.to}`;\r\n          if (!allValidFlights.has(segmentKey)) {\r\n            allValidFlights.set(segmentKey, new Map());\r\n          }\r\n          \r\n          const flightKey = `${f.flightNumber}_${dayjs(f.DepartsAt).format('YYYY-MM-DD HH:mm')}`;\r\n          if (!allValidFlights.get(segmentKey).has(flightKey)) {\r\n            allValidFlights.get(segmentKey).set(flightKey, {\r\n              ...f,\r\n              isSelected: false,\r\n              segmentIndex: idx\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      // Flatten the Map of Maps into an array\r\n      const resetFlights = Array.from(allValidFlights.values())\r\n        .flatMap(segmentFlights => Array.from(segmentFlights.values()));\r\n      \r\n      console.log('\\n=== Resetting to All Valid Flights ===');\r\n      Array.from(allValidFlights.entries()).forEach(([route, flights]) => {\r\n        console.log(`\\n${route}:`);\r\n        Array.from(flights.values())\r\n          .sort((a, b) => dayjs(a.DepartsAt).valueOf() - dayjs(b.DepartsAt).valueOf())\r\n          .forEach(f => console.log(`  ${f.flightNumber} (${dayjs(f.DepartsAt).format('MM-DD HH:mm')})`));\r\n      });\r\n      console.log('\\n======================');\r\n\r\n      setSegmentDetails(resetFlights);\r\n    }\r\n  })"]